unit Monkey_Datepicker_JS;
//kt added entire unit  1/2016

{
Downloaded from http://www.monkeyphysics.com/mootools/script/2/datepicker
on Jan 6, 2016 by Kevin Toppenberg, MD.
Stated license is Creative Commons Attribution-ShareAlike 3.0
http://creativecommons.org/licenses/by-sa/3.0/

Formatting changes made to code below to include in Delphi, e.g. wrapping lines and converting ' to "
}

(*
 * datepicker.js - MooTools Datepicker class
 * @version 1.17
 *
 * by MonkeyPhysics.com
 *
 * Source/Documentation available at:
 * http://www.monkeyphysics.com/mootools/script/2/datepicker
 *
 * --
 *
 * Smoothly animating, very configurable and easy to install.
 * No Ajax, pure Javascript. 4 skins available out of the box.
 *
 * --
 *
 * Some Rights Reserved
 * http://creativecommons.org/licenses/by-sa/3.0/
 *
 *)



interface

uses
  Classes, Controls, StdCtrls, SysUtils;

procedure AddMonkeyDatepickerJS(SL : TStringList);

implementation

procedure AddMonkeyDatepickerJS(SL : TStringList);
begin
  if SL.IndexOf('var DatePicker = new Class({') <> -1 then exit;  //don't add duplicate

  SL.Add('var DatePicker = new Class({');
  SL.Add(' ');
  SL.Add('  Implements: Options,');
  SL.Add(' ');
  SL.Add('  // working date, which we will keep modifying to render the calendars');
  SL.Add('  d: "",');
  SL.Add(' ');
  SL.Add('  // just so that we need not request it over and over');
  SL.Add('  today: "",');
  SL.Add(' ');
  SL.Add('  // current user-choice in date object format');
  SL.Add('  choice: {},');
  SL.Add(' ');
  SL.Add('  // size of body, used to animate the sliding');
  SL.Add('  bodysize: {},');
  SL.Add(' ');
  SL.Add('  // to check availability of next/previous buttons');
  SL.Add('  limit: {},');
  SL.Add(' ');
  SL.Add('  // element references:');
  SL.Add('  attachTo: null,    // selector for target inputs');
  SL.Add('  picker: null,      // main datepicker container');
  SL.Add('  slider: null,      // slider that contains both oldContents and newContents, used to animate between 2 different views');
  SL.Add('  oldContents: null, // used in animating from-view to new-view');
  SL.Add('  newContents: null, // used in animating from-view to new-view');
  SL.Add('  input: null,       // original input element (used for input/output)');
  SL.Add('  visual: null,      // visible input (used for rendering)');
  SL.Add(' ');
  SL.Add('  options: {');
  SL.Add('    pickerClass: "datepicker",');
  SL.Add('    days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],');
  SL.Add('    months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],');
  SL.Add('    dayShort: 2,');
  SL.Add('    monthShort: 3,');
  SL.Add('    startDay: 1, // Sunday (0) through Saturday (6) - be aware that this may affect your layout, since the days on the right might have a different margin');
  SL.Add('    timePicker: false,');
  SL.Add('    timePickerOnly: false,');
  SL.Add('    yearPicker: true,');
  SL.Add('    yearsPerPage: 20,');
  SL.Add('    format: "d-m-Y",');
  SL.Add('    allowEmpty: false,');
  SL.Add('    inputOutputFormat: "U", // default to unix timestamp');
  SL.Add('    animationDuration: 400,');
  SL.Add('    useFadeInOut: !Browser.Engine.trident, // dont animate fade-in/fade-out for IE');
  SL.Add('    startView: "month", // allowed values: {time, month, year, decades}');
  SL.Add('    positionOffset: { x: 0, y: 0 },');
  SL.Add('    minDate: null, // { date: "[date-string]", format: "[date-string-interpretation-format]" }');
  SL.Add('    maxDate: null, // same as minDate');
  SL.Add('    debug: false,');
  SL.Add('    toggleElements: null,');
  SL.Add(' ');
  SL.Add('    // and some event hooks:');
  SL.Add('    onShow: $empty,   // triggered when the datepicker pops up');
  SL.Add('    onClose: $empty,  // triggered after the datepicker is closed (destroyed)');
  SL.Add('    onSelect: $empty  // triggered when a date is selected');
  SL.Add('  },');
  SL.Add(' ');
  SL.Add('  initialize: function(attachTo, options) {');
  SL.Add('    this.attachTo = attachTo;');
  SL.Add('    this.setOptions(options).attach();');
  SL.Add('    if (this.options.timePickerOnly) {');
  SL.Add('      this.options.timePicker = true;');
  SL.Add('      this.options.startView = "time";');
  SL.Add('    }');
  SL.Add('    this.formatMinMaxDates();');
  SL.Add('    document.addEvent("mousedown", this.close.bind(this));');
  SL.Add('  },');
  SL.Add(' ');
  SL.Add('  formatMinMaxDates: function() {');
  SL.Add('    if (this.options.minDate && this.options.minDate.format) {');
  SL.Add('      this.options.minDate = this.unformat(this.options.minDate.date, this.options.minDate.format);');
  SL.Add('    }');
  SL.Add('    if (this.options.maxDate && this.options.maxDate.format) {');
  SL.Add('      this.options.maxDate = this.unformat(this.options.maxDate.date, this.options.maxDate.format);');
  SL.Add('      this.options.maxDate.setHours(23);');
  SL.Add('      this.options.maxDate.setMinutes(59);');
  SL.Add('      this.options.maxDate.setSeconds(59);');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add(' ');
  SL.Add('  attach: function() {');
  SL.Add('    // toggle the datepicker through a separate element?');
  SL.Add('    if ($chk(this.options.toggleElements)) {');
  SL.Add('      var togglers = $$(this.options.toggleElements);');
  SL.Add('      document.addEvents({');
  SL.Add('        "keydown": function(e) {');
  SL.Add('          if (e.key == "tab") {');
  SL.Add('            this.close(null, true);');
  SL.Add('          }');
  SL.Add('        }.bind(this)');
  SL.Add('      });');
  SL.Add('    };');
  SL.Add(' ');
  SL.Add('    // attach functionality to the inputs');
  SL.Add('    $$(this.attachTo).each(function(item, index) {');
  SL.Add(' ');
  SL.Add('      // never double attach');
  SL.Add('      if (item.retrieve("datepicker")) return;');
  SL.Add(' ');
  SL.Add('      // determine starting value(s)');
  SL.Add('      if ($chk(item.get("value"))) {');
  SL.Add('        var init_clone_val = this.format(new Date(this.unformat(item.get("value"), this.options.inputOutputFormat)), this.options.format);');
  SL.Add('      } else if (!this.options.allowEmpty) {');
  SL.Add('        var init_clone_val = this.format(new Date(), this.options.format);');
  SL.Add('      } else {');
  SL.Add('        var init_clone_val = "";');
  SL.Add('      }');
  SL.Add(' ');
  SL.Add('      // create clone');
  SL.Add('      var display = item.getStyle("display");');
  SL.Add('      var clone = item');
  SL.Add('      .setStyle("display", this.options.debug ? display : "none")');
  SL.Add('      .store("datepicker", true) // to prevent double attachment...');
  SL.Add('      .clone()');
  SL.Add('      .store("datepicker", true) // ...even for the clone (!)');
  SL.Add('      .removeProperty("name")    // secure clean (form)submission');
  SL.Add('      .setStyle("display", display)');
  SL.Add('      .set("value", init_clone_val)');
  SL.Add('      .inject(item, "after");');
  SL.Add(' ');
  SL.Add('      // events');
  SL.Add('      if ($chk(this.options.toggleElements)) {');
  SL.Add('        togglers[index]');
  SL.Add('          .setStyle("cursor", "pointer")');
  SL.Add('          .addEvents({');
  SL.Add('            "click": function(e) {');
  SL.Add('              this.onFocus(item, clone);');
  SL.Add('            }.bind(this)');
  SL.Add('          });');
  SL.Add('        clone.addEvents({');
  SL.Add('          "blur": function() {');
  SL.Add('            item.set("value", clone.get("value"));');
  SL.Add('          }');
  SL.Add('        });');
  SL.Add('      } else {');
  SL.Add('        clone.addEvents({');
  SL.Add('          "keydown": function(e) {');
  SL.Add('            if (this.options.allowEmpty && (e.key == "delete" || e.key == "backspace")) {');
  SL.Add('              item.set("value", "");');
  SL.Add('              e.target.set("value", "");');
  SL.Add('              this.close(null, true);');
  SL.Add('            } else if (e.key == "tab") {');
  SL.Add('              this.close(null, true);');
  SL.Add('            } else {');
  SL.Add('              e.stop();');
  SL.Add('            }');
  SL.Add('          }.bind(this),');
  SL.Add('          "focus": function(e) {');
  SL.Add('            this.onFocus(item, clone);');
  SL.Add('          }.bind(this)');
  SL.Add('        });');
  SL.Add('      }');
  SL.Add('    }.bind(this));');
  SL.Add('  },');
  SL.Add(' ');
  SL.Add('  onFocus: function(original_input, visual_input) {');
  SL.Add('    var init_visual_date, d = visual_input.getCoordinates();');
  SL.Add(' ');
  SL.Add('    if ($chk(original_input.get("value"))) {');
  SL.Add('      init_visual_date = this.unformat(original_input.get("value"), this.options.inputOutputFormat).valueOf();');
  SL.Add('    } else {');
  SL.Add('      init_visual_date = new Date();');
  SL.Add('      if ($chk(this.options.maxDate) && init_visual_date.valueOf() > this.options.maxDate.valueOf()) {');
  SL.Add('        init_visual_date = new Date(this.options.maxDate.valueOf());');
  SL.Add('      }');
  SL.Add('      if ($chk(this.options.minDate) && init_visual_date.valueOf() < this.options.minDate.valueOf()) {');
  SL.Add('        init_visual_date = new Date(this.options.minDate.valueOf());');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add(' ');
  SL.Add('    this.show({ left: d.left + this.options.positionOffset.x, top: d.top + d.height + this.options.positionOffset.y }, init_visual_date);');
  SL.Add('    this.input = original_input;');
  SL.Add('    this.visual = visual_input;');
  SL.Add('    this.options.onShow();');
  SL.Add('  },');
  SL.Add(' ');
  SL.Add('  dateToObject: function(d) {');
  SL.Add('    return {');
  SL.Add('      year: d.getFullYear(),');
  SL.Add('      month: d.getMonth(),');
  SL.Add('      day: d.getDate(),');
  SL.Add('      hours: d.getHours(),');
  SL.Add('      minutes: d.getMinutes(),');
  SL.Add('      seconds: d.getSeconds()');
  SL.Add('    };');
  SL.Add('  },');
  SL.Add(' ');
  SL.Add('  dateFromObject: function(values) {');
  SL.Add('    var d = new Date();');
  SL.Add('    d.setDate(1);');
  SL.Add('    ["year", "month", "day", "hours", "minutes", "seconds"].each(function(type) {');
  SL.Add('      var v = values[type];');
  SL.Add('      if (!$chk(v)) return;');
  SL.Add('      switch (type) {');
  SL.Add('        case "day": d.setDate(v); break;');
  SL.Add('        case "month": d.setMonth(v); break;');
  SL.Add('        case "year": d.setFullYear(v); break;');
  SL.Add('        case "hours": d.setHours(v); break;');
  SL.Add('        case "minutes": d.setMinutes(v); break;');
  SL.Add('        case "seconds": d.setSeconds(v); break;');
  SL.Add('      }');
  SL.Add('    });');
  SL.Add('    return d;');
  SL.Add('  },');
  SL.Add(' ');
  SL.Add('  show: function(position, timestamp) {');
  SL.Add('    this.formatMinMaxDates();');
  SL.Add('    if ($chk(timestamp)) {');
  SL.Add('      this.d = new Date(timestamp);');
  SL.Add('    } else {');
  SL.Add('      this.d = new Date();');
  SL.Add('    }');
  SL.Add('    this.today = new Date();');
  SL.Add('    this.choice = this.dateToObject(this.d);');
  SL.Add('    this.mode = (this.options.startView == "time" && !this.options.timePicker) ? "month" : this.options.startView;');
  SL.Add('    this.render();');
  SL.Add('    this.picker.setStyles(position);');
  SL.Add('  },');
  SL.Add(' ');
  SL.Add('  render: function(fx) {');
  SL.Add('    if (!$chk(this.picker)) {');
  SL.Add('      this.constructPicker();');
  SL.Add('    } else {');
  SL.Add('      // swap contents so we can fill the newContents again and animate');
  SL.Add('      var o = this.oldContents;');
  SL.Add('      this.oldContents = this.newContents;');
  SL.Add('      this.newContents = o;');
  SL.Add('      this.newContents.empty();');
  SL.Add('    }');
  SL.Add(' ');
  SL.Add('    // remember current working date');
  SL.Add('    var startDate = new Date(this.d.getTime());');
  SL.Add(' ');
  SL.Add('    // intially assume both left and right are allowed');
  SL.Add('    this.limit = { right: false, left: false };');
  SL.Add(' ');
  SL.Add('    // render! booty!');
  SL.Add('    if (this.mode == "decades") {');
  SL.Add('      this.renderDecades();');
  SL.Add('    } else if (this.mode == "year") {');
  SL.Add('      this.renderYear();');
  SL.Add('    } else if (this.mode == "time") {');
  SL.Add('      this.renderTime();');
  SL.Add('      this.limit = { right: true, left: true }; // no left/right in timeview');
  SL.Add('    } else {');
  SL.Add('      this.renderMonth();');
  SL.Add('    }');
  SL.Add(' ');
  SL.Add('    this.picker.getElement(".previous").setStyle("visibility", this.limit.left ? "hidden" : "visible");');
  SL.Add('    this.picker.getElement(".next").setStyle("visibility", this.limit.right ? "hidden" : "visible");');
  SL.Add('    this.picker.getElement(".titleText").setStyle("cursor", this.allowZoomOut() ? "pointer" : "default");');
  SL.Add(' ');
  SL.Add('    // restore working date');
  SL.Add('    this.d = startDate;');
  SL.Add(' ');
  SL.Add('    // if ever the opacity is set to "0" it was only to have us fade it in here');
  SL.Add('    // refer to the constructPicker() function, which instantiates the picker at opacity 0 when fading is desired');
  SL.Add('    if (this.picker.getStyle("opacity") == 0) {');
  SL.Add('      this.picker.tween("opacity", 0, 1);');
  SL.Add('    }');
  SL.Add(' ');
  SL.Add('    // animate');
  SL.Add('    if ($chk(fx)) this.fx(fx);');
  SL.Add('  },');
  SL.Add(' ');
  SL.Add('  fx: function(fx) {');
  SL.Add('    if (fx == "right") {');
  SL.Add('      this.oldContents.setStyles({ left: 0, opacity: 1 });');
  SL.Add('      this.newContents.setStyles({ left: this.bodysize.x, opacity: 1 });');
  SL.Add('      this.slider.setStyle("left", 0).tween("left", 0, -this.bodysize.x);');
  SL.Add('    } else if (fx == "left") {');
  SL.Add('      this.oldContents.setStyles({ left: this.bodysize.x, opacity: 1 });');
  SL.Add('      this.newContents.setStyles({ left: 0, opacity: 1 });');
  SL.Add('      this.slider.setStyle("left", -this.bodysize.x).tween("left", -this.bodysize.x, 0);');
  SL.Add('    } else if (fx == "fade") {');
  SL.Add('      this.slider.setStyle("left", 0);');
  SL.Add('      this.oldContents.setStyle("left", 0).set("tween", { duration: this.options.animationDuration / 2 }).tween("opacity", 1, 0);');
  SL.Add('      this.newContents.setStyles({ opacity: 0, left: 0}).set("tween", { duration: this.options.animationDuration }).tween("opacity", 0, 1);');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add(' ');
  SL.Add('  constructPicker: function() {');
  SL.Add('    this.picker = new Element("div", { "class": this.options.pickerClass }).inject(document.body);');
  SL.Add('    if (this.options.useFadeInOut) {');
  SL.Add('      this.picker.setStyle("opacity", 0).set("tween", { duration: this.options.animationDuration });');
  SL.Add('    }');
  SL.Add(' ');
  SL.Add('    var h = new Element("div", { "class": "header" }).inject(this.picker);');
  SL.Add('    var titlecontainer = new Element("div", { "class": "title" }).inject(h);');
  SL.Add('    new Element("div", { "class": "previous" }).addEvent("click", this.previous.bind(this)).set("text", "<").inject(h);');    //kt arrow symbol was "آ«"
  SL.Add('    new Element("div", { "class": "next" }).addEvent("click", this.next.bind(this)).set("text", ">").inject(h);');    //kt arrow symbol was "آ»"
  SL.Add('    new Element("div", { "class": "closeButton" }).addEvent("click", this.close.bindWithEvent(this, true)).set("text", "x").inject(h);');
  SL.Add('    new Element("span", { "class": "titleText" }).addEvent("click", this.zoomOut.bind(this)).inject(titlecontainer);');
  SL.Add(' ');
  SL.Add('    var b = new Element("div", { "class": "body" }).inject(this.picker);');
  SL.Add('    this.bodysize = b.getSize();');
  SL.Add('    this.slider = new Element("div", { styles: { position: "absolute", top: 0, left: 0, width: 2 * this.bodysize.x, height: this.bodysize.y }})');
  SL.Add('          .set("tween", { duration: this.options.animationDuration, transition: Fx.Transitions.Quad.easeInOut }).inject(b);');
  SL.Add('    this.oldContents = new Element("div", { styles: { position: "absolute", top: 0,');
  SL.Add('      left: this.bodysize.x, width: this.bodysize.x, height: this.bodysize.y }}).inject(this.slider);');
  SL.Add('    this.newContents = new Element("div", { styles: { position: "absolute", top: 0,');
  SL.Add('      left: 0, width: this.bodysize.x, height: this.bodysize.y }}).inject(this.slider);');
  SL.Add('  },');
  SL.Add(' ');
  SL.Add('  renderTime: function() {');
  SL.Add('    var container = new Element("div", { "class": "time" }).inject(this.newContents);');
  SL.Add(' ');
  SL.Add('    if (this.options.timePickerOnly) {');
  SL.Add('      this.picker.getElement(".titleText").set("text", "Select a time");');
  SL.Add('    } else {');
  SL.Add('      this.picker.getElement(".titleText").set("text", this.format(this.d, "j M, Y"));');
  SL.Add('    }');
  SL.Add(' ');
  SL.Add('    new Element("input", { type: "text", "class": "hour" })');
  SL.Add('      .set("value", this.leadZero(this.d.getHours()))');
  SL.Add('      .addEvents({');
  SL.Add('        mousewheel: function(e) {');
  SL.Add('          var i = e.target, v = i.get("value").toInt();');
  SL.Add('          i.focus();');
  SL.Add('          if (e.wheel > 0) {');
  SL.Add('            v = (v < 23) ? v + 1 : 0;');
  SL.Add('          } else {');
  SL.Add('            v = (v > 0) ? v - 1 : 23;');
  SL.Add('          }');
  SL.Add('          i.set("value", this.leadZero(v));');
  SL.Add('          e.stop();');
  SL.Add('        }.bind(this)');
  SL.Add('      })');
  SL.Add('      .set("maxlength", 2)');
  SL.Add('      .inject(container);');
  SL.Add(' ');
  SL.Add('    new Element("input", { type: "text", "class": "minutes" })');
  SL.Add('      .set("value", this.leadZero(this.d.getMinutes()))');
  SL.Add('      .addEvents({');
  SL.Add('        mousewheel: function(e) {');
  SL.Add('          var i = e.target, v = i.get("value").toInt();');
  SL.Add('          i.focus();');
  SL.Add('          if (e.wheel > 0) {');
  SL.Add('            v = (v < 59) ? v + 1 : 0;');
  SL.Add('          } else {');
  SL.Add('            v = (v > 0) ? v - 1 : 59;');
  SL.Add('          }');
  SL.Add('          i.set("value", this.leadZero(v));');
  SL.Add('          e.stop();');
  SL.Add('        }.bind(this)');
  SL.Add('      })');
  SL.Add('      .set("maxlength", 2)');
  SL.Add('      .inject(container);');
  SL.Add(' ');
  SL.Add('    new Element("div", { "class": "separator" }).set("text", ":").inject(container);');
  SL.Add(' ');
  SL.Add('    new Element("input", { type: "submit", value: "OK", "class": "ok" })');
  SL.Add('      .addEvents({');
  SL.Add('        click: function(e) {');
  SL.Add('          e.stop();');
  SL.Add('          this.select($merge(this.dateToObject(this.d), {');
  SL.Add('            hours: this.picker.getElement(".hour").get("value").toInt(),');
  SL.Add('            minutes: this.picker.getElement(".minutes").get("value").toInt() }));');
  SL.Add('        }.bind(this)');
  SL.Add('      })');
  SL.Add('      .set("maxlength", 2)');
  SL.Add('      .inject(container);');
  SL.Add('  },');
  SL.Add(' ');
  SL.Add('  renderMonth: function() {');
  SL.Add('    var month = this.d.getMonth();');
  SL.Add(' ');
  SL.Add('    this.picker.getElement(".titleText").set("text", this.options.months[month] + " " + this.d.getFullYear());');
  SL.Add(' ');
  SL.Add('    this.d.setDate(1);');
  SL.Add('    while (this.d.getDay() != this.options.startDay) {');
  SL.Add('      this.d.setDate(this.d.getDate() - 1);');
  SL.Add('    }');
  SL.Add(' ');
  SL.Add('    var container = new Element("div", { "class": "days" }).inject(this.newContents);');
  SL.Add('    var titles = new Element("div", { "class": "titles" }).inject(container);');
  SL.Add('    var d, i, classes, e, weekcontainer;');
  SL.Add(' ');
  SL.Add('    for (d = this.options.startDay; d < (this.options.startDay + 7); d++) {');
  SL.Add('      new Element("div", { "class": "title day day" + (d % 7) }).set("text",');
  SL.Add('        this.options.days[(d % 7)].substring(0,this.options.dayShort)).inject(titles);');
  SL.Add('    }');
  SL.Add(' ');
  SL.Add('    var available = false;');
  SL.Add('    var t = this.today.toDateString();');
  SL.Add('    var currentChoice = this.dateFromObject(this.choice).toDateString();');
  SL.Add(' ');
  SL.Add('    for (i = 0; i < 42; i++) {');
  SL.Add('      classes = [];');
  SL.Add('      classes.push("day");');
  SL.Add('      classes.push("day"+this.d.getDay());');
  SL.Add('      if (this.d.toDateString() == t) classes.push("today");');
  SL.Add('      if (this.d.toDateString() == currentChoice) classes.push("selected");');
  SL.Add('      if (this.d.getMonth() != month) classes.push("otherMonth");');
  SL.Add(' ');
  SL.Add('      if (i % 7 == 0) {');
  SL.Add('        weekcontainer = new Element("div", { "class": "week week"+(Math.floor(i/7)) }).inject(container);');
  SL.Add('      }');
  SL.Add(' ');
  SL.Add('      e = new Element("div", { "class": classes.join(" ") }).set("text", this.d.getDate()).inject(weekcontainer);');
  SL.Add('      if (this.limited("date")) {');
  SL.Add('        e.addClass("unavailable");');
  SL.Add('        if (available) {');
  SL.Add('          this.limit.right = true;');
  SL.Add('        } else if (this.d.getMonth() == month) {');
  SL.Add('          this.limit.left = true;');
  SL.Add('        }');
  SL.Add('      } else {');
  SL.Add('        available = true;');
  SL.Add('        e.addEvent("click", function(e, d) {');
  SL.Add('          if (this.options.timePicker) {');
  SL.Add('            this.d.setDate(d.day);');
  SL.Add('            this.d.setMonth(d.month);');
  SL.Add('            this.mode = "time";');
  SL.Add('            this.render("fade");');
  SL.Add('          } else {');
  SL.Add('            this.select(d);');
  SL.Add('          }');
  SL.Add('        }.bindWithEvent(this, { day: this.d.getDate(), month: this.d.getMonth(), year: this.d.getFullYear() }));');
  SL.Add('      }');
  SL.Add('      this.d.setDate(this.d.getDate() + 1);');
  SL.Add('    }');
  SL.Add('    if (!available) this.limit.right = true;');
  SL.Add('  },');
  SL.Add(' ');
  SL.Add('  renderYear: function() {');
  SL.Add('    var month = this.today.getMonth();');
  SL.Add('    var thisyear = this.d.getFullYear() == this.today.getFullYear();');
  SL.Add('    var selectedyear = this.d.getFullYear() == this.choice.year;');
  SL.Add(' ');
  SL.Add('    this.picker.getElement(".titleText").set("text", this.d.getFullYear());');
  SL.Add('    this.d.setMonth(0);');
  SL.Add(' ');
  SL.Add('    var i, e;');
  SL.Add('    var available = false;');
  SL.Add('    var container = new Element("div", { "class": "months" }).inject(this.newContents);');
  SL.Add(' ');
  SL.Add('    for (i = 0; i <= 11; i++) {');
  SL.Add('      e = new Element("div", { "class": "month month"+(i+1)+(i == month && thisyear ? " today" : "")');
  SL.Add('        +(i == this.choice.month && selectedyear ? " selected" : "") })');
  SL.Add('        .set("text", this.options.monthShort ? this.options.months[i].substring(0,');
  SL.Add('          this.options.monthShort) : this.options.months[i]).inject(container);');
  SL.Add(' ');
  SL.Add('      if (this.limited("month")) {');
  SL.Add('        e.addClass("unavailable");');
  SL.Add('        if (available) {');
  SL.Add('          this.limit.right = true;');
  SL.Add('        } else {');
  SL.Add('          this.limit.left = true;');
  SL.Add('        }');
  SL.Add('      } else {');
  SL.Add('        available = true;');
  SL.Add('        e.addEvent("click", function(e, d) {');
  SL.Add('          this.d.setDate(1);');
  SL.Add('          this.d.setMonth(d);');
  SL.Add('          this.mode = "month";');
  SL.Add('          this.render("fade");');
  SL.Add('        }.bindWithEvent(this, i));');
  SL.Add('      }');
  SL.Add('      this.d.setMonth(i);');
  SL.Add('    }');
  SL.Add('    if (!available) this.limit.right = true;');
  SL.Add('  },');
  SL.Add(' ');
  SL.Add('  renderDecades: function() {');
  SL.Add('    // start neatly at interval (eg. 1980 instead of 1987)');
  SL.Add('    while (this.d.getFullYear() % this.options.yearsPerPage > 0) {');
  SL.Add('      this.d.setFullYear(this.d.getFullYear() - 1);');
  SL.Add('    }');
  SL.Add(' ');
  SL.Add('    this.picker.getElement(".titleText").set("text", this.d.getFullYear() + "-" +');
  SL.Add('      (this.d.getFullYear() + this.options.yearsPerPage - 1));');
  SL.Add(' ');
  SL.Add('    var i, y, e;');
  SL.Add('    var available = false;');
  SL.Add('    var container = new Element("div", { "class": "years" }).inject(this.newContents);');
  SL.Add(' ');
  SL.Add('    if ($chk(this.options.minDate) && this.d.getFullYear() <= this.options.minDate.getFullYear()) {');
  SL.Add('      this.limit.left = true;');
  SL.Add('    }');
  SL.Add(' ');
  SL.Add('    for (i = 0; i < this.options.yearsPerPage; i++) {');
  SL.Add('      y = this.d.getFullYear();');
  SL.Add('      e = new Element("div", { "class": "year year" + i + (y == this.today.getFullYear() ? " today" : "")');
  SL.Add('        + (y == this.choice.year ? " selected" : "") }).set("text", y).inject(container);');
  SL.Add(' ');
  SL.Add('      if (this.limited("year")) {');
  SL.Add('        e.addClass("unavailable");');
  SL.Add('        if (available) {');
  SL.Add('          this.limit.right = true;');
  SL.Add('        } else {');
  SL.Add('          this.limit.left = true;');
  SL.Add('        }');
  SL.Add('      } else {');
  SL.Add('        available = true;');
  SL.Add('        e.addEvent("click", function(e, d) {');
  SL.Add('          this.d.setFullYear(d);');
  SL.Add('          this.mode = "year";');
  SL.Add('          this.render("fade");');
  SL.Add('        }.bindWithEvent(this, y));');
  SL.Add('      }');
  SL.Add('      this.d.setFullYear(this.d.getFullYear() + 1);');
  SL.Add('    }');
  SL.Add('    if (!available) {');
  SL.Add('      this.limit.right = true;');
  SL.Add('    }');
  SL.Add('    if ($chk(this.options.maxDate) && this.d.getFullYear() >= this.options.maxDate.getFullYear()) {');
  SL.Add('      this.limit.right = true;');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add(' ');
  SL.Add('  limited: function(type) {');
  SL.Add('    var cs = $chk(this.options.minDate);');
  SL.Add('    var ce = $chk(this.options.maxDate);');
  SL.Add('    if (!cs && !ce) return false;');
  SL.Add(' ');
  SL.Add('    switch (type) {');
  SL.Add('      case "year":');
  SL.Add('        return (cs && this.d.getFullYear() < this.options.minDate.getFullYear())');
  SL.Add('          || (ce && this.d.getFullYear() > this.options.maxDate.getFullYear());');
  SL.Add(' ');
  SL.Add('      case "month":');
  SL.Add('        // todo: there has got to be an easier way...?');
  SL.Add('        var ms = ("" + this.d.getFullYear() + this.leadZero(this.d.getMonth())).toInt();');
  SL.Add('        return cs && ms < ("" + this.options.minDate.getFullYear() + this.leadZero(this.options.minDate.getMonth())).toInt()');
  SL.Add('          || ce && ms > ("" + this.options.maxDate.getFullYear() + this.leadZero(this.options.maxDate.getMonth())).toInt()');
  SL.Add(' ');
  SL.Add('      case "date":');
  SL.Add('        return (cs && this.d < this.options.minDate) || (ce && this.d > this.options.maxDate);');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add(' ');
  SL.Add('  allowZoomOut: function() {');
  SL.Add('    if (this.mode == "time" && this.options.timePickerOnly) return false;');
  SL.Add('    if (this.mode == "decades") return false;');
  SL.Add('    if (this.mode == "year" && !this.options.yearPicker) return false;');
  SL.Add('    return true;');
  SL.Add('  },');
  SL.Add(' ');
  SL.Add('  zoomOut: function() {');
  SL.Add('    if (!this.allowZoomOut()) return;');
  SL.Add('    if (this.mode == "year") {');
  SL.Add('      this.mode = "decades";');
  SL.Add('    } else if (this.mode == "time") {');
  SL.Add('      this.mode = "month";');
  SL.Add('    } else {');
  SL.Add('      this.mode = "year";');
  SL.Add('    }');
  SL.Add('    this.render("fade");');
  SL.Add('  },');
  SL.Add(' ');
  SL.Add('  previous: function() {');
  SL.Add('    if (this.mode == "decades") {');
  SL.Add('      this.d.setFullYear(this.d.getFullYear() - this.options.yearsPerPage);');
  SL.Add('    } else if (this.mode == "year") {');
  SL.Add('      this.d.setFullYear(this.d.getFullYear() - 1);');
  SL.Add('    } else if (this.mode == "month") {');
  SL.Add('      this.d.setDate(1);');
  SL.Add('      this.d.setMonth(this.d.getMonth() - 1);');
  SL.Add('    }');
  SL.Add('    this.render("left");');
  SL.Add('  },');
  SL.Add(' ');
  SL.Add('  next: function() {');
  SL.Add('    if (this.mode == "decades") {');
  SL.Add('      this.d.setFullYear(this.d.getFullYear() + this.options.yearsPerPage);');
  SL.Add('    } else if (this.mode == "year") {');
  SL.Add('      this.d.setFullYear(this.d.getFullYear() + 1);');
  SL.Add('    } else if (this.mode == "month") {');
  SL.Add('      this.d.setDate(1);');
  SL.Add('      this.d.setMonth(this.d.getMonth() + 1);');
  SL.Add('    }');
  SL.Add('    this.render("right");');
  SL.Add('  },');
  SL.Add(' ');
  SL.Add('  close: function(e, force) {');
  SL.Add('    if (!$(this.picker)) return;');
  SL.Add('    var clickOutside = ($chk(e) && e.target != this.picker && !this.picker.hasChild(e.target) && e.target != this.visual);');
  SL.Add('    if (force || clickOutside) {');
  SL.Add('      if (this.options.useFadeInOut) {');
  SL.Add('        this.picker.set("tween", { duration: this.options.animationDuration / 2,');
  SL.Add('          onComplete: this.destroy.bind(this) }).tween("opacity", 1, 0);');
  SL.Add('      } else {');
  SL.Add('        this.destroy();');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add(' ');
  SL.Add('  destroy: function() {');
  SL.Add('    this.picker.destroy();');
  SL.Add('    this.picker = null;');
  SL.Add('    this.options.onClose();');
  SL.Add('  },');
  SL.Add(' ');
  SL.Add('  select: function(values) {');
  SL.Add('    this.choice = $merge(this.choice, values);');
  SL.Add('    var d = this.dateFromObject(this.choice);');
  SL.Add('    this.input.set("value", this.format(d, this.options.inputOutputFormat));');
  SL.Add('    this.visual.set("value", this.format(d, this.options.format));');
  SL.Add('    this.options.onSelect(d);');
  SL.Add('    this.close(null, true);');
  SL.Add('  },');
  SL.Add(' ');
  SL.Add('  leadZero: function(v) {');
  SL.Add('    return v < 10 ? "0"+v : v;');
  SL.Add('  },');
  SL.Add(' ');
  SL.Add('  format: function(t, format) {');
  SL.Add('    var f = "";');
  SL.Add('    var h = t.getHours();');
  SL.Add('    var m = t.getMonth();');
  SL.Add(' ');
  SL.Add('    for (var i = 0; i < format.length; i++) {');
  SL.Add('      switch(format.charAt(i)) {');
  SL.Add('        case "\\": i++; f+= format.charAt(i); break;');
  SL.Add('        case "y": f += (t.getFullYear() + "").substring(2); break;');
  SL.Add('        case "Y": f += t.getFullYear(); break;');
  SL.Add('        case "m": f += this.leadZero(m + 1); break;');
  SL.Add('        case "n": f += (m + 1); break;');
  SL.Add('        case "M": f += this.options.months[m].substring(0,this.options.monthShort); break;');
  SL.Add('        case "F": f += this.options.months[m]; break;');
  SL.Add('        case "d": f += this.leadZero(t.getDate()); break;');
  SL.Add('        case "j": f += t.getDate(); break;');
  SL.Add('        case "D": f += this.options.days[t.getDay()].substring(0,this.options.dayShort); break;');
  SL.Add('        case "l": f += this.options.days[t.getDay()]; break;');
  SL.Add('        case "G": f += h; break;');
  SL.Add('        case "H": f += this.leadZero(h); break;');
  SL.Add('        case "g": f += (h % 12 ? h % 12 : 12); break;');
  SL.Add('        case "h": f += this.leadZero(h % 12 ? h % 12 : 12); break;');
  SL.Add('        case "a": f += (h > 11 ? "pm" : "am"); break;');
  SL.Add('        case "A": f += (h > 11 ? "PM" : "AM"); break;');
  SL.Add('        case "i": f += this.leadZero(t.getMinutes()); break;');
  SL.Add('        case "s": f += this.leadZero(t.getSeconds()); break;');
  SL.Add('        case "U": f += Math.floor(t.valueOf() / 1000); break;');
  SL.Add('        default:  f += format.charAt(i);');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return f;');
  SL.Add('  },');
  SL.Add(' ');
  SL.Add('  unformat: function(t, format) {');
  SL.Add('    var d = new Date();');
  SL.Add('    d.setMonth(0);');
  SL.Add('    d.setDate(1);');
  SL.Add('    var a = {};');
  SL.Add('    var c, m;');
  SL.Add('    t = t.toString();');
  SL.Add(' ');
  SL.Add('    for (var i = 0; i < format.length; i++) {');
  SL.Add('      c = format.charAt(i);');
  SL.Add('      switch(c) {');
  SL.Add('        case "\\": r = null; i++; break;');
  SL.Add('        case "y": r = "[0-9]{2}"; break;');
  SL.Add('        case "Y": r = "[0-9]{4}"; break;');
  SL.Add('        case "m": r = "0[1-9]|1[012]"; break;');
  SL.Add('        case "n": r = "[1-9]|1[012]"; break;');
  SL.Add('        case "M": r = "[A-Za-z]{"+this.options.monthShort+"}"; break;');
  SL.Add('        case "F": r = "[A-Za-z]+"; break;');
  SL.Add('        case "d": r = "0[1-9]|[12][0-9]|3[01]"; break;');
  SL.Add('        case "j": r = "[12][0-9]|3[01]|[1-9]"; break;');
  SL.Add('        case "D": r = "[A-Za-z]{"+this.options.dayShort+"}"; break;');
  SL.Add('        case "l": r = "[A-Za-z]+"; break;');
  SL.Add('        case "G":');
  SL.Add('        case "H":');
  SL.Add('        case "g":');
  SL.Add('        case "h": r = "[0-9]{1,2}"; break;');
  SL.Add('        case "a": r = "(am|pm)"; break;');
  SL.Add('        case "A": r = "(AM|PM)"; break;');
  SL.Add('        case "i":');
  SL.Add('        case "s": r = "[012345][0-9]"; break;');
  SL.Add('        case "U": r = "-?[0-9]+$"; break;');
  SL.Add('        default:  r = null;');
  SL.Add('      }');
  SL.Add(' ');
  SL.Add('      if ($chk(r)) {');
  SL.Add('        m = t.match("^"+r);');
  SL.Add('        if ($chk(m)) {');
  SL.Add('          a[c] = m[0];');
  SL.Add('          t = t.substring(a[c].length);'); 
  SL.Add('        } else {');
  SL.Add('          if (this.options.debug) alert("Fatal Error in DatePicker\n\nUnexpected format at: \""');
  SL.Add('            +t+"\" expected format character \""+c+"\" (pattern \""+r+"\")");');
  SL.Add('          return d;');
  SL.Add('        }');
  SL.Add('      } else {');
  SL.Add('        t = t.substring(1);');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add(' ');
  SL.Add('    for (c in a) {');
  SL.Add('      var v = a[c];');
  SL.Add('      switch(c) {');
  SL.Add('        case "y": d.setFullYear(v < 30 ? 2000 + v.toInt() : 1900 + v.toInt()); break; // assume between 1930 - 2029');
  SL.Add('        case "Y": d.setFullYear(v); break;');
  SL.Add('        case "m":');
  SL.Add('        case "n": d.setMonth(v - 1); break;');
  SL.Add('        // FALL THROUGH NOTICE! "M" has no break, because "v" now is the');
  SL.Add('        //  full month (eg. "February"), which will work with the next format "F":');
  SL.Add('        case "M": v = this.options.months.filter(function(item, index)');
  SL.Add('                 { return item.substring(0,this.options.monthShort) == v }.bind(this))[0];');
  SL.Add('        case "F": d.setMonth(this.options.months.indexOf(v)); break;');
  SL.Add('        case "d":');
  SL.Add('        case "j": d.setDate(v); break;');
  SL.Add('        case "G":');
  SL.Add('        case "H": d.setHours(v); break;');
  SL.Add('        case "g":');
  SL.Add('        case "h": if (a["a"] == "pm" || a["A"] == "PM") { d.setHours(v == 12 ? 0 : v.toInt() + 12); } else { d.setHours(v); } break;');
  SL.Add('        case "i": d.setMinutes(v); break;');
  SL.Add('        case "s": d.setSeconds(v); break;');
  SL.Add('        case "U": d = new Date(v.toInt() * 1000);');
  SL.Add('      }');
  SL.Add('    };');
  SL.Add(' ');
  SL.Add('    return d;');
  SL.Add('  }');
  SL.Add('});');
end;

end.

