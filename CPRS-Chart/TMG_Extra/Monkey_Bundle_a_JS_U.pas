unit Monkey_Bundle_a_JS_U;
//kt added entire unit  1/2016

(*
Downloaded from http://www.monkeyphysics.com/mootools/script/2/datepicker
on Jan 6, 2016 by Kevin Toppenberg, MD.
Stated license is Creative Commons Attribution-ShareAlike 3.0
http://creativecommons.org/licenses/by-sa/3.0/

Some modifications made below (parts removed), marked with "//kt"
Also changes made to formating.  Original was MINIFIED.
*)


interface

uses
  Classes, Controls, StdCtrls, SysUtils, StrUtils;

procedure AddMonkeyBundleScriptA(SL : TStringList);

implementation

procedure AddMonkeyBundleScriptA(SL : TStringList);
begin
  SL.Add('var MooTools = {');
  SL.Add('  version: "1.2.0",');
  SL.Add('  build: ""');
  SL.Add('};');
  SL.Add('var Native = function(J) {');
  SL.Add('  J = J || {};');
  SL.Add('  var F = J.afterImplement || function() {};');
  SL.Add('  var G = J.generics;');
  SL.Add('  G = (G !== false);');
  SL.Add('  var H = J.legacy;');
  SL.Add('  var E = J.initialize;');
  SL.Add('  var B = J.protect;');
  SL.Add('  var A = J.name;');
  SL.Add('  var C = E || H;');
  SL.Add('  C.constructor = Native;');
  SL.Add('  C.$family = {');
  SL.Add('    name: "native"');
  SL.Add('  };');
  SL.Add('  if (H && E) {');
  SL.Add('    C.prototype = H.prototype;');
  SL.Add('  }');
  SL.Add('  C.prototype.constructor = C;');
  SL.Add('  if (A) {');
  SL.Add('    var D = A.toLowerCase();');
  SL.Add('    C.prototype.$family = {');
  SL.Add('      name: D');
  SL.Add('    };');
  SL.Add('    Native.typize(C, D);');
  SL.Add('  }');
  SL.Add('  var I = function(M, K, N, L) {');
  SL.Add('    if (!B || L || !M.prototype[K]) {');
  SL.Add('      M.prototype[K] = N;');
  SL.Add('    }');
  SL.Add('    if (G) {');
  SL.Add('      Native.genericize(M, K, B);');
  SL.Add('    }');
  SL.Add('    F.call(M, K, N);');
  SL.Add('    return M;');
  SL.Add('  };');
  SL.Add('  C.implement = function(L, K, N) {');
  SL.Add('    if (typeof L == "string") {');
  SL.Add('      return I(this, L, K, N);');
  SL.Add('    }');
  SL.Add('    for (var M in L) {');
  SL.Add('      I(this, M, L[M], K);');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  };');
  SL.Add('  C.alias = function(M, K, N) {');
  SL.Add('    if (typeof M == "string") {');
  SL.Add('      M = this.prototype[M];');
  SL.Add('      if (M) {');
  SL.Add('        I(this, K, M, N);');
  SL.Add('      }');
  SL.Add('    } else {');
  SL.Add('      for (var L in M) {');
  SL.Add('        this.alias(L, M[L], K);');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  };');
  SL.Add('  return C;');
  SL.Add('};');
  SL.Add('Native.implement = function(D, C) {');
  SL.Add('  for (var B = 0, A = D.length; B < A; B++) {');
  SL.Add('    D[B].implement(C);');
  SL.Add('  }');
  SL.Add('};');
  SL.Add('Native.genericize = function(B, C, A) {');
  SL.Add('  if ((!A || !B[C]) && typeof B.prototype[C] == "function") {');
  SL.Add('    B[C] = function() {');
  SL.Add('      var D = Array.prototype.slice.call(arguments);');
  SL.Add('      return B.prototype[C].apply(D.shift(), D);');
  SL.Add('    };');
  SL.Add('  }');
  SL.Add('};');
  SL.Add('Native.typize = function(A, B) {');
  SL.Add('  if (!A.type) {');
  SL.Add('    A.type = function(C) {');
  SL.Add('      return ($type(C) === B);');
  SL.Add('    };');
  SL.Add('  }');
  SL.Add('};');
  SL.Add('Native.alias = function(E, B, A, F) {');
  SL.Add('  for (var D = 0, C = E.length; D < C; D++) {');
  SL.Add('    E[D].alias(B, A, F);');
  SL.Add('  }');
  SL.Add('};');
  SL.Add('(function(B) {');
  SL.Add('  for (var A in B) {');
  SL.Add('    Native.typize(B[A], A);');
  SL.Add('  }');
  SL.Add('})({');
  SL.Add('  "boolean": Boolean,');
  SL.Add('  "native": Native,');
  SL.Add('  object: Object');
  SL.Add('});');
  SL.Add('(function(B) {');
  SL.Add('  for (var A in B) {');
  SL.Add('    new Native({');
  SL.Add('      name: A,');
  SL.Add('      initialize: B[A],');
  SL.Add('      protect: true');
  SL.Add('    });');
  SL.Add('  }');
  SL.Add('})({');
  SL.Add('  String: String,');
  SL.Add('  Function: Function,');
  SL.Add('  Number: Number,');
  SL.Add('  Array: Array,');
  SL.Add('  RegExp: RegExp,');
  SL.Add('  Date: Date');
  SL.Add('});');
  SL.Add('(function(B, A) {');
  SL.Add('  for (var C = A.length; C--; C) {');
  SL.Add('    Native.genericize(B, A[C], true);');
  SL.Add('  }');
  SL.Add('  return arguments.callee;');
  SL.Add('})(Array, ["pop", "push", "reverse", "shift", "sort", "splice", "unshift",');
  SL.Add('  "concat", "join", "slice", "toString", "valueOf", "indexOf",');
  SL.Add('  "lastIndexOf"');
  SL.Add('])(String, ["charAt", "charCodeAt", "concat", "indexOf", "lastIndexOf", "match",');
  SL.Add('  "replace", "search", "slice", "split", "substr", "substring",');
  SL.Add('  "toLowerCase", "toUpperCase", "valueOf"');
  SL.Add(']);');
  SL.Add('');
  SL.Add('function $chk(A) {');
  SL.Add('  return !!(A || A === 0);');
  SL.Add('}');
  SL.Add('');
  SL.Add('function $clear(A) {');
  SL.Add('  clearTimeout(A);');
  SL.Add('  clearInterval(A);');
  SL.Add('  return null;');
  SL.Add('}');
  SL.Add('');
  SL.Add('function $defined(A) {');
  SL.Add('  return (A != undefined);');
  SL.Add('}');
  SL.Add('');
  SL.Add('function $empty() {}');
  SL.Add('');
  SL.Add('function $arguments(A) {');
  SL.Add('  return function() {');
  SL.Add('    return arguments[A];');
  SL.Add('  };');
  SL.Add('}');
  SL.Add('');
  SL.Add('function $lambda(A) {');
  SL.Add('  return (typeof A == "function") ? A : function() {');
  SL.Add('    return A;');
  SL.Add('  };');
  SL.Add('}');
  SL.Add('');
  SL.Add('function $extend(C, A) {');
  SL.Add('  for (var B in (A || {})) {');
  SL.Add('    C[B] = A[B];');
  SL.Add('  }');
  SL.Add('  return C;');
  SL.Add('}');
  SL.Add('');
  SL.Add('function $unlink(C) {');
  SL.Add('  var B;');
  SL.Add('  switch ($type(C)) {');
  SL.Add('    case "object":');
  SL.Add('      B = {};');
  SL.Add('      for (var E in C) {');
  SL.Add('        B[E] = $unlink(C[E]);');
  SL.Add('      }');
  SL.Add('      break;');
  SL.Add('    case "hash":');
  SL.Add('      B = $unlink(C.getClean());');
  SL.Add('      break;');
  SL.Add('    case "array":');
  SL.Add('      B = [];');
  SL.Add('      for (var D = 0, A = C.length; D < A; D++) {');
  SL.Add('        B[D] = $unlink(C[D]);');
  SL.Add('      }');
  SL.Add('      break;');
  SL.Add('    default:');
  SL.Add('      return C;');
  SL.Add('  }');
  SL.Add('  return B;');
  SL.Add('}');
  SL.Add('');
  SL.Add('function $merge() {');
  SL.Add('  var E = {};');
  SL.Add('  for (var D = 0, A = arguments.length; D < A; D++) {');
  SL.Add('    var B = arguments[D];');
  SL.Add('    if ($type(B) != "object") {');
  SL.Add('      continue;');
  SL.Add('    }');
  SL.Add('    for (var C in B) {');
  SL.Add('      var G = B[C],');
  SL.Add('        F = E[C];');
  SL.Add('      E[C] = (F && $type(G) == "object" && $type(F) == "object") ? $merge(');
  SL.Add('        F, G) : $unlink(G);');
  SL.Add('    }');
  SL.Add('  }');
  SL.Add('  return E;');
  SL.Add('}');
  SL.Add('');
  SL.Add('function $pick() {');
  SL.Add('  for (var B = 0, A = arguments.length; B < A; B++) {');
  SL.Add('    if (arguments[B] != undefined) {');
  SL.Add('      return arguments[B];');
  SL.Add('    }');
  SL.Add('  }');
  SL.Add('  return null;');
  SL.Add('}');
  SL.Add('');
  SL.Add('function $random(B, A) {');
  SL.Add('  return Math.floor(Math.random() * (A - B + 1) + B);');
  SL.Add('}');
  SL.Add('');
  SL.Add('function $splat(B) {');
  SL.Add('  var A = $type(B);');
  SL.Add('  return (A) ? ((A != "array" && A != "arguments") ? [B] : B) : [];');
  SL.Add('}');
  SL.Add('var $time = Date.now || function() {');
  SL.Add('  return new Date()');
  SL.Add('    .getTime();');
  SL.Add('};');
  SL.Add('');
  SL.Add('function $try() {');
  SL.Add('  for (var B = 0, A = arguments.length; B < A; B++) {');
  SL.Add('    try {');
  SL.Add('      return arguments[B]();');
  SL.Add('    } catch (C) {}');
  SL.Add('  }');
  SL.Add('  return null;');
  SL.Add('}');
  SL.Add('');
  SL.Add('function $type(A) {');
  SL.Add('  if (A == undefined) {');
  SL.Add('    return false;');
  SL.Add('  }');
  SL.Add('  if (A.$family) {');
  SL.Add('    return (A.$family.name == "number" && !isFinite(A)) ? false : A.$family');
  SL.Add('      .name;');
  SL.Add('  }');
  SL.Add('  if (A.nodeName) {');
  SL.Add('    switch (A.nodeType) {');
  SL.Add('      case 1:');
  SL.Add('        return "element";');
  SL.Add('      case 3:');
  SL.Add('        return (/\S/)');
  SL.Add('          .test(A.nodeValue) ? "textnode" : "whitespace";');
  SL.Add('    }');
  SL.Add('  } else {');
  SL.Add('    if (typeof A.length == "number") {');
  SL.Add('      if (A.callee) {');
  SL.Add('        return "arguments";');
  SL.Add('      } else {');
  SL.Add('        if (A.item) {');
  SL.Add('          return "collection";');
  SL.Add('        }');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('  }');
  SL.Add('  return typeof A;');
  SL.Add('}');
  SL.Add('var Hash = new Native({');
  SL.Add('  name: "Hash",');
  SL.Add('  initialize: function(A) {');
  SL.Add('    if ($type(A) == "hash") {');
  SL.Add('      A = $unlink(A.getClean());');
  SL.Add('    }');
  SL.Add('    for (var B in A) {');
  SL.Add('      this[B] = A[B];');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Hash.implement({');
  SL.Add('  getLength: function() {');
  SL.Add('    var B = 0;');
  SL.Add('    for (var A in this) {');
  SL.Add('      if (this.hasOwnProperty(A)) {');
  SL.Add('        B++;');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return B;');
  SL.Add('  },');
  SL.Add('  forEach: function(B, C) {');
  SL.Add('    for (var A in this) {');
  SL.Add('      if (this.hasOwnProperty(A)) {');
  SL.Add('        B.call(C, this[A], A, this);');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add('  getClean: function() {');
  SL.Add('    var B = {};');
  SL.Add('    for (var A in this) {');
  SL.Add('      if (this.hasOwnProperty(A)) {');
  SL.Add('        B[A] = this[A];');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return B;');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Hash.alias("forEach", "each");');
  SL.Add('');
  SL.Add('function $H(A) {');
  SL.Add('  return new Hash(A);');
  SL.Add('}');
  SL.Add('Array.implement({');
  SL.Add('  forEach: function(C, D) {');
  SL.Add('    for (var B = 0, A = this.length; B < A; B++) {');
  SL.Add('      C.call(D, this[B], B, this);');
  SL.Add('    }');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Array.alias("forEach", "each");');
  SL.Add('');
  SL.Add('function $A(C) {');
  SL.Add('  if (C.item) {');
  SL.Add('    var D = [];');
  SL.Add('    for (var B = 0, A = C.length; B < A; B++) {');
  SL.Add('      D[B] = C[B];');
  SL.Add('    }');
  SL.Add('    return D;');
  SL.Add('  }');
  SL.Add('  return Array.prototype.slice.call(C);');
  SL.Add('}');
  SL.Add('');
  SL.Add('function $each(C, B, D) {');
  SL.Add('  var A = $type(C);');
  SL.Add('  ((A == "arguments" || A == "collection" || A == "array") ? Array : Hash)');
  SL.Add('  .each');
  SL.Add('    (C, B, D);');
  SL.Add('}');
  SL.Add('var Browser = new Hash({');
  SL.Add('  Engine: {');
  SL.Add('    name: "unknown",');
  SL.Add('    version: ""');
  SL.Add('  },');
  SL.Add('  Platform: {');
  SL.Add('    name: (navigator.platform.match(/mac|win|linux/i) || ["other"])[');
  SL.Add('      0].toLowerCase()');
  SL.Add('  },');
  SL.Add('  Features: {');
  SL.Add('    xpath: !!(document.evaluate),');
  SL.Add('    air: !!(window.runtime)');
  SL.Add('  },');
  SL.Add('  Plugins: {}');
  SL.Add('});');
  SL.Add('if (window.opera) {');
  SL.Add('  Browser.Engine = {');
  SL.Add('    name: "presto",');
  SL.Add('    version: (document.getElementsByClassName) ? 950 : 925');
  SL.Add('  };');
  SL.Add('} else {');
  SL.Add('  if (window.ActiveXObject) {');
  SL.Add('    Browser.Engine = {');
  SL.Add('      name: "trident",');
  SL.Add('      version: (window.XMLHttpRequest) ? 5 : 4');
  SL.Add('    };');
  SL.Add('  } else {');
  SL.Add('    if (!navigator.taintEnabled) {');
  SL.Add('      Browser.Engine = {');
  SL.Add('        name: "webkit",');
  SL.Add('        version: (Browser.Features.xpath) ? 420 : 419');
  SL.Add('      };');
  SL.Add('    } else {');
  SL.Add('      if (document.getBoxObjectFor != null) {');
  SL.Add('        Browser.Engine = {');
  SL.Add('          name: "gecko",');
  SL.Add('          version: (document.getElementsByClassName) ? 19 : 18');
  SL.Add('        };');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('  }');
  SL.Add('}');
  SL.Add('Browser.Engine[Browser.Engine.name] = Browser.Engine[Browser.Engine.name +');
  SL.Add('  Browser.Engine.version] = true;');
  SL.Add('if (window.orientation != undefined) {');
  SL.Add('  Browser.Platform.name = "ipod";');
  SL.Add('}');
  SL.Add('Browser.Platform[Browser.Platform.name] = true;');
  SL.Add('Browser.Request = function() {');
  SL.Add('  return $try(function() {');
  SL.Add('    return new XMLHttpRequest();');
  SL.Add('  }, function() {');
  SL.Add('    return new ActiveXObject("MSXML2.XMLHTTP");');
  SL.Add('  });');
  SL.Add('};');
  SL.Add('Browser.Features.xhr = !!(Browser.Request());');
  SL.Add('/* / / kt');
  SL.Add('Browser.Plugins.Flash = (function() {');
  SL.Add('  var A = ($try(function() {');
  SL.Add('      return navigator.plugins["Shockwave Flash"].description;');
  SL.Add('    }, function() {');
  SL.Add('      return new ActiveXObject(');
  SL.Add('          "ShockwaveFlash.ShockwaveFlash")');
  SL.Add('        .GetVariable(');
  SL.Add('          "$version");');
  SL.Add('    }) || "0 r0")');
  SL.Add('    .match(/\d+/g);');
  SL.Add('  return {');
  SL.Add('    version: parseInt(A[0] || 0 + "." + A[1] || 0),');
  SL.Add('    build: parseInt(A[2] || 0)');
  SL.Add('  };');
  SL.Add('})();');
  SL.Add('*/');
  SL.Add('function $exec(B) {');
  SL.Add('  if (!B) {');
  SL.Add('    return B;');
  SL.Add('  }');
  SL.Add('  if (window.execScript) {');
  SL.Add('    window.execScript(B);');
  SL.Add('  } else {');
  SL.Add('    var A = document.createElement("script");');
  SL.Add('    A.setAttribute("type", "text/javascript");');
  SL.Add('    A.text = B;');
  SL.Add('    document.head.appendChild(A);');
  SL.Add('    document.head.removeChild(A);');
  SL.Add('  }');
  SL.Add('  return B;');
  SL.Add('}');
  SL.Add('Native.UID = 1;');
  SL.Add('var $uid = (Browser.Engine.trident) ? function(A) {');
  SL.Add('  return (A.uid || (A.uid = [Native.UID++]))[0];');
  SL.Add('} : function(A) {');
  SL.Add('  return A.uid || (A.uid = Native.UID++);');
  SL.Add('};');
  SL.Add('var Window = new Native({');
  SL.Add('  name: "Window",');
  SL.Add('  legacy: (Browser.Engine.trident) ? null : window.Window,');
  SL.Add('  initialize: function(A) {');
  SL.Add('    $uid(A);');
  SL.Add('    if (!A.Element) {');
  SL.Add('      A.Element = $empty;');
  SL.Add('      if (Browser.Engine.webkit) {');
  SL.Add('        A.document.createElement("iframe");');
  SL.Add('      }');
  SL.Add('      A.Element.prototype = (Browser.Engine.webkit) ? window[');
  SL.Add('        "[[DOMElement.prototype]]"] : {};');
  SL.Add('    }');
  SL.Add('    return $extend(A, Window.Prototype);');
  SL.Add('  },');
  SL.Add('  afterImplement: function(B, A) {');
  SL.Add('    window[B] = Window.Prototype[B] = A;');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Window.Prototype = {');
  SL.Add('  $family: {');
  SL.Add('    name: "window"');
  SL.Add('  }');
  SL.Add('};');
  SL.Add('new Window(window);');
  SL.Add('var Document = new Native({');
  SL.Add('  name: "Document",');
  SL.Add('  legacy: (Browser.Engine.trident) ? null : window.Document,');
  SL.Add('  initialize: function(A) {');
  SL.Add('    $uid(A);');
  SL.Add('    A.head = A.getElementsByTagName("head")[0];');
  SL.Add('    A.html = A.getElementsByTagName("html")[0];');
  SL.Add('    A.window = A.defaultView || A.parentWindow;');
  SL.Add('    if (Browser.Engine.trident4) {');
  SL.Add('      $try(function() {');
  SL.Add('        A.execCommand("BackgroundImageCache", false,');
  SL.Add('          true);');
  SL.Add('      });');
  SL.Add('    }');
  SL.Add('    return $extend(A, Document.Prototype);');
  SL.Add('  },');
  SL.Add('  afterImplement: function(B, A) {');
  SL.Add('    document[B] = Document.Prototype[B] = A;');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Document.Prototype = {');
  SL.Add('  $family: {');
  SL.Add('    name: "document"');
  SL.Add('  }');
  SL.Add('};');
  SL.Add('new Document(document);');
  SL.Add('Array.implement({');
  SL.Add('  every: function(C, D) {');
  SL.Add('    for (var B = 0, A = this.length; B < A; B++) {');
  SL.Add('      if (!C.call(D, this[B], B, this)) {');
  SL.Add('        return false;');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return true;');
  SL.Add('  },');
  SL.Add('  filter: function(D, E) {');
  SL.Add('    var C = [];');
  SL.Add('    for (var B = 0, A = this.length; B < A; B++) {');
  SL.Add('      if (D.call(E, this[B], B, this)) {');
  SL.Add('        C.push(this[B]);');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return C;');
  SL.Add('  },');
  SL.Add('  clean: function() {');
  SL.Add('    return this.filter($defined);');
  SL.Add('  },');
  SL.Add('  indexOf: function(C, D) {');
  SL.Add('    var A = this.length;');
  SL.Add('    for (var B = (D < 0) ? Math.max(0, A + D) : D || 0; B < A; B++) {');
  SL.Add('      if (this[B] === C) {');
  SL.Add('        return B;');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return -1;');
  SL.Add('  },');
  SL.Add('  map: function(D, E) {');
  SL.Add('    var C = [];');
  SL.Add('    for (var B = 0, A = this.length; B < A; B++) {');
  SL.Add('      C[B] = D.call(E, this[B], B, this);');
  SL.Add('    }');
  SL.Add('    return C;');
  SL.Add('  },');
  SL.Add('  some: function(C, D) {');
  SL.Add('    for (var B = 0, A = this.length; B < A; B++) {');
  SL.Add('      if (C.call(D, this[B], B, this)) {');
  SL.Add('        return true;');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return false;');
  SL.Add('  },');
  SL.Add('  associate: function(C) {');
  SL.Add('    var D = {},');
  SL.Add('      B = Math.min(this.length, C.length);');
  SL.Add('    for (var A = 0; A < B; A++) {');
  SL.Add('      D[C[A]] = this[A];');
  SL.Add('    }');
  SL.Add('    return D;');
  SL.Add('  },');
  SL.Add('  link: function(C) {');
  SL.Add('    var A = {};');
  SL.Add('    for (var E = 0, B = this.length; E < B; E++) {');
  SL.Add('      for (var D in C) {');
  SL.Add('        if (C[D](this[E])) {');
  SL.Add('          A[D] = this[E];');
  SL.Add('          delete C[D];');
  SL.Add('          break;');
  SL.Add('        }');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return A;');
  SL.Add('  },');
  SL.Add('  contains: function(A, B) {');
  SL.Add('    return this.indexOf(A, B) != -1;');
  SL.Add('  },');
  SL.Add('  extend: function(C) {');
  SL.Add('    for (var B = 0, A = C.length; B < A; B++) {');
  SL.Add('      this.push(C[B]);');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  getLast: function() {');
  SL.Add('    return (this.length) ? this[this.length - 1] : null;');
  SL.Add('  },');
  SL.Add('  getRandom: function() {');
  SL.Add('    return (this.length) ? this[$random(0, this.length - 1)] :');
  SL.Add('      null;');
  SL.Add('  },');
  SL.Add('  include: function(A) {');
  SL.Add('    if (!this.contains(A)) {');
  SL.Add('      this.push(A);');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  combine: function(C) {');
  SL.Add('    for (var B = 0, A = C.length; B < A; B++) {');
  SL.Add('      this.include(C[B]);');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  erase: function(B) {');
  SL.Add('    for (var A = this.length; A--; A) {');
  SL.Add('      if (this[A] === B) {');
  SL.Add('        this.splice(A, 1);');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  empty: function() {');
  SL.Add('    this.length = 0;');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  flatten: function() {');
  SL.Add('    var D = [];');
  SL.Add('    for (var B = 0, A = this.length; B < A; B++) {');
  SL.Add('      var C = $type(this[B]);');
  SL.Add('      if (!C) {');
  SL.Add('        continue;');
  SL.Add('      }');
  SL.Add('      D = D.concat((C == "array" || C == "collection" || C ==');
  SL.Add('          "arguments") ? Array.flatten(this[B]) :');
  SL.Add('        this[B]);');
  SL.Add('    }');
  SL.Add('    return D;');
  SL.Add('  },');
  SL.Add('  hexToRgb: function(B) {');
  SL.Add('    if (this.length != 3) {');
  SL.Add('      return null;');
  SL.Add('    }');
  SL.Add('    var A = this.map(function(C) {');
  SL.Add('      if (C.length == 1) {');
  SL.Add('        C += C;');
  SL.Add('      }');
  SL.Add('      return C.toInt(16);');
  SL.Add('    });');
  SL.Add('    return (B) ? A : "rgb(" + A + ")";');
  SL.Add('  },');
  SL.Add('  rgbToHex: function(D) {');
  SL.Add('    if (this.length < 3) {');
  SL.Add('      return null;');
  SL.Add('    }');
  SL.Add('    if (this.length == 4 && this[3] == 0 && !D) {');
  SL.Add('      return "transparent";');
  SL.Add('    }');
  SL.Add('    var B = [];');
  SL.Add('    for (var A = 0; A < 3; A++) {');
  SL.Add('      var C = (this[A] - 0)');
  SL.Add('        .toString(16);');
  SL.Add('      B.push((C.length == 1) ? "0" + C : C);');
  SL.Add('    }');
  SL.Add('    return (D) ? B : "#" + B.join("");');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Function.implement({');
  SL.Add('  extend: function(A) {');
  SL.Add('    for (var B in A) {');
  SL.Add('      this[B] = A[B];');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  create: function(B) {');
  SL.Add('    var A = this;');
  SL.Add('    B = B || {};');
  SL.Add('    return function(D) {');
  SL.Add('      var C = B.arguments;');
  SL.Add('      C = (C != undefined) ? $splat(C) : Array.slice(');
  SL.Add('        arguments, (B.event) ? 1 : 0);');
  SL.Add('      if (B.event) {');
  SL.Add('        C = [D || window.event].extend(C);');
  SL.Add('      }');
  SL.Add('      var E = function() {');
  SL.Add('        return A.apply(B.bind || null, C);');
  SL.Add('      };');
  SL.Add('      if (B.delay) {');
  SL.Add('        return setTimeout(E, B.delay);');
  SL.Add('      }');
  SL.Add('      if (B.periodical) {');
  SL.Add('        return setInterval(E, B.periodical);');
  SL.Add('      }');
  SL.Add('      if (B.attempt) {');
  SL.Add('        return $try(E);');
  SL.Add('      }');
  SL.Add('      return E();');
  SL.Add('    };');
  SL.Add('  },');
  SL.Add('  pass: function(A, B) {');
  SL.Add('    return this.create({');
  SL.Add('      arguments: A,');
  SL.Add('      bind: B');
  SL.Add('    });');
  SL.Add('  },');
  SL.Add('  attempt: function(A, B) {');
  SL.Add('    return this.create({');
  SL.Add('      arguments: A,');
  SL.Add('      bind: B,');
  SL.Add('      attempt: true');
  SL.Add('    })();');
  SL.Add('  },');
  SL.Add('  bind: function(B, A) {');
  SL.Add('    return this.create({');
  SL.Add('      bind: B,');
  SL.Add('      arguments: A');
  SL.Add('    });');
  SL.Add('  },');
  SL.Add('  bindWithEvent: function(B, A) {');
  SL.Add('    return this.create({');
  SL.Add('      bind: B,');
  SL.Add('      event: true,');
  SL.Add('      arguments: A');
  SL.Add('    });');
  SL.Add('  },');
  SL.Add('  delay: function(B, C, A) {');
  SL.Add('    return this.create({');
  SL.Add('      delay: B,');
  SL.Add('      bind: C,');
  SL.Add('      arguments: A');
  SL.Add('    })();');
  SL.Add('  },');
  SL.Add('  periodical: function(A, C, B) {');
  SL.Add('    return this.create({');
  SL.Add('      periodical: A,');
  SL.Add('      bind: C,');
  SL.Add('      arguments: B');
  SL.Add('    })();');
  SL.Add('  },');
  SL.Add('  run: function(A, B) {');
  SL.Add('    return this.apply(B, $splat(A));');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Number.implement({');
  SL.Add('  limit: function(B, A) {');
  SL.Add('    return Math.min(A, Math.max(B, this));');
  SL.Add('  },');
  SL.Add('  round: function(A) {');
  SL.Add('    A = Math.pow(10, A || 0);');
  SL.Add('    return Math.round(this * A) / A;');
  SL.Add('  },');
  SL.Add('  times: function(B, C) {');
  SL.Add('    for (var A = 0; A < this; A++) {');
  SL.Add('      B.call(C, A, this);');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add('  toFloat: function() {');
  SL.Add('    return parseFloat(this);');
  SL.Add('  },');
  SL.Add('  toInt: function(A) {');
  SL.Add('    return parseInt(this, A || 10);');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Number.alias("times", "each");');
  SL.Add('(function(B) {');
  SL.Add('  var A = {};');
  SL.Add('  B.each(function(C) {');
  SL.Add('    if (!Number[C]) {');
  SL.Add('      A[C] = function() {');
  SL.Add('        return Math[C].apply(null, [this].concat($A(');
  SL.Add('          arguments)));');
  SL.Add('      };');
  SL.Add('    }');
  SL.Add('  });');
  SL.Add('  Number.implement(A);');
  SL.Add('})(["abs", "acos", "asin", "atan", "atan2", "ceil", "cos", "exp", "floor",');
  SL.Add('  "log", "max", "min", "pow", "sin", "sqrt", "tan"');
  SL.Add(']);');
  SL.Add('String.implement({');
  SL.Add('  test: function(A, B) {');
  SL.Add('    return ((typeof A == "string") ? new RegExp(A, B) : A)');
  SL.Add('      .test(');
  SL.Add('        this);');
  SL.Add('  },');
  SL.Add('  contains: function(A, B) {');
  SL.Add('    return (B) ? (B + this + B)');
  SL.Add('      .indexOf(B + A + B) > -1 : this.indexOf(');
  SL.Add('        A) > -1;');
  SL.Add('  },');
  SL.Add('  trim: function() {');
  SL.Add('    return this.replace(/^\s+|\s+$/g, "");');
  SL.Add('  },');
  SL.Add('  clean: function() {');
  SL.Add('    return this.replace(/\s+/g, " ")');
  SL.Add('      .trim();');
  SL.Add('  },');
  SL.Add('  camelCase: function() {');
  SL.Add('    return this.replace(/-\D/g, function(A) {');
  SL.Add('      return A.charAt(1)');
  SL.Add('        .toUpperCase();');
  SL.Add('    });');
  SL.Add('  },');
  SL.Add('  hyphenate: function() {');
  SL.Add('    return this.replace(/[A-Z]/g, function(A) {');
  SL.Add('      return ("-" + A.charAt(0)');
  SL.Add('        .toLowerCase());');
  SL.Add('    });');
  SL.Add('  },');
  SL.Add('  capitalize: function() {');
  SL.Add('    return this.replace(/\b[a-z]/g, function(A) {');
  SL.Add('      return A.toUpperCase();');
  SL.Add('    });');
  SL.Add('  },');
  SL.Add('  escapeRegExp: function() {');
  SL.Add('    return this.replace(/([-.*+?^${}()|[\]\/\\])/g, "\\$1");');
  SL.Add('  },');
  SL.Add('  toInt: function(A) {');
  SL.Add('    return parseInt(this, A || 10);');
  SL.Add('  },');
  SL.Add('  toFloat: function() {');
  SL.Add('    return parseFloat(this);');
  SL.Add('  },');
  SL.Add('  hexToRgb: function(B) {');
  SL.Add('    var A = this.match(/^#?(\w{1,2})(\w{1,2})(\w{1,2})$/);');
  SL.Add('    return (A) ? A.slice(1)');
  SL.Add('      .hexToRgb(B) : null;');
  SL.Add('  },');
  SL.Add('  rgbToHex: function(B) {');
  SL.Add('    var A = this.match(/\d{1,3}/g);');
  SL.Add('    return (A) ? A.rgbToHex(B) : null;');
  SL.Add('  },');
  SL.Add('  stripScripts: function(B) {');
  SL.Add('    var A = "";');
  SL.Add('    var C = this.replace(/<script[^>]*>([\s\S]*?)<\/script>/gi,');
  SL.Add('      function() {');
  SL.Add('        A += arguments[1] + "\n";');
  SL.Add('        return "";');
  SL.Add('      });');
  SL.Add('    if (B === true) {');
  SL.Add('      $exec(A);');
  SL.Add('    } else {');
  SL.Add('      if ($type(B) == "function") {');
  SL.Add('        B(A, C);');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return C;');
  SL.Add('  },');
  SL.Add('  substitute: function(A, B) {');
  SL.Add('    return this.replace(B || (/\\?\{([^}]+)\}/g), function(D, C) {');
  SL.Add('      if (D.charAt(0) == "\\") {');
  SL.Add('        return D.slice(1);');
  SL.Add('      }');
  SL.Add('      return (A[C] != undefined) ? A[C] : "";');
  SL.Add('    });');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Hash.implement({');
  SL.Add('  has: Object.prototype.hasOwnProperty,');
  SL.Add('  keyOf: function(B) {');
  SL.Add('    for (var A in this) {');
  SL.Add('      if (this.hasOwnProperty(A) && this[A] === B) {');
  SL.Add('        return A;');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return null;');
  SL.Add('  },');
  SL.Add('  hasValue: function(A) {');
  SL.Add('    return (Hash.keyOf(this, A) !== null);');
  SL.Add('  },');
  SL.Add('  extend: function(A) {');
  SL.Add('    Hash.each(A, function(C, B) {');
  SL.Add('      Hash.set(this, B, C);');
  SL.Add('    }, this);');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  combine: function(A) {');
  SL.Add('    Hash.each(A, function(C, B) {');
  SL.Add('      Hash.include(this, B, C);');
  SL.Add('    }, this);');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  erase: function(A) {');
  SL.Add('    if (this.hasOwnProperty(A)) {');
  SL.Add('      delete this[A];');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  get: function(A) {');
  SL.Add('    return (this.hasOwnProperty(A)) ? this[A] : null;');
  SL.Add('  },');
  SL.Add('  set: function(A, B) {');
  SL.Add('    if (!this[A] || this.hasOwnProperty(A)) {');
  SL.Add('      this[A] = B;');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  empty: function() {');
  SL.Add('    Hash.each(this, function(B, A) {');
  SL.Add('      delete this[A];');
  SL.Add('    }, this);');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  include: function(B, C) {');
  SL.Add('    var A = this[B];');
  SL.Add('    if (A == undefined) {');
  SL.Add('      this[B] = C;');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  map: function(B, C) {');
  SL.Add('    var A = new Hash;');
  SL.Add('    Hash.each(this, function(E, D) {');
  SL.Add('      A.set(D, B.call(C, E, D, this));');
  SL.Add('    }, this);');
  SL.Add('    return A;');
  SL.Add('  },');
  SL.Add('  filter: function(B, C) {');
  SL.Add('    var A = new Hash;');
  SL.Add('    Hash.each(this, function(E, D) {');
  SL.Add('      if (B.call(C, E, D, this)) {');
  SL.Add('        A.set(D, E);');
  SL.Add('      }');
  SL.Add('    }, this);');
  SL.Add('    return A;');
  SL.Add('  },');
  SL.Add('  every: function(B, C) {');
  SL.Add('    for (var A in this) {');
  SL.Add('      if (this.hasOwnProperty(A) && !B.call(C, this[A], A)) {');
  SL.Add('        return false;');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return true;');
  SL.Add('  },');
  SL.Add('  some: function(B, C) {');
  SL.Add('    for (var A in this) {');
  SL.Add('      if (this.hasOwnProperty(A) && B.call(C, this[A], A)) {');
  SL.Add('        return true;');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return false;');
  SL.Add('  },');
  SL.Add('  getKeys: function() {');
  SL.Add('    var A = [];');
  SL.Add('    Hash.each(this, function(C, B) {');
  SL.Add('      A.push(B);');
  SL.Add('    });');
  SL.Add('    return A;');
  SL.Add('  },');
  SL.Add('  getValues: function() {');
  SL.Add('    var A = [];');
  SL.Add('    Hash.each(this, function(B) {');
  SL.Add('      A.push(B);');
  SL.Add('    });');
  SL.Add('    return A;');
  SL.Add('  },');
  SL.Add('  toQueryString: function(A) {');
  SL.Add('    var B = [];');
  SL.Add('    Hash.each(this, function(F, E) {');
  SL.Add('      if (A) {');
  SL.Add('        E = A + "[" + E + "]";');
  SL.Add('      }');
  SL.Add('      var D;');
  SL.Add('      switch ($type(F)) {');
  SL.Add('        case "object":');
  SL.Add('          D = Hash.toQueryString(F, E);');
  SL.Add('          break;');
  SL.Add('        case "array":');
  SL.Add('          var C = {};');
  SL.Add('          F.each(function(H, G) {');
  SL.Add('            C[G] = H;');
  SL.Add('          });');
  SL.Add('          D = Hash.toQueryString(C, E);');
  SL.Add('          break;');
  SL.Add('        default:');
  SL.Add('          D = E + "=" + encodeURIComponent(F);');
  SL.Add('      }');
  SL.Add('      if (F != undefined) {');
  SL.Add('        B.push(D);');
  SL.Add('      }');
  SL.Add('    });');
  SL.Add('    return B.join("&");');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Hash.alias({');
  SL.Add('  keyOf: "indexOf",');
  SL.Add('  hasValue: "contains"');
  SL.Add('});');
  SL.Add('var Event = new Native({');
  SL.Add('  name: "Event",');
  SL.Add('  initialize: function(A, F) {');
  SL.Add('    F = F || window;');
  SL.Add('    var K = F.document;');
  SL.Add('    A = A || F.event;');
  SL.Add('    if (A.$extended) {');
  SL.Add('      return A;');
  SL.Add('    }');
  SL.Add('    this.$extended = true;');
  SL.Add('    var J = A.type;');
  SL.Add('    var G = A.target || A.srcElement;');
  SL.Add('    while (G && G.nodeType == 3) {');
  SL.Add('      G = G.parentNode;');
  SL.Add('    }');
  SL.Add('    if (J.test(/key/)) {');
  SL.Add('      var B = A.which || A.keyCode;');
  SL.Add('      var M = Event.Keys.keyOf(B);');
  SL.Add('      if (J == "keydown") {');
  SL.Add('        var D = B - 111;');
  SL.Add('        if (D > 0 && D < 13) {');
  SL.Add('          M = "f" + D;');
  SL.Add('        }');
  SL.Add('      }');
  SL.Add('      M = M || String.fromCharCode(B)');
  SL.Add('        .toLowerCase();');
  SL.Add('    } else {');
  SL.Add('      if (J.match(/(click|mouse|menu)/i)) {');
  SL.Add('        K = (!K.compatMode || K.compatMode == "CSS1Compat") ?');
  SL.Add('          K.html : K.body;');
  SL.Add('        var I = {');
  SL.Add('          x: A.pageX || A.clientX + K.scrollLeft,');
  SL.Add('          y: A.pageY || A.clientY + K.scrollTop');
  SL.Add('        };');
  SL.Add('        var C = {');
  SL.Add('          x: (A.pageX) ? A.pageX - F.pageXOffset : A.clientX,');
  SL.Add('          y: (A.pageY) ? A.pageY - F.pageYOffset : A.clientY');
  SL.Add('        };');
  SL.Add('        if (J.match(/DOMMouseScroll|mousewheel/)) {');
  SL.Add('          var H = (A.wheelDelta) ? A.wheelDelta / 120 : -');
  SL.Add('            (A.detail || 0) / 3;');
  SL.Add('        }');
  SL.Add('        var E = (A.which == 3) || (A.button == 2);');
  SL.Add('        var L = null;');
  SL.Add('        if (J.match(/over|out/)) {');
  SL.Add('          switch (J) {');
  SL.Add('            case "mouseover":');
  SL.Add('              L = A.relatedTarget || A.fromElement;');
  SL.Add('              break;');
  SL.Add('            case "mouseout":');
  SL.Add('              L = A.relatedTarget || A.toElement;');
  SL.Add('          }');
  SL.Add('          if (!(function() {');
  SL.Add('              while (L && L.nodeType == 3) {');
  SL.Add('                L = L.parentNode;');
  SL.Add('              }');
  SL.Add('              return true;');
  SL.Add('            })');
  SL.Add('            .create({');
  SL.Add('              attempt: Browser.Engine.gecko');
  SL.Add('            })()) {');
  SL.Add('            L = false;');
  SL.Add('          }');
  SL.Add('        }');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return $extend(this, {');
  SL.Add('      event: A,');
  SL.Add('      type: J,');
  SL.Add('      page: I,');
  SL.Add('      client: C,');
  SL.Add('      rightClick: E,');
  SL.Add('      wheel: H,');
  SL.Add('      relatedTarget: L,');
  SL.Add('      target: G,');
  SL.Add('      code: B,');
  SL.Add('      key: M,');
  SL.Add('      shift: A.shiftKey,');
  SL.Add('      control: A.ctrlKey,');
  SL.Add('      alt: A.altKey,');
  SL.Add('      meta: A.metaKey');
  SL.Add('    });');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Event.Keys = new Hash({');
  SL.Add('  enter: 13,');
  SL.Add('  up: 38,');
  SL.Add('  down: 40,');
  SL.Add('  left: 37,');
  SL.Add('  right: 39,');
  SL.Add('  esc: 27,');
  SL.Add('  space: 32,');
  SL.Add('  backspace: 8,');
  SL.Add('  tab: 9,');
  SL.Add('  "delete": 46');
  SL.Add('});');
  SL.Add('Event.implement({');
  SL.Add('  stop: function() {');
  SL.Add('    return this.stopPropagation()');
  SL.Add('      .preventDefault();');
  SL.Add('  },');
  SL.Add('  stopPropagation: function() {');
  SL.Add('    if (this.event.stopPropagation) {');
  SL.Add('      this.event.stopPropagation();');
  SL.Add('    } else {');
  SL.Add('      this.event.cancelBubble = true;');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  preventDefault: function() {');
  SL.Add('    if (this.event.preventDefault) {');
  SL.Add('      this.event.preventDefault();');
  SL.Add('    } else {');
  SL.Add('      this.event.returnValue = false;');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('var Class = new Native({');
  SL.Add('  name: "Class",');
  SL.Add('  initialize: function(B) {');
  SL.Add('    B = B || {};');
  SL.Add('    var A = function(E) {');
  SL.Add('      for (var D in this) {');
  SL.Add('        this[D] = $unlink(this[D]);');
  SL.Add('      }');
  SL.Add('      for (var F in Class.Mutators) {');
  SL.Add('        if (!this[F]) {');
  SL.Add('          continue;');
  SL.Add('        }');
  SL.Add('        Class.Mutators[F](this, this[F]);');
  SL.Add('        delete this[F];');
  SL.Add('      }');
  SL.Add('      this.constructor = A;');
  SL.Add('      if (E === $empty) {');
  SL.Add('        return this;');
  SL.Add('      }');
  SL.Add('      var C = (this.initialize) ? this.initialize.apply(');
  SL.Add('        this, arguments) : this;');
  SL.Add('      if (this.options && this.options.initialize) {');
  SL.Add('        this.options.initialize.call(this);');
  SL.Add('      }');
  SL.Add('      return C;');
  SL.Add('    };');
  SL.Add('    $extend(A, this);');
  SL.Add('    A.constructor = Class;');
  SL.Add('    A.prototype = B;');
  SL.Add('    return A;');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Class.implement({');
  SL.Add('  implement: function() {');
  SL.Add('    Class.Mutators.Implements(this.prototype, Array.slice(');
  SL.Add('      arguments));');
  SL.Add('    return this;');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Class.Mutators = {');
  SL.Add('  Implements: function(A, B) {');
  SL.Add('    $splat(B)');
  SL.Add('      .each(function(C) {');
  SL.Add('        $extend(A, ($type(C) == "class") ? new C($empty) :');
  SL.Add('          C);');
  SL.Add('      });');
  SL.Add('  },');
  SL.Add('  Extends: function(self, klass) {');
  SL.Add('    var instance = new klass($empty);');
  SL.Add('    delete instance.parent;');
  SL.Add('    delete instance.parentOf;');
  SL.Add('    for (var key in instance) {');
  SL.Add('      var current = self[key],');
  SL.Add('        previous = instance[key];');
  SL.Add('      if (current == undefined) {');
  SL.Add('        self[key] = previous;');
  SL.Add('        continue;');
  SL.Add('      }');
  SL.Add('      var ctype = $type(current),');
  SL.Add('        ptype = $type(previous);');
  SL.Add('      if (ctype != ptype) {');
  SL.Add('        continue;');
  SL.Add('      }');
  SL.Add('      switch (ctype) {');
  SL.Add('        case "function":');
  SL.Add('          if (!arguments.callee.caller) {');
  SL.Add('            self[key] = eval("(" + String(current)');
  SL.Add('              .replace(');
  SL.Add('                /\bthis\.parent\(\s*(\))?/g,');
  SL.Add('                function(full, close) {');
  SL.Add('                  return "arguments.callee._parent_.call(this" +');
  SL.Add('                    (close || ", ");');
  SL.Add('                }) + ")");');
  SL.Add('          }');
  SL.Add('          self[key]._parent_ = previous;');
  SL.Add('          break;');
  SL.Add('        case "object":');
  SL.Add('          self[key] = $merge(previous, current);');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    self.parent = function() {');
  SL.Add('      return arguments.callee.caller._parent_.apply(this,');
  SL.Add('        arguments);');
  SL.Add('    };');
  SL.Add('    self.parentOf = function(descendant) {');
  SL.Add('      return descendant._parent_.apply(this, Array.slice(');
  SL.Add('        arguments, 1));');
  SL.Add('    };');
  SL.Add('  }');
  SL.Add('};');
  SL.Add('var Chain = new Class({');
  SL.Add('  chain: function() {');
  SL.Add('    this.$chain = (this.$chain || [])');
  SL.Add('      .extend(arguments);');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  callChain: function() {');
  SL.Add('    return (this.$chain && this.$chain.length) ? this.$chain.shift()');
  SL.Add('      .apply(this, arguments) : false;');
  SL.Add('  },');
  SL.Add('  clearChain: function() {');
  SL.Add('    if (this.$chain) {');
  SL.Add('      this.$chain.empty();');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('var Events = new Class({');
  SL.Add('  addEvent: function(C, B, A) {');
  SL.Add('    C = Events.removeOn(C);');
  SL.Add('    if (B != $empty) {');
  SL.Add('      this.$events = this.$events || {};');
  SL.Add('      this.$events[C] = this.$events[C] || [];');
  SL.Add('      this.$events[C].include(B);');
  SL.Add('      if (A) {');
  SL.Add('        B.internal = true;');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  addEvents: function(A) {');
  SL.Add('    for (var B in A) {');
  SL.Add('      this.addEvent(B, A[B]);');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  fireEvent: function(C, B, A) {');
  SL.Add('    C = Events.removeOn(C);');
  SL.Add('    if (!this.$events || !this.$events[C]) {');
  SL.Add('      return this;');
  SL.Add('    }');
  SL.Add('    this.$events[C].each(function(D) {');
  SL.Add('      D.create({');
  SL.Add('        bind: this,');
  SL.Add('        delay: A,');
  SL.Add('        "arguments": B');
  SL.Add('      })();');
  SL.Add('    }, this);');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  removeEvent: function(B, A) {');
  SL.Add('    B = Events.removeOn(B);');
  SL.Add('    if (!this.$events || !this.$events[B]) {');
  SL.Add('      return this;');
  SL.Add('    }');
  SL.Add('    if (!A.internal) {');
  SL.Add('      this.$events[B].erase(A);');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  removeEvents: function(C) {');
  SL.Add('    for (var D in this.$events) {');
  SL.Add('      if (C && C != D) {');
  SL.Add('        continue;');
  SL.Add('      }');
  SL.Add('      var B = this.$events[D];');
  SL.Add('      for (var A = B.length; A--; A) {');
  SL.Add('        this.removeEvent(D, B[A]);');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Events.removeOn = function(A) {');
  SL.Add('  return A.replace(/^on([A-Z])/, function(B, C) {');
  SL.Add('    return C.toLowerCase();');
  SL.Add('  });');
  SL.Add('};');
  SL.Add('var Options = new Class({');
  SL.Add('  setOptions: function() {');
  SL.Add('    this.options = $merge.run([this.options].extend(arguments));');
  SL.Add('    if (!this.addEvent) {');
  SL.Add('      return this;');
  SL.Add('    }');
  SL.Add('    for (var A in this.options) {');
  SL.Add('      if ($type(this.options[A]) != "function" || !(');
  SL.Add('          /^on[A-Z]/)');
  SL.Add('        .test(A)) {');
  SL.Add('        continue;');
  SL.Add('      }');
  SL.Add('      this.addEvent(A, this.options[A]);');
  SL.Add('      delete this.options[A];');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Document.implement({');
  SL.Add('  newElement: function(A, B) {');
  SL.Add('    if (Browser.Engine.trident && B) {');
  SL.Add('      ["name", "type", "checked"].each(function(C) {');
  SL.Add('        if (!B[C]) {');
  SL.Add('          return;');
  SL.Add('        }');
  SL.Add('        A += " " + C + "=\"" + B[C] + "\"";');
  SL.Add('        if (C != "checked") {');
  SL.Add('          delete B[C];');
  SL.Add('        }');
  SL.Add('      });');
  SL.Add('      A = "<" + A + ">";');
  SL.Add('    }');
  SL.Add('    return $.element(this.createElement(A))');
  SL.Add('      .set(B);');
  SL.Add('  },');
  SL.Add('  newTextNode: function(A) {');
  SL.Add('    return this.createTextNode(A);');
  SL.Add('  },');
  SL.Add('  getDocument: function() {');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  getWindow: function() {');
  SL.Add('    return this.defaultView || this.parentWindow;');
  SL.Add('  },');
  SL.Add('  purge: function() {');
  SL.Add('    var C = this.getElementsByTagName("*");');
  SL.Add('    for (var B = 0, A = C.length; B < A; B++) {');
  SL.Add('      Browser.freeMem(C[B]);');
  SL.Add('    }');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('var Element = new Native({');
  SL.Add('  name: "Element",');
  SL.Add('  legacy: window.Element,');
  SL.Add('  initialize: function(A, B) {');
  SL.Add('    var C = Element.Constructors.get(A);');
  SL.Add('    if (C) {');
  SL.Add('      return C(B);');
  SL.Add('    }');
  SL.Add('    if (typeof A == "string") {');
  SL.Add('      return document.newElement(A, B);');
  SL.Add('    }');
  SL.Add('    return $(A)');
  SL.Add('      .set(B);');
  SL.Add('  },');
  SL.Add('  afterImplement: function(A, B) {');
  SL.Add('    if (!Array[A]) {');
  SL.Add('      Elements.implement(A, Elements.multi(A));');
  SL.Add('    }');
  SL.Add('    Element.Prototype[A] = B;');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Element.Prototype = {');
  SL.Add('  $family: {');
  SL.Add('    name: "element"');
  SL.Add('  }');
  SL.Add('};');
  SL.Add('Element.Constructors = new Hash;');
  SL.Add('var IFrame = new Native({');
  SL.Add('  name: "IFrame",');
  SL.Add('  generics: false,');
  SL.Add('  initialize: function() {');
  SL.Add('    var E = Array.link(arguments, {');
  SL.Add('      properties: Object.type,');
  SL.Add('      iframe: $defined');
  SL.Add('    });');
  SL.Add('    var C = E.properties || {};');
  SL.Add('    var B = $(E.iframe) || false;');
  SL.Add('    var D = C.onload || $empty;');
  SL.Add('    delete C.onload;');
  SL.Add('    C.id = C.name = $pick(C.id, C.name, B.id, B.name, "IFrame_" +');
  SL.Add('      $time());');
  SL.Add('    B = new Element(B || "iframe", C);');
  SL.Add('    var A = function() {');
  SL.Add('      var F = $try(function() {');
  SL.Add('        return B.contentWindow.location.host;');
  SL.Add('      });');
  SL.Add('      if (F && F == window.location.host) {');
  SL.Add('        var H = new Window(B.contentWindow);');
  SL.Add('        var G = new Document(B.contentWindow.document);');
  SL.Add('        $extend(H.Element.prototype, Element.Prototype);');
  SL.Add('      }');
  SL.Add('      D.call(B.contentWindow, B.contentWindow.document);');
  SL.Add('    };');
  SL.Add('    (!window.frames[C.id]) ? B.addListener("load", A): A();');
  SL.Add('    return B;');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('var Elements = new Native({');
  SL.Add('  initialize: function(F, B) {');
  SL.Add('    B = $extend({');
  SL.Add('      ddup: true,');
  SL.Add('      cash: true');
  SL.Add('    }, B);');
  SL.Add('    F = F || [];');
  SL.Add('    if (B.ddup || B.cash) {');
  SL.Add('      var G = {},');
  SL.Add('        E = [];');
  SL.Add('      for (var C = 0, A = F.length; C < A; C++) {');
  SL.Add('        var D = $.element(F[C], !B.cash);');
  SL.Add('        if (B.ddup) {');
  SL.Add('          if (G[D.uid]) {');
  SL.Add('            continue;');
  SL.Add('          }');
  SL.Add('          G[D.uid] = true;');
  SL.Add('        }');
  SL.Add('        E.push(D);');
  SL.Add('      }');
  SL.Add('      F = E;');
  SL.Add('    }');
  SL.Add('    return (B.cash) ? $extend(F, this) : F;');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Elements.implement({');
  SL.Add('  filter: function(A, B) {');
  SL.Add('    if (!A) {');
  SL.Add('      return this;');
  SL.Add('    }');
  SL.Add('    return new Elements(Array.filter(this, (typeof A ==');
  SL.Add('      "string") ? function(C) {');
  SL.Add('      return C.match(A);');
  SL.Add('    } : A, B));');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Elements.multi = function(A) {');
  SL.Add('  return function() {');
  SL.Add('    var B = [];');
  SL.Add('    var F = true;');
  SL.Add('    for (var D = 0, C = this.length; D < C; D++) {');
  SL.Add('      var E = this[D][A].apply(this[D], arguments);');
  SL.Add('      B.push(E);');
  SL.Add('      if (F) {');
  SL.Add('        F = ($type(E) == "element");');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return (F) ? new Elements(B) : B;');
  SL.Add('  };');
  SL.Add('};');
  SL.Add('Window.implement({');
  SL.Add('  $: function(B, C) {');
  SL.Add('    if (B && B.$family && B.uid) {');
  SL.Add('      return B;');
  SL.Add('    }');
  SL.Add('    var A = $type(B);');
  SL.Add('    return ($[A]) ? $[A](B, C, this.document) : null;');
  SL.Add('  },');
  SL.Add('  $$: function(A) {');
  SL.Add('    if (arguments.length == 1 && typeof A == "string") {');
  SL.Add('      return this.document.getElements(A);');
  SL.Add('    }');
  SL.Add('    var F = [];');
  SL.Add('    var C = Array.flatten(arguments);');
  SL.Add('    for (var D = 0, B = C.length; D < B; D++) {');
  SL.Add('      var E = C[D];');
  SL.Add('      switch ($type(E)) {');
  SL.Add('        case "element":');
  SL.Add('          E = [E];');
  SL.Add('          break;');
  SL.Add('        case "string":');
  SL.Add('          E = this.document.getElements(E, true);');
  SL.Add('          break;');
  SL.Add('        default:');
  SL.Add('          E = false;');
  SL.Add('      }');
  SL.Add('      if (E) {');
  SL.Add('        F.extend(E);');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return new Elements(F);');
  SL.Add('  },');
  SL.Add('  getDocument: function() {');
  SL.Add('    return this.document;');
  SL.Add('  },');
  SL.Add('  getWindow: function() {');
  SL.Add('    return this;');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('$.string = function(C, B, A) {');
  SL.Add('  C = A.getElementById(C);');
  SL.Add('  return (C) ? $.element(C, B) : null;');
  SL.Add('};');
  SL.Add('$.element = function(A, D) {');
  SL.Add('  $uid(A);');
  SL.Add('  if (!D && !A.$family && !(/^object|embed$/i)');
  SL.Add('    .test(A.tagName)) {');
  SL.Add('    var B = Element.Prototype;');
  SL.Add('    for (var C in B) {');
  SL.Add('      A[C] = B[C];');
  SL.Add('    }');
  SL.Add('  }');
  SL.Add('  return A;');
  SL.Add('};');
  SL.Add('$.object = function(B, C, A) {');
  SL.Add('  if (B.toElement) {');
  SL.Add('    return $.element(B.toElement(A), C);');
  SL.Add('  }');
  SL.Add('  return null;');
  SL.Add('};');
  SL.Add('$.textnode = $.whitespace = $.window = $.document = $arguments(0);');
  SL.Add('Native.implement([Element, Document], {');
  SL.Add('  getElement: function(A, B) {');
  SL.Add('    return $(this.getElements(A, true)[0] || null, B);');
  SL.Add('  },');
  SL.Add('  getElements: function(A, D) {');
  SL.Add('    A = A.split(",");');
  SL.Add('    var C = [];');
  SL.Add('    var B = (A.length > 1);');
  SL.Add('    A.each(function(E) {');
  SL.Add('      var F = this.getElementsByTagName(E.trim());');
  SL.Add('      (B) ? C.extend(F): C = F;');
  SL.Add('    }, this);');
  SL.Add('    return new Elements(C, {');
  SL.Add('      ddup: B,');
  SL.Add('      cash: !D');
  SL.Add('    });');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Element.Storage = {');
  SL.Add('  get: function(A) {');
  SL.Add('    return (this[A] || (this[A] = {}));');
  SL.Add('  }');
  SL.Add('};');
  SL.Add('Element.Inserters = new Hash({');
  SL.Add('  before: function(B, A) {');
  SL.Add('    if (A.parentNode) {');
  SL.Add('      A.parentNode.insertBefore(B, A);');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add('  after: function(B, A) {');
  SL.Add('    if (!A.parentNode) {');
  SL.Add('      return;');
  SL.Add('    }');
  SL.Add('    var C = A.nextSibling;');
  SL.Add('    (C) ? A.parentNode.insertBefore(B, C): A.parentNode.appendChild(');
  SL.Add('      B);');
  SL.Add('  },');
  SL.Add('  bottom: function(B, A) {');
  SL.Add('    A.appendChild(B);');
  SL.Add('  },');
  SL.Add('  top: function(B, A) {');
  SL.Add('    var C = A.firstChild;');
  SL.Add('    (C) ? A.insertBefore(B, C): A.appendChild(B);');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Element.Inserters.inside = Element.Inserters.bottom;');
  SL.Add('Element.Inserters.each(function(C, B) {');
  SL.Add('  var A = B.capitalize();');
  SL.Add('  Element.implement("inject" + A, function(D) {');
  SL.Add('    C(this, $(D, true));');
  SL.Add('    return this;');
  SL.Add('  });');
  SL.Add('  Element.implement("grab" + A, function(D) {');
  SL.Add('    C($(D, true), this);');
  SL.Add('    return this;');
  SL.Add('  });');
  SL.Add('});');
  SL.Add('Element.implement({');
  SL.Add('  getDocument: function() {');
  SL.Add('    return this.ownerDocument;');
  SL.Add('  },');
  SL.Add('  getWindow: function() {');
  SL.Add('    return this.ownerDocument.getWindow();');
  SL.Add('  },');
  SL.Add('  getElementById: function(D, C) {');
  SL.Add('    var B = this.ownerDocument.getElementById(D);');
  SL.Add('    if (!B) {');
  SL.Add('      return null;');
  SL.Add('    }');
  SL.Add('    for (var A = B.parentNode; A != this; A = A.parentNode) {');
  SL.Add('      if (!A) {');
  SL.Add('        return null;');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return $.element(B, C);');
  SL.Add('  },');
  SL.Add('  set: function(D, B) {');
  SL.Add('    switch ($type(D)) {');
  SL.Add('      case "object":');
  SL.Add('        for (var C in D) {');
  SL.Add('          this.set(C, D[C]);');
  SL.Add('        }');
  SL.Add('        break;');
  SL.Add('      case "string":');
  SL.Add('        var A = Element.Properties.get(D);');
  SL.Add('        (A && A.set) ? A.set.apply(this, Array.slice(');
  SL.Add('          arguments, 1)): this.setProperty(D, B);');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  get: function(B) {');
  SL.Add('    var A = Element.Properties.get(B);');
  SL.Add('    return (A && A.get) ? A.get.apply(this, Array.slice(');
  SL.Add('      arguments, 1)) : this.getProperty(B);');
  SL.Add('  },');
  SL.Add('  erase: function(B) {');
  SL.Add('    var A = Element.Properties.get(B);');
  SL.Add('    (A && A.erase) ? A.erase.apply(this, Array.slice(arguments,');
  SL.Add('      1)): this.removeProperty(B);');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  match: function(A) {');
  SL.Add('    return (!A || Element.get(this, "tag") == A);');
  SL.Add('  },');
  SL.Add('  inject: function(B, A) {');
  SL.Add('    Element.Inserters.get(A || "bottom")(this, $(B, true));');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  wraps: function(B, A) {');
  SL.Add('    B = $(B, true);');
  SL.Add('    return this.replaces(B)');
  SL.Add('      .grab(B, A);');
  SL.Add('  },');
  SL.Add('  grab: function(B, A) {');
  SL.Add('    Element.Inserters.get(A || "bottom")($(B, true), this);');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  appendText: function(B, A) {');
  SL.Add('    return this.grab(this.getDocument()');
  SL.Add('      .newTextNode(B), A);');
  SL.Add('  },');
  SL.Add('  adopt: function() {');
  SL.Add('    Array.flatten(arguments)');
  SL.Add('      .each(function(A) {');
  SL.Add('        A = $(A, true);');
  SL.Add('        if (A) {');
  SL.Add('          this.appendChild(A);');
  SL.Add('        }');
  SL.Add('      }, this);');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  dispose: function() {');
  SL.Add('    return (this.parentNode) ? this.parentNode.removeChild(this) :');
  SL.Add('      this;');
  SL.Add('  },');
  SL.Add('  clone: function(D, C) {');
  SL.Add('    switch ($type(this)) {');
  SL.Add('      case "element":');
  SL.Add('        var H = {};');
  SL.Add('        for (var G = 0, E = this.attributes.length; G < E; G++) {');
  SL.Add('          var B = this.attributes[G],');
  SL.Add('            L = B.nodeName.toLowerCase();');
  SL.Add('          if (Browser.Engine.trident && (/input/i)');
  SL.Add('            .test(');
  SL.Add('              this.tagName) && (/width|height/)');
  SL.Add('            .test(');
  SL.Add('              L)) {');
  SL.Add('            continue;');
  SL.Add('          }');
  SL.Add('          var K = (L == "style" && this.style) ? this.style');
  SL.Add('            .cssText : B.nodeValue;');
  SL.Add('          if (!$chk(K) || L == "uid" || (L == "id" && !C)) {');
  SL.Add('            continue;');
  SL.Add('          }');
  SL.Add('          if (K != "inherit" && ["string", "number"].contains(');
  SL.Add('              $type(K))) {');
  SL.Add('            H[L] = K;');
  SL.Add('          }');
  SL.Add('        }');
  SL.Add('        var J = new Element(this.nodeName.toLowerCase(), H);');
  SL.Add('        if (D !== false) {');
  SL.Add('          for (var I = 0, F = this.childNodes.length; I <');
  SL.Add('            F; I++) {');
  SL.Add('            var A = Element.clone(this.childNodes[I],');
  SL.Add('              true, C);');
  SL.Add('            if (A) {');
  SL.Add('              J.grab(A);');
  SL.Add('            }');
  SL.Add('          }');
  SL.Add('        }');
  SL.Add('        return J;');
  SL.Add('      case "textnode":');
  SL.Add('        return document.newTextNode(this.nodeValue);');
  SL.Add('    }');
  SL.Add('    return null;');
  SL.Add('  },');
  SL.Add('  replaces: function(A) {');
  SL.Add('    A = $(A, true);');
  SL.Add('    A.parentNode.replaceChild(this, A);');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  hasClass: function(A) {');
  SL.Add('    return this.className.contains(A, " ");');
  SL.Add('  },');
  SL.Add('  addClass: function(A) {');
  SL.Add('    if (!this.hasClass(A)) {');
  SL.Add('      this.className = (this.className + " " + A)');
  SL.Add('        .clean();');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  removeClass: function(A) {');
  SL.Add('    this.className = this.className.replace(new RegExp(');
  SL.Add('        "(^|\\s)" + A + "(?:\\s|$)"), "$1")');
  SL.Add('      .clean();');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  toggleClass: function(A) {');
  SL.Add('    return this.hasClass(A) ? this.removeClass(A) : this.addClass(');
  SL.Add('      A);');
  SL.Add('  },');
  SL.Add('  getComputedStyle: function(B) {');
  SL.Add('    if (this.currentStyle) {');
  SL.Add('      return this.currentStyle[B.camelCase()];');
  SL.Add('    }');
  SL.Add('    var A = this.getWindow()');
  SL.Add('      .getComputedStyle(this, null);');
  SL.Add('    return (A) ? A.getPropertyValue([B.hyphenate()]) : null;');
  SL.Add('  },');
  SL.Add('  empty: function() {');
  SL.Add('    $A(this.childNodes)');
  SL.Add('      .each(function(A) {');
  SL.Add('        Browser.freeMem(A);');
  SL.Add('        Element.empty(A);');
  SL.Add('        Element.dispose(A);');
  SL.Add('      }, this);');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  destroy: function() {');
  SL.Add('    Browser.freeMem(this.empty()');
  SL.Add('      .dispose());');
  SL.Add('    return null;');
  SL.Add('  },');
  SL.Add('  getSelected: function() {');
  SL.Add('    return new Elements($A(this.options)');
  SL.Add('      .filter(function(A) {');
  SL.Add('        return A.selected;');
  SL.Add('      }));');
  SL.Add('  },');
  SL.Add('  toQueryString: function() {');
  SL.Add('    var A = [];');
  SL.Add('    this.getElements("input, select, textarea")');
  SL.Add('      .each(function(B) {');
  SL.Add('        if (!B.name || B.disabled) {');
  SL.Add('          return;');
  SL.Add('        }');
  SL.Add('        var C = (B.tagName.toLowerCase() == "select") ?');
  SL.Add('          Element.getSelected(B)');
  SL.Add('          .map(function(D) {');
  SL.Add('            return D.value;');
  SL.Add('          }) : ((B.type == "radio" || B.type ==');
  SL.Add('            "checkbox") && !B.checked) ? null : B.value;');
  SL.Add('        $splat(C)');
  SL.Add('          .each(function(D) {');
  SL.Add('            if (D) {');
  SL.Add('              A.push(B.name + "=" +');
  SL.Add('                encodeURIComponent(D));');
  SL.Add('            }');
  SL.Add('          });');
  SL.Add('      });');
  SL.Add('    return A.join("&");');
  SL.Add('  },');
  SL.Add('  getProperty: function(C) {');
  SL.Add('    var B = Element.Attributes,');
  SL.Add('      A = B.Props[C];');
  SL.Add('    var D = (A) ? this[A] : this.getAttribute(C, 2);');
  SL.Add('    return (B.Bools[C]) ? !!D : (A) ? D : D || null;');
  SL.Add('  },');
  SL.Add('  getProperties: function() {');
  SL.Add('    var A = $A(arguments);');
  SL.Add('    return A.map(function(B) {');
  SL.Add('        return this.getProperty(B);');
  SL.Add('      }, this)');
  SL.Add('      .associate(A);');
  SL.Add('  },');
  SL.Add('  setProperty: function(D, E) {');
  SL.Add('    var C = Element.Attributes,');
  SL.Add('      B = C.Props[D],');
  SL.Add('      A = $defined(E);');
  SL.Add('    if (B && C.Bools[D]) {');
  SL.Add('      E = (E || !A) ? true : false;');
  SL.Add('    } else {');
  SL.Add('      if (!A) {');
  SL.Add('        return this.removeProperty(D);');
  SL.Add('      }');
  SL.Add('    }(B) ? this[B] = E: this.setAttribute(D, E);');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  setProperties: function(A) {');
  SL.Add('    for (var B in A) {');
  SL.Add('      this.setProperty(B, A[B]);');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  removeProperty: function(D) {');
  SL.Add('    var C = Element.Attributes,');
  SL.Add('      B = C.Props[D],');
  SL.Add('      A = (B && C.Bools[D]);');
  SL.Add('    (B) ? this[B] = (A) ? false : "": this.removeAttribute(D);');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  removeProperties: function() {');
  SL.Add('    Array.each(arguments, this.removeProperty, this);');
  SL.Add('    return this;');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('(function() {');
  SL.Add('  var A = function(D, B, I, C, F, H) {');
  SL.Add('    var E = D[I || B];');
  SL.Add('    var G = [];');
  SL.Add('    while (E) {');
  SL.Add('      if (E.nodeType == 1 && (!C || Element.match(E, C))) {');
  SL.Add('        G.push(E);');
  SL.Add('        if (!F) {');
  SL.Add('          break;');
  SL.Add('        }');
  SL.Add('      }');
  SL.Add('      E = E[B];');
  SL.Add('    }');
  SL.Add('    return (F) ? new Elements(G, {');
  SL.Add('      ddup: false,');
  SL.Add('      cash: !H');
  SL.Add('    }) : $(G[0], H);');
  SL.Add('  };');
  SL.Add('  Element.implement({');
  SL.Add('    getPrevious: function(B, C) {');
  SL.Add('      return A(this, "previousSibling", null, B, false, C);');
  SL.Add('    },');
  SL.Add('    getAllPrevious: function(B, C) {');
  SL.Add('      return A(this, "previousSibling", null, B, true, C);');
  SL.Add('    },');
  SL.Add('    getNext: function(B, C) {');
  SL.Add('      return A(this, "nextSibling", null, B, false, C);');
  SL.Add('    },');
  SL.Add('    getAllNext: function(B, C) {');
  SL.Add('      return A(this, "nextSibling", null, B, true, C);');
  SL.Add('    },');
  SL.Add('    getFirst: function(B, C) {');
  SL.Add('      return A(this, "nextSibling", "firstChild", B,');
  SL.Add('        false, C);');
  SL.Add('    },');
  SL.Add('    getLast: function(B, C) {');
  SL.Add('      return A(this, "previousSibling", "lastChild", B,');
  SL.Add('        false, C);');
  SL.Add('    },');
  SL.Add('    getParent: function(B, C) {');
  SL.Add('      return A(this, "parentNode", null, B, false, C);');
  SL.Add('    },');
  SL.Add('    getParents: function(B, C) {');
  SL.Add('      return A(this, "parentNode", null, B, true, C);');
  SL.Add('    },');
  SL.Add('    getChildren: function(B, C) {');
  SL.Add('      return A(this, "nextSibling", "firstChild", B, true,');
  SL.Add('        C);');
  SL.Add('    },');
  SL.Add('    hasChild: function(B) {');
  SL.Add('      B = $(B, true);');
  SL.Add('      return (!!B && $A(this.getElementsByTagName(B.tagName))');
  SL.Add('        .contains(B));');
  SL.Add('    }');
  SL.Add('  });');
  SL.Add('})();');
  SL.Add('Element.Properties = new Hash;');
  SL.Add('Element.Properties.style = {');
  SL.Add('  set: function(A) {');
  SL.Add('    this.style.cssText = A;');
  SL.Add('  },');
  SL.Add('  get: function() {');
  SL.Add('    return this.style.cssText;');
  SL.Add('  },');
  SL.Add('  erase: function() {');
  SL.Add('    this.style.cssText = "";');
  SL.Add('  }');
  SL.Add('};');
  SL.Add('Element.Properties.tag = {');
  SL.Add('  get: function() {');
  SL.Add('    return this.tagName.toLowerCase();');
  SL.Add('  }');
  SL.Add('};');
  SL.Add('Element.Properties.href = {');
  SL.Add('  get: function() {');
  SL.Add('    return (!this.href) ? null : this.href.replace(new RegExp("^" +');
  SL.Add('      document.location.protocol + "/" + document.location');       //kt was  + "//" +  
  SL.Add('      .host), "");');
  SL.Add('  }');
  SL.Add('};');
  SL.Add('Element.Properties.html = {');
  SL.Add('  set: function() {');
  SL.Add('    return this.innerHTML = Array.flatten(arguments)');
  SL.Add('      .join("");');
  SL.Add('  }');
  SL.Add('};');
  SL.Add('Native.implement([Element, Window, Document], {');
  SL.Add('  addListener: function(B, A) {');
  SL.Add('    if (this.addEventListener) {');
  SL.Add('      this.addEventListener(B, A, false);');
  SL.Add('    } else {');
  SL.Add('      this.attachEvent("on" + B, A);');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  removeListener: function(B, A) {');
  SL.Add('    if (this.removeEventListener) {');
  SL.Add('      this.removeEventListener(B, A, false);');
  SL.Add('    } else {');
  SL.Add('      this.detachEvent("on" + B, A);');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  retrieve: function(B, A) {');
  SL.Add('    var D = Element.Storage.get(this.uid);');
  SL.Add('    var C = D[B];');
  SL.Add('    if ($defined(A) && !$defined(C)) {');
  SL.Add('      C = D[B] = A;');
  SL.Add('    }');
  SL.Add('    return $pick(C);');
  SL.Add('  },');
  SL.Add('  store: function(B, A) {');
  SL.Add('    var C = Element.Storage.get(this.uid);');
  SL.Add('    C[B] = A;');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  eliminate: function(A) {');
  SL.Add('    var B = Element.Storage.get(this.uid);');
  SL.Add('    delete B[A];');
  SL.Add('    return this;');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Element.Attributes = new Hash({');
  SL.Add('  Props: {');
  SL.Add('    html: "innerHTML",');
  SL.Add('    "class": "className",');
  SL.Add('    "for": "htmlFor",');
  SL.Add('    text: (Browser.Engine.trident) ? "innerText" : "textContent"');
  SL.Add('  },');
  SL.Add('  Bools: ["compact", "nowrap", "ismap", "declare", "noshade",');
  SL.Add('    "checked", "disabled", "readonly", "multiple", "selected",');
  SL.Add('    "noresize", "defer"');
  SL.Add('  ],');
  SL.Add('  Camels: ["value", "accessKey", "cellPadding", "cellSpacing",');
  SL.Add('    "colSpan", "frameBorder", "maxLength", "readOnly",');
  SL.Add('    "rowSpan", "tabIndex", "useMap"');
  SL.Add('  ]');
  SL.Add('});');
  SL.Add('Browser.freeMem = function(A) {');
  SL.Add('  if (!A) {');
  SL.Add('    return;');
  SL.Add('  }');
  SL.Add('  if (Browser.Engine.trident && (/object/i)');
  SL.Add('    .test(A.tagName)) {');
  SL.Add('    for (var B in A) {');
  SL.Add('      if (typeof A[B] == "function") {');
  SL.Add('        A[B] = $empty;');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    Element.dispose(A);');
  SL.Add('  }');
  SL.Add('  if (A.uid && A.removeEvents) {');
  SL.Add('    A.removeEvents();');
  SL.Add('  }');
  SL.Add('};');
  SL.Add('(function(B) {');
  SL.Add('  var C = B.Bools,');
  SL.Add('    A = B.Camels;');
  SL.Add('  B.Bools = C = C.associate(C);');
  SL.Add('  Hash.extend(Hash.combine(B.Props, C), A.associate(A.map(function(D) {');
  SL.Add('    return D.toLowerCase();');
  SL.Add('  })));');
  SL.Add('  B.erase("Camels");');
  SL.Add('})(Element.Attributes);');
  SL.Add('window.addListener("unload", function() {');
  SL.Add('  window.removeListener("unload", arguments.callee);');
  SL.Add('  document.purge();');
  SL.Add('  if (Browser.Engine.trident) {');
  SL.Add('    CollectGarbage();');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Element.Properties.events = {');
  SL.Add('  set: function(A) {');
  SL.Add('    this.addEvents(A);');
  SL.Add('  }');
  SL.Add('};');
  SL.Add('Native.implement([Element, Window, Document], {');
  SL.Add('  addEvent: function(E, G) {');
  SL.Add('    var H = this.retrieve("events", {});');
  SL.Add('    H[E] = H[E] || {');
  SL.Add('      keys: [],');
  SL.Add('      values: []');
  SL.Add('    };');
  SL.Add('    if (H[E].keys.contains(G)) {');
  SL.Add('      return this;');
  SL.Add('    }');
  SL.Add('    H[E].keys.push(G);');
  SL.Add('    var F = E,');
  SL.Add('      A = Element.Events.get(E),');
  SL.Add('      C = G,');
  SL.Add('      I = this;');
  SL.Add('    if (A) {');
  SL.Add('      if (A.onAdd) {');
  SL.Add('        A.onAdd.call(this, G);');
  SL.Add('      }');
  SL.Add('      if (A.condition) {');
  SL.Add('        C = function(J) {');
  SL.Add('          if (A.condition.call(this, J)) {');
  SL.Add('            return G.call(this, J);');
  SL.Add('          }');
  SL.Add('          return false;');
  SL.Add('        };');
  SL.Add('      }');
  SL.Add('      F = A.base || F;');
  SL.Add('    }');
  SL.Add('    var D = function() {');
  SL.Add('      return G.call(I);');
  SL.Add('    };');
  SL.Add('    var B = Element.NativeEvents[F] || 0;');
  SL.Add('    if (B) {');
  SL.Add('      if (B == 2) {');
  SL.Add('        D = function(J) {');
  SL.Add('          J = new Event(J, I.getWindow());');
  SL.Add('          if (C.call(I, J) === false) {');
  SL.Add('            J.stop();');
  SL.Add('          }');
  SL.Add('        };');
  SL.Add('      }');
  SL.Add('      this.addListener(F, D);');
  SL.Add('    }');
  SL.Add('    H[E].values.push(D);');
  SL.Add('    return this;');
  SL.Add('  },');
  //NOTE: this javascript code continues in Monkey_Bundle_b_JS_U
end;

end.

