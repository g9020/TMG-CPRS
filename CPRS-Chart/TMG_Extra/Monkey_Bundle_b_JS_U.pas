unit Monkey_Bundle_b_JS_U;
//kt added entire unit  1/2016

(*
Downloaded from http://www.monkeyphysics.com/mootools/script/2/datepicker
on Jan 6, 2016 by Kevin Toppenberg, MD.
Stated license is Creative Commons Attribution-ShareAlike 3.0
http://creativecommons.org/licenses/by-sa/3.0/

Some modifications made below (parts removed), marked with "//kt"
Also changes made to formating.  Original was MINIFIED.
*)


interface

uses
  Classes, Controls, StdCtrls, SysUtils, StrUtils;

procedure AddMonkeyBundleScriptB(SL : TStringList);

implementation

procedure AddMonkeyBundleScriptB(SL : TStringList);
begin
  //NOTE: this javascript code is a continuation from Monkey_Bundle_a_JS_U
  SL.Add('  removeEvent: function(D, C) {');
  SL.Add('    var B = this.retrieve("events");');
  SL.Add('    if (!B || !B[D]) {');
  SL.Add('      return this;');
  SL.Add('    }');
  SL.Add('    var G = B[D].keys.indexOf(C);');
  SL.Add('    if (G == -1) {');
  SL.Add('      return this;');
  SL.Add('    }');
  SL.Add('    var A = B[D].keys.splice(G, 1)[0];');
  SL.Add('    var F = B[D].values.splice(G, 1)[0];');
  SL.Add('    var E = Element.Events.get(D);');
  SL.Add('    if (E) {');
  SL.Add('      if (E.onRemove) {');
  SL.Add('        E.onRemove.call(this, C);');
  SL.Add('      }');
  SL.Add('      D = E.base || D;');
  SL.Add('    }');
  SL.Add('    return (Element.NativeEvents[D]) ? this.removeListener(D, F) :');
  SL.Add('      this;');
  SL.Add('  },');
  SL.Add('  addEvents: function(A) {');
  SL.Add('    for (var B in A) {');
  SL.Add('      this.addEvent(B, A[B]);');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  removeEvents: function(B) {');
  SL.Add('    var A = this.retrieve("events");');
  SL.Add('    if (!A) {');
  SL.Add('      return this;');
  SL.Add('    }');
  SL.Add('    if (!B) {');
  SL.Add('      for (var C in A) {');
  SL.Add('        this.removeEvents(C);');
  SL.Add('      }');
  SL.Add('      A = null;');
  SL.Add('    } else {');
  SL.Add('      if (A[B]) {');
  SL.Add('        while (A[B].keys[0]) {');
  SL.Add('          this.removeEvent(B, A[B].keys[0]);');
  SL.Add('        }');
  SL.Add('        A[B] = null;');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  fireEvent: function(D, B, A) {');
  SL.Add('    var C = this.retrieve("events");');
  SL.Add('    if (!C || !C[D]) {');
  SL.Add('      return this;');
  SL.Add('    }');
  SL.Add('    C[D].keys.each(function(E) {');
  SL.Add('      E.create({');
  SL.Add('        bind: this,');
  SL.Add('        delay: A,');
  SL.Add('        "arguments": B');
  SL.Add('      })();');
  SL.Add('    }, this);');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  cloneEvents: function(D, A) {');
  SL.Add('    D = $(D);');
  SL.Add('    var C = D.retrieve("events");');
  SL.Add('    if (!C) {');
  SL.Add('      return this;');
  SL.Add('    }');
  SL.Add('    if (!A) {');
  SL.Add('      for (var B in C) {');
  SL.Add('        this.cloneEvents(D, B);');
  SL.Add('      }');
  SL.Add('    } else {');
  SL.Add('      if (C[A]) {');
  SL.Add('        C[A].keys.each(function(E) {');
  SL.Add('          this.addEvent(A, E);');
  SL.Add('        }, this);');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Element.NativeEvents = {');
  SL.Add('  click: 2,');
  SL.Add('  dblclick: 2,');
  SL.Add('  mouseup: 2,');
  SL.Add('  mousedown: 2,');
  SL.Add('  contextmenu: 2,');
  SL.Add('  mousewheel: 2,');
  SL.Add('  DOMMouseScroll: 2,');
  SL.Add('  mouseover: 2,');
  SL.Add('  mouseout: 2,');
  SL.Add('  mousemove: 2,');
  SL.Add('  selectstart: 2,');
  SL.Add('  selectend: 2,');
  SL.Add('  keydown: 2,');
  SL.Add('  keypress: 2,');
  SL.Add('  keyup: 2,');
  SL.Add('  focus: 2,');
  SL.Add('  blur: 2,');
  SL.Add('  change: 2,');
  SL.Add('  reset: 2,');
  SL.Add('  select: 2,');
  SL.Add('  submit: 2,');
  SL.Add('  load: 1,');
  SL.Add('  unload: 1,');
  SL.Add('  beforeunload: 2,');
  SL.Add('  resize: 1,');
  SL.Add('  move: 1,');
  SL.Add('  DOMContentLoaded: 1,');
  SL.Add('  readystatechange: 1,');
  SL.Add('  error: 1,');
  SL.Add('  abort: 1,');
  SL.Add('  scroll: 1');
  SL.Add('};');
  SL.Add('(function() {');
  SL.Add('  var A = function(B) {');
  SL.Add('    var C = B.relatedTarget;');
  SL.Add('    if (C == undefined) {');
  SL.Add('      return true;');
  SL.Add('    }');
  SL.Add('    if (C === false) {');
  SL.Add('      return false;');
  SL.Add('    }');
  SL.Add('    return ($type(this) != "document" && C != this && C.prefix !=');
  SL.Add('      "xul" && !this.hasChild(C));');
  SL.Add('  };');
  SL.Add('  Element.Events = new Hash({');
  SL.Add('    mouseenter: {');
  SL.Add('      base: "mouseover",');
  SL.Add('      condition: A');
  SL.Add('    },');
  SL.Add('    mouseleave: {');
  SL.Add('      base: "mouseout",');
  SL.Add('      condition: A');
  SL.Add('    },');
  SL.Add('    mousewheel: {');
  SL.Add('      base: (Browser.Engine.gecko) ? "DOMMouseScroll" : "mousewheel"');
  SL.Add('    }');
  SL.Add('  });');
  SL.Add('})();');
  SL.Add('Element.Properties.styles = {');
  SL.Add('  set: function(A) {');
  SL.Add('    this.setStyles(A);');
  SL.Add('  }');
  SL.Add('};');
  SL.Add('Element.Properties.opacity = {');
  SL.Add('  set: function(A, B) {');
  SL.Add('    if (!B) {');
  SL.Add('      if (A == 0) {');
  SL.Add('        if (this.style.visibility != "hidden") {');
  SL.Add('          this.style.visibility = "hidden";');
  SL.Add('        }');
  SL.Add('      } else {');
  SL.Add('        if (this.style.visibility != "visible") {');
  SL.Add('          this.style.visibility = "visible";');
  SL.Add('        }');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    if (!this.currentStyle || !this.currentStyle.hasLayout) {');
  SL.Add('      this.style.zoom = 1;');
  SL.Add('    }');
  SL.Add('    if (Browser.Engine.trident) {');
  SL.Add('      this.style.filter = (A == 1) ? "" : "alpha(opacity=" + A *');
  SL.Add('        100 + ")";');
  SL.Add('    }');
  SL.Add('    this.style.opacity = A;');
  SL.Add('    this.store("opacity", A);');
  SL.Add('  },');
  SL.Add('  get: function() {');
  SL.Add('    return this.retrieve("opacity", 1);');
  SL.Add('  }');
  SL.Add('};');
  SL.Add('Element.implement({');
  SL.Add('  setOpacity: function(A) {');
  SL.Add('    return this.set("opacity", A, true);');
  SL.Add('  },');
  SL.Add('  getOpacity: function() {');
  SL.Add('    return this.get("opacity");');
  SL.Add('  },');
  SL.Add('  setStyle: function(B, A) {');
  SL.Add('    switch (B) {');
  SL.Add('      case "opacity":');
  SL.Add('        return this.set("opacity", parseFloat(A));');
  SL.Add('      case "float":');
  SL.Add('        B = (Browser.Engine.trident) ? "styleFloat" :');
  SL.Add('          "cssFloat";');
  SL.Add('    }');
  SL.Add('    B = B.camelCase();');
  SL.Add('    if ($type(A) != "string") {');
  SL.Add('      var C = (Element.Styles.get(B) || "@")');
  SL.Add('        .split(" ");');
  SL.Add('      A = $splat(A)');
  SL.Add('        .map(function(E, D) {');
  SL.Add('          if (!C[D]) {');
  SL.Add('            return "";');
  SL.Add('          }');
  SL.Add('          return ($type(E) == "number") ? C[D].replace(');
  SL.Add('            "@", Math.round(E)) : E;');
  SL.Add('        })');
  SL.Add('        .join(" ");');
  SL.Add('    } else {');
  SL.Add('      if (A == String(Number(A))) {');
  SL.Add('        A = Math.round(A);');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    this.style[B] = A;');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  getStyle: function(G) {');
  SL.Add('    switch (G) {');
  SL.Add('      case "opacity":');
  SL.Add('        return this.get("opacity");');
  SL.Add('      case "float":');
  SL.Add('        G = (Browser.Engine.trident) ? "styleFloat" :');
  SL.Add('          "cssFloat";');
  SL.Add('    }');
  SL.Add('    G = G.camelCase();');
  SL.Add('    var A = this.style[G];');
  SL.Add('    if (!$chk(A)) {');
  SL.Add('      A = [];');
  SL.Add('      for (var F in Element.ShortStyles) {');
  SL.Add('        if (G != F) {');
  SL.Add('          continue;');
  SL.Add('        }');
  SL.Add('        for (var E in Element.ShortStyles[F]) {');
  SL.Add('          A.push(this.getStyle(E));');
  SL.Add('        }');
  SL.Add('        return A.join(" ");');
  SL.Add('      }');
  SL.Add('      A = this.getComputedStyle(G);');
  SL.Add('    }');
  SL.Add('    if (A) {');
  SL.Add('      A = String(A);');
  SL.Add('      var C = A.match(/rgba?\([\d\s,]+\)/);');
  SL.Add('      if (C) {');
  SL.Add('        A = A.replace(C[0], C[0].rgbToHex());');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    if (Browser.Engine.presto || (Browser.Engine.trident && !');
  SL.Add('        $chk(parseInt(A)))) {');
  SL.Add('      if (G.test(/^(height|width)$/)) {');
  SL.Add('        var B = (G == "width") ? ["left", "right"] : ["top",');
  SL.Add('            "bottom"');
  SL.Add('          ],');
  SL.Add('          D = 0;');
  SL.Add('        B.each(function(H) {');
  SL.Add('          D += this.getStyle("border-" + H +');
  SL.Add('              "-width")');
  SL.Add('            .toInt() + this.getStyle(');
  SL.Add('              "padding-" + H)');
  SL.Add('            .toInt();');
  SL.Add('        }, this);');
  SL.Add('        return this["offset" + G.capitalize()] - D + "px";');
  SL.Add('      }');
  SL.Add('      if (Browser.Engine.presto && String(A)');
  SL.Add('        .test("px")) {');
  SL.Add('        return A;');
  SL.Add('      }');
  SL.Add('      if (G.test(/(border(.+)Width|margin|padding)/)) {');
  SL.Add('        return "0px";');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return A;');
  SL.Add('  },');
  SL.Add('  setStyles: function(B) {');
  SL.Add('    for (var A in B) {');
  SL.Add('      this.setStyle(A, B[A]);');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  getStyles: function() {');
  SL.Add('    var A = {};');
  SL.Add('    Array.each(arguments, function(B) {');
  SL.Add('      A[B] = this.getStyle(B);');
  SL.Add('    }, this);');
  SL.Add('    return A;');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Element.Styles = new Hash({');
  SL.Add('  left: "@px",');
  SL.Add('  top: "@px",');
  SL.Add('  bottom: "@px",');
  SL.Add('  right: "@px",');
  SL.Add('  width: "@px",');
  SL.Add('  height: "@px",');
  SL.Add('  maxWidth: "@px",');
  SL.Add('  maxHeight: "@px",');
  SL.Add('  minWidth: "@px",');
  SL.Add('  minHeight: "@px",');
  SL.Add('  backgroundColor: "rgb(@, @, @)",');
  SL.Add('  backgroundPosition: "@px @px",');
  SL.Add('  color: "rgb(@, @, @)",');
  SL.Add('  fontSize: "@px",');
  SL.Add('  letterSpacing: "@px",');
  SL.Add('  lineHeight: "@px",');
  SL.Add('  clip: "rect(@px @px @px @px)",');
  SL.Add('  margin: "@px @px @px @px",');
  SL.Add('  padding: "@px @px @px @px",');
  SL.Add('  border: "@px @ rgb(@, @, @) @px @ rgb(@, @, @) @px @ rgb(@, @, @)",');
  SL.Add('  borderWidth: "@px @px @px @px",');
  SL.Add('  borderStyle: "@ @ @ @",');
  SL.Add('  borderColor: "rgb(@, @, @) rgb(@, @, @) rgb(@, @, @) rgb(@, @, @)",');
  SL.Add('  zIndex: "@",');
  SL.Add('  zoom: "@",');
  SL.Add('  fontWeight: "@",');
  SL.Add('  textIndent: "@px",');
  SL.Add('  opacity: "@"');
  SL.Add('});');
  SL.Add('Element.ShortStyles = {');
  SL.Add('  margin: {},');
  SL.Add('  padding: {},');
  SL.Add('  border: {},');
  SL.Add('  borderWidth: {},');
  SL.Add('  borderStyle: {},');
  SL.Add('  borderColor: {}');
  SL.Add('};');
  SL.Add('["Top", "Right", "Bottom", "Left"].each(function(G) {');
  SL.Add('  var F = Element.ShortStyles;');
  SL.Add('  var B = Element.Styles;');
  SL.Add('  ["margin", "padding"].each(function(H) {');
  SL.Add('    var I = H + G;');
  SL.Add('    F[H][I] = B[I] = "@px";');
  SL.Add('  });');
  SL.Add('  var E = "border" + G;');
  SL.Add('  F.border[E] = B[E] = "@px @ rgb(@, @, @)";');
  SL.Add('  var D = E + "Width",');
  SL.Add('    A = E + "Style",');
  SL.Add('    C = E + "Color";');
  SL.Add('  F[E] = {};');
  SL.Add('  F.borderWidth[D] = F[E][D] = B[D] = "@px";');
  SL.Add('  F.borderStyle[A] = F[E][A] = B[A] = "@";');
  SL.Add('  F.borderColor[C] = F[E][C] = B[C] = "rgb(@, @, @)";');
  SL.Add('});');
  SL.Add('(function() {');
  SL.Add('  Element.implement({');
  SL.Add('    scrollTo: function(H, I) {');
  SL.Add('      if (B(this)) {');
  SL.Add('        this.getWindow()');
  SL.Add('          .scrollTo(H, I);');
  SL.Add('      } else {');
  SL.Add('        this.scrollLeft = H;');
  SL.Add('        this.scrollTop = I;');
  SL.Add('      }');
  SL.Add('      return this;');
  SL.Add('    },');
  SL.Add('    getSize: function() {');
  SL.Add('      if (B(this)) {');
  SL.Add('        return this.getWindow()');
  SL.Add('          .getSize();');
  SL.Add('      }');
  SL.Add('      return {');
  SL.Add('        x: this.offsetWidth,');
  SL.Add('        y: this.offsetHeight');
  SL.Add('      };');
  SL.Add('    },');
  SL.Add('    getScrollSize: function() {');
  SL.Add('      if (B(this)) {');
  SL.Add('        return this.getWindow()');
  SL.Add('          .getScrollSize();');
  SL.Add('      }');
  SL.Add('      return {');
  SL.Add('        x: this.scrollWidth,');
  SL.Add('        y: this.scrollHeight');
  SL.Add('      };');
  SL.Add('    },');
  SL.Add('    getScroll: function() {');
  SL.Add('      if (B(this)) {');
  SL.Add('        return this.getWindow()');
  SL.Add('          .getScroll();');
  SL.Add('      }');
  SL.Add('      return {');
  SL.Add('        x: this.scrollLeft,');
  SL.Add('        y: this.scrollTop');
  SL.Add('      };');
  SL.Add('    },');
  SL.Add('    getScrolls: function() {');
  SL.Add('      var I = this,');
  SL.Add('        H = {');
  SL.Add('          x: 0,');
  SL.Add('          y: 0');
  SL.Add('        };');
  SL.Add('      while (I && !B(I)) {');
  SL.Add('        H.x += I.scrollLeft;');
  SL.Add('        H.y += I.scrollTop;');
  SL.Add('        I = I.parentNode;');
  SL.Add('      }');
  SL.Add('      return H;');
  SL.Add('    },');
  SL.Add('    getOffsetParent: function() {');
  SL.Add('      var H = this;');
  SL.Add('      if (B(H)) {');
  SL.Add('        return null;');
  SL.Add('      }');
  SL.Add('      if (!Browser.Engine.trident) {');
  SL.Add('        return H.offsetParent;');
  SL.Add('      }');
  SL.Add('      while ((H = H.parentNode) && !B(H)) {');
  SL.Add('        if (D(H, "position") != "static") {');
  SL.Add('          return H;');
  SL.Add('        }');
  SL.Add('      }');
  SL.Add('      return null;');
  SL.Add('    },');
  SL.Add('    getOffsets: function() {');
  SL.Add('      var I = this,');
  SL.Add('        H = {');
  SL.Add('          x: 0,');
  SL.Add('          y: 0');
  SL.Add('        };');
  SL.Add('      if (B(this)) {');
  SL.Add('        return H;');
  SL.Add('      }');
  SL.Add('      while (I && !B(I)) {');
  SL.Add('        H.x += I.offsetLeft;');
  SL.Add('        H.y += I.offsetTop;');
  SL.Add('        if (Browser.Engine.gecko) {');
  SL.Add('          if (!F(I)) {');
  SL.Add('            H.x += C(I);');
  SL.Add('            H.y += G(I);');
  SL.Add('          }');
  SL.Add('          var J = I.parentNode;');
  SL.Add('          if (J && D(J, "overflow") != "visible") {');
  SL.Add('            H.x += C(J);');
  SL.Add('            H.y += G(J);');
  SL.Add('          }');
  SL.Add('        } else {');
  SL.Add('          if (I != this && (Browser.Engine.trident ||');
  SL.Add('              Browser.Engine.webkit)) {');
  SL.Add('            H.x += C(I);');
  SL.Add('            H.y += G(I);');
  SL.Add('          }');
  SL.Add('        }');
  SL.Add('        I = I.offsetParent;');
  SL.Add('        if (Browser.Engine.trident) {');
  SL.Add('          while (I && !I.currentStyle.hasLayout) {');
  SL.Add('            I = I.offsetParent;');
  SL.Add('          }');
  SL.Add('        }');
  SL.Add('      }');
  SL.Add('      if (Browser.Engine.gecko && !F(this)) {');
  SL.Add('        H.x -= C(this);');
  SL.Add('        H.y -= G(this);');
  SL.Add('      }');
  SL.Add('      return H;');
  SL.Add('    },');
  SL.Add('    getPosition: function(K) {');
  SL.Add('      if (B(this)) {');
  SL.Add('        return {');
  SL.Add('          x: 0,');
  SL.Add('          y: 0');
  SL.Add('        };');
  SL.Add('      }');
  SL.Add('      var L = this.getOffsets(),');
  SL.Add('        I = this.getScrolls();');
  SL.Add('      var H = {');
  SL.Add('        x: L.x - I.x,');
  SL.Add('        y: L.y - I.y');
  SL.Add('      };');
  SL.Add('      var J = (K && (K = $(K))) ? K.getPosition() : {');
  SL.Add('        x: 0,');
  SL.Add('        y: 0');
  SL.Add('      };');
  SL.Add('      return {');
  SL.Add('        x: H.x - J.x,');
  SL.Add('        y: H.y - J.y');
  SL.Add('      };');
  SL.Add('    },');
  SL.Add('    getCoordinates: function(J) {');
  SL.Add('      if (B(this)) {');
  SL.Add('        return this.getWindow()');
  SL.Add('          .getCoordinates();');
  SL.Add('      }');
  SL.Add('      var H = this.getPosition(J),');
  SL.Add('        I = this.getSize();');
  SL.Add('      var K = {');
  SL.Add('        left: H.x,');
  SL.Add('        top: H.y,');
  SL.Add('        width: I.x,');
  SL.Add('        height: I.y');
  SL.Add('      };');
  SL.Add('      K.right = K.left + K.width;');
  SL.Add('      K.bottom = K.top + K.height;');
  SL.Add('      return K;');
  SL.Add('    },');
  SL.Add('    computePosition: function(H) {');
  SL.Add('      return {');
  SL.Add('        left: H.x - E(this, "margin-left"),');
  SL.Add('        top: H.y - E(this, "margin-top")');
  SL.Add('      };');
  SL.Add('    },');
  SL.Add('    position: function(H) {');
  SL.Add('      return this.setStyles(this.computePosition(H));');
  SL.Add('    }');
  SL.Add('  });');
  SL.Add('  Native.implement([Document, Window], {');
  SL.Add('    getSize: function() {');
  SL.Add('      var I = this.getWindow();');
  SL.Add('      if (Browser.Engine.presto || Browser.Engine.webkit) {');
  SL.Add('        return {');
  SL.Add('          x: I.innerWidth,');
  SL.Add('          y: I.innerHeight');
  SL.Add('        };');
  SL.Add('      }');
  SL.Add('      var H = A(this);');
  SL.Add('      return {');
  SL.Add('        x: H.clientWidth,');
  SL.Add('        y: H.clientHeight');
  SL.Add('      };');
  SL.Add('    },');
  SL.Add('    getScroll: function() {');
  SL.Add('      var I = this.getWindow();');
  SL.Add('      var H = A(this);');
  SL.Add('      return {');
  SL.Add('        x: I.pageXOffset || H.scrollLeft,');
  SL.Add('        y: I.pageYOffset || H.scrollTop');
  SL.Add('      };');
  SL.Add('    },');
  SL.Add('    getScrollSize: function() {');
  SL.Add('      var I = A(this);');
  SL.Add('      var H = this.getSize();');
  SL.Add('      return {');
  SL.Add('        x: Math.max(I.scrollWidth, H.x),');
  SL.Add('        y: Math.max(I.scrollHeight, H.y)');
  SL.Add('      };');
  SL.Add('    },');
  SL.Add('    getPosition: function() {');
  SL.Add('      return {');
  SL.Add('        x: 0,');
  SL.Add('        y: 0');
  SL.Add('      };');
  SL.Add('    },');
  SL.Add('    getCoordinates: function() {');
  SL.Add('      var H = this.getSize();');
  SL.Add('      return {');
  SL.Add('        top: 0,');
  SL.Add('        left: 0,');
  SL.Add('        bottom: H.y,');
  SL.Add('        right: H.x,');
  SL.Add('        height: H.y,');
  SL.Add('        width: H.x');
  SL.Add('      };');
  SL.Add('    }');
  SL.Add('  });');
  SL.Add('  var D = Element.getComputedStyle;');
  SL.Add('');
  SL.Add('  function E(H, I) {');
  SL.Add('    return D(H, I)');
  SL.Add('      .toInt() || 0;');
  SL.Add('  }');
  SL.Add('');
  SL.Add('  function F(H) {');
  SL.Add('    return D(H, "-moz-box-sizing") == "border-box";');
  SL.Add('  }');
  SL.Add('');
  SL.Add('  function G(H) {');
  SL.Add('    return E(H, "border-top-width");');
  SL.Add('  }');
  SL.Add('');
  SL.Add('  function C(H) {');
  SL.Add('    return E(H, "border-left-width");');
  SL.Add('  }');
  SL.Add('');
  SL.Add('  function B(H) {');
  SL.Add('    return (/^(?:body|html)$/i)');
  SL.Add('      .test(H.tagName);');
  SL.Add('  }');
  SL.Add('');
  SL.Add('  function A(H) {');
  SL.Add('    var I = H.getDocument();');
  SL.Add('    return (!I.compatMode || I.compatMode == "CSS1Compat") ? I.html : I');
  SL.Add('      .body;');
  SL.Add('  }');
  SL.Add('})();');
  SL.Add('Native.implement([Window, Document, Element], {');
  SL.Add('  getHeight: function() {');
  SL.Add('    return this.getSize()');
  SL.Add('      .y;');
  SL.Add('  },');
  SL.Add('  getWidth: function() {');
  SL.Add('    return this.getSize()');
  SL.Add('      .x;');
  SL.Add('  },');
  SL.Add('  getScrollTop: function() {');
  SL.Add('    return this.getScroll()');
  SL.Add('      .y;');
  SL.Add('  },');
  SL.Add('  getScrollLeft: function() {');
  SL.Add('    return this.getScroll()');
  SL.Add('      .x;');
  SL.Add('  },');
  SL.Add('  getScrollHeight: function() {');
  SL.Add('    return this.getScrollSize()');
  SL.Add('      .y;');
  SL.Add('  },');
  SL.Add('  getScrollWidth: function() {');
  SL.Add('    return this.getScrollSize()');
  SL.Add('      .x;');
  SL.Add('  },');
  SL.Add('  getTop: function() {');
  SL.Add('    return this.getPosition()');
  SL.Add('      .y;');
  SL.Add('  },');
  SL.Add('  getLeft: function() {');
  SL.Add('    return this.getPosition()');
  SL.Add('      .x;');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Native.implement([Document, Element], {');
  SL.Add('  getElements: function(H, G) {');
  SL.Add('    H = H.split(",");');
  SL.Add('    var C, E = {};');
  SL.Add('    for (var D = 0, B = H.length; D < B; D++) {');
  SL.Add('      var A = H[D],');
  SL.Add('        F = Selectors.Utils.search(this, A, E);');
  SL.Add('      if (D != 0 && F.item) {');
  SL.Add('        F = $A(F);');
  SL.Add('      }');
  SL.Add('      C = (D == 0) ? F : (C.item) ? $A(C)');
  SL.Add('        .concat(F) : C.concat(');
  SL.Add('          F);');
  SL.Add('    }');
  SL.Add('    return new Elements(C, {');
  SL.Add('      ddup: (H.length > 1),');
  SL.Add('      cash: !G');
  SL.Add('    });');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Element.implement({');
  SL.Add('  match: function(B) {');
  SL.Add('    if (!B) {');
  SL.Add('      return true;');
  SL.Add('    }');
  SL.Add('    var D = Selectors.Utils.parseTagAndID(B);');
  SL.Add('    var A = D[0],');
  SL.Add('      E = D[1];');
  SL.Add('    if (!Selectors.Filters.byID(this, E) || !Selectors.Filters.byTag(');
  SL.Add('        this, A)) {');
  SL.Add('      return false;');
  SL.Add('    }');
  SL.Add('    var C = Selectors.Utils.parseSelector(B);');
  SL.Add('    return (C) ? Selectors.Utils.filter(this, C, {}) : true;');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('var Selectors = {');
  SL.Add('  Cache: {');
  SL.Add('    nth: {},');
  SL.Add('    parsed: {}');
  SL.Add('  }');
  SL.Add('};');
  SL.Add('Selectors.RegExps = {');
  SL.Add('  id: (/#([\w-]+)/),');
  SL.Add('  tag: (/^(\w+|\*)/),');
  SL.Add('  quick: (/^(\w+|\*)$/),');
  SL.Add('  splitter: (/\s*([+>~\s])\s*([a-zA-Z#.*:\[])/g),');
  SL.Add('  combined: (');
  SL.Add('    /\.([\w-]+)|\[(\w+)(?:([!*^$~|]?=)["'']?(.*?)["'']?)?\]|:([\w-]+)(?:\(["'']?(.*?)?["'']?\)|$)/g');
  SL.Add('  )');
  SL.Add('};');
  SL.Add('Selectors.Utils = {');
  SL.Add('  chk: function(B, C) {');
  SL.Add('    if (!C) {');
  SL.Add('      return true;');
  SL.Add('    }');
  SL.Add('    var A = $uid(B);');
  SL.Add('    if (!C[A]) {');
  SL.Add('      return C[A] = true;');
  SL.Add('    }');
  SL.Add('    return false;');
  SL.Add('  },');
  SL.Add('  parseNthArgument: function(F) {');
  SL.Add('    if (Selectors.Cache.nth[F]) {');
  SL.Add('      return Selectors.Cache.nth[F];');
  SL.Add('    }');
  SL.Add('    var C = F.match(/^([+-]?\d*)?([a-z]+)?([+-]?\d*)?$/);');
  SL.Add('    if (!C) {');
  SL.Add('      return false;');
  SL.Add('    }');
  SL.Add('    var E = parseInt(C[1]);');
  SL.Add('    var B = (E || E === 0) ? E : 1;');
  SL.Add('    var D = C[2] || false;');
  SL.Add('    var A = parseInt(C[3]) || 0;');
  SL.Add('    if (B != 0) {');
  SL.Add('      A--;');
  SL.Add('      while (A < 1) {');
  SL.Add('        A += B;');
  SL.Add('      }');
  SL.Add('      while (A >= B) {');
  SL.Add('        A -= B;');
  SL.Add('      }');
  SL.Add('    } else {');
  SL.Add('      B = A;');
  SL.Add('      D = "index";');
  SL.Add('    }');
  SL.Add('    switch (D) {');
  SL.Add('      case "n":');
  SL.Add('        C = {');
  SL.Add('          a: B,');
  SL.Add('          b: A,');
  SL.Add('          special: "n"');
  SL.Add('        };');
  SL.Add('        break;');
  SL.Add('      case "odd":');
  SL.Add('        C = {');
  SL.Add('          a: 2,');
  SL.Add('          b: 0,');
  SL.Add('          special: "n"');
  SL.Add('        };');
  SL.Add('        break;');
  SL.Add('      case "even":');
  SL.Add('        C = {');
  SL.Add('          a: 2,');
  SL.Add('          b: 1,');
  SL.Add('          special: "n"');
  SL.Add('        };');
  SL.Add('        break;');
  SL.Add('      case "first":');
  SL.Add('        C = {');
  SL.Add('          a: 0,');
  SL.Add('          special: "index"');
  SL.Add('        };');
  SL.Add('        break;');
  SL.Add('      case "last":');
  SL.Add('        C = {');
  SL.Add('          special: "last-child"');
  SL.Add('        };');
  SL.Add('        break;');
  SL.Add('      case "only":');
  SL.Add('        C = {');
  SL.Add('          special: "only-child"');
  SL.Add('        };');
  SL.Add('        break;');
  SL.Add('      default:');
  SL.Add('        C = {');
  SL.Add('          a: (B - 1),');
  SL.Add('          special: "index"');
  SL.Add('        };');
  SL.Add('    }');
  SL.Add('    return Selectors.Cache.nth[F] = C;');
  SL.Add('  },');
  SL.Add('  parseSelector: function(E) {');
  SL.Add('    if (Selectors.Cache.parsed[E]) {');
  SL.Add('      return Selectors.Cache.parsed[E];');
  SL.Add('    }');
  SL.Add('    var D, H = {');
  SL.Add('      classes: [],');
  SL.Add('      pseudos: [],');
  SL.Add('      attributes: []');
  SL.Add('    };');
  SL.Add('    while ((D = Selectors.RegExps.combined.exec(E))) {');
  SL.Add('      var I = D[1],');
  SL.Add('        G = D[2],');
  SL.Add('        F = D[3],');
  SL.Add('        B = D[4],');
  SL.Add('        C = D[5],');
  SL.Add('        J = D[6];');
  SL.Add('      if (I) {');
  SL.Add('        H.classes.push(I);');
  SL.Add('      } else {');
  SL.Add('        if (C) {');
  SL.Add('          var A = Selectors.Pseudo.get(C);');
  SL.Add('          if (A) {');
  SL.Add('            H.pseudos.push({');
  SL.Add('              parser: A,');
  SL.Add('              argument: J');
  SL.Add('            });');
  SL.Add('          } else {');
  SL.Add('            H.attributes.push({');
  SL.Add('              name: C,');
  SL.Add('              operator: "=",');
  SL.Add('              value: J');
  SL.Add('            });');
  SL.Add('          }');
  SL.Add('        } else {');
  SL.Add('          if (G) {');
  SL.Add('            H.attributes.push({');
  SL.Add('              name: G,');
  SL.Add('              operator: F,');
  SL.Add('              value: B');
  SL.Add('            });');
  SL.Add('          }');
  SL.Add('        }');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    if (!H.classes.length) {');
  SL.Add('      delete H.classes;');
  SL.Add('    }');
  SL.Add('    if (!H.attributes.length) {');
  SL.Add('      delete H.attributes;');
  SL.Add('    }');
  SL.Add('    if (!H.pseudos.length) {');
  SL.Add('      delete H.pseudos;');
  SL.Add('    }');
  SL.Add('    if (!H.classes && !H.attributes && !H.pseudos) {');
  SL.Add('      H = null;');
  SL.Add('    }');
  SL.Add('    return Selectors.Cache.parsed[E] = H;');
  SL.Add('  },');
  SL.Add('  parseTagAndID: function(B) {');
  SL.Add('    var A = B.match(Selectors.RegExps.tag);');
  SL.Add('    var C = B.match(Selectors.RegExps.id);');
  SL.Add('    return [(A) ? A[1] : "*", (C) ? C[1] : false];');
  SL.Add('  },');
  SL.Add('  filter: function(F, C, E) {');
  SL.Add('    var D;');
  SL.Add('    if (C.classes) {');
  SL.Add('      for (D = C.classes.length; D--; D) {');
  SL.Add('        var G = C.classes[D];');
  SL.Add('        if (!Selectors.Filters.byClass(F, G)) {');
  SL.Add('          return false;');
  SL.Add('        }');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    if (C.attributes) {');
  SL.Add('      for (D = C.attributes.length; D--; D) {');
  SL.Add('        var B = C.attributes[D];');
  SL.Add('        if (!Selectors.Filters.byAttribute(F, B.name, B.operator,');
  SL.Add('            B.value)) {');
  SL.Add('          return false;');
  SL.Add('        }');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    if (C.pseudos) {');
  SL.Add('      for (D = C.pseudos.length; D--; D) {');
  SL.Add('        var A = C.pseudos[D];');
  SL.Add('        if (!Selectors.Filters.byPseudo(F, A.parser, A.argument,');
  SL.Add('            E)) {');
  SL.Add('          return false;');
  SL.Add('        }');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return true;');
  SL.Add('  },');
  SL.Add('  getByTagAndID: function(B, A, D) {');
  SL.Add('    if (D) {');
  SL.Add('      var C = (B.getElementById) ? B.getElementById(D, true) :');
  SL.Add('        Element.getElementById(B, D, true);');
  SL.Add('      return (C && Selectors.Filters.byTag(C, A)) ? [C] : [];');
  SL.Add('    } else {');
  SL.Add('      return B.getElementsByTagName(A);');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add('  search: function(J, I, O) {');
  SL.Add('    var B = [];');
  SL.Add('    var C = I.trim()');
  SL.Add('      .replace(Selectors.RegExps.splitter, function(Z,');
  SL.Add('        Y, X) {');
  SL.Add('        B.push(Y);');
  SL.Add('        return ":)" + X;');
  SL.Add('      })');
  SL.Add('      .split(":)");');
  SL.Add('    var K, F, E, V;');
  SL.Add('    for (var U = 0, Q = C.length; U < Q; U++) {');
  SL.Add('      var T = C[U];');
  SL.Add('      if (U == 0 && Selectors.RegExps.quick.test(T)) {');
  SL.Add('        K = J.getElementsByTagName(T);');
  SL.Add('        continue;');
  SL.Add('      }');
  SL.Add('      var A = B[U - 1];');
  SL.Add('      var L = Selectors.Utils.parseTagAndID(T);');
  SL.Add('      var W = L[0],');
  SL.Add('        M = L[1];');
  SL.Add('      if (U == 0) {');
  SL.Add('        K = Selectors.Utils.getByTagAndID(J, W, M);');
  SL.Add('      } else {');
  SL.Add('        var D = {},');
  SL.Add('          H = [];');
  SL.Add('        for (var S = 0, R = K.length; S < R; S++) {');
  SL.Add('          H = Selectors.Getters[A](H, K[S], W, M, D);');
  SL.Add('        }');
  SL.Add('        K = H;');
  SL.Add('      }');
  SL.Add('      var G = Selectors.Utils.parseSelector(T);');
  SL.Add('      if (G) {');
  SL.Add('        E = [];');
  SL.Add('        for (var P = 0, N = K.length; P < N; P++) {');
  SL.Add('          V = K[P];');
  SL.Add('          if (Selectors.Utils.filter(V, G, O)) {');
  SL.Add('            E.push(V);');
  SL.Add('          }');
  SL.Add('        }');
  SL.Add('        K = E;');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return K;');
  SL.Add('  }');
  SL.Add('};');
  SL.Add('Selectors.Getters = {');
  SL.Add('  " ": function(H, G, I, A, E) {');
  SL.Add('    var D = Selectors.Utils.getByTagAndID(G, I, A);');
  SL.Add('    for (var C = 0, B = D.length; C < B; C++) {');
  SL.Add('      var F = D[C];');
  SL.Add('      if (Selectors.Utils.chk(F, E)) {');
  SL.Add('        H.push(F);');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return H;');
  SL.Add('  },');
  SL.Add('  ">": function(H, G, I, A, F) {');
  SL.Add('    var C = Selectors.Utils.getByTagAndID(G, I, A);');
  SL.Add('    for (var E = 0, D = C.length; E < D; E++) {');
  SL.Add('      var B = C[E];');
  SL.Add('      if (B.parentNode == G && Selectors.Utils.chk(B, F)) {');
  SL.Add('        H.push(B);');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return H;');
  SL.Add('  },');
  SL.Add('  "+": function(C, B, A, E, D) {');
  SL.Add('    while ((B = B.nextSibling)) {');
  SL.Add('      if (B.nodeType == 1) {');
  SL.Add('        if (Selectors.Utils.chk(B, D) && Selectors.Filters.byTag(');
  SL.Add('            B, A) && Selectors.Filters.byID(B, E)) {');
  SL.Add('          C.push(B);');
  SL.Add('        }');
  SL.Add('        break;');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return C;');
  SL.Add('  },');
  SL.Add('  "~": function(C, B, A, E, D) {');
  SL.Add('    while ((B = B.nextSibling)) {');
  SL.Add('      if (B.nodeType == 1) {');
  SL.Add('        if (!Selectors.Utils.chk(B, D)) {');
  SL.Add('          break;');
  SL.Add('        }');
  SL.Add('        if (Selectors.Filters.byTag(B, A) && Selectors.Filters.byID(');
  SL.Add('            B, E)) {');
  SL.Add('          C.push(B);');
  SL.Add('        }');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return C;');
  SL.Add('  }');
  SL.Add('};');
  SL.Add('Selectors.Filters = {');
  SL.Add('  byTag: function(B, A) {');
  SL.Add('    return (A == "*" || (B.tagName && B.tagName.toLowerCase() == A));');
  SL.Add('  },');
  SL.Add('  byID: function(A, B) {');
  SL.Add('    return (!B || (A.id && A.id == B));');
  SL.Add('  },');
  SL.Add('  byClass: function(B, A) {');
  SL.Add('    return (B.className && B.className.contains(A, " "));');
  SL.Add('  },');
  SL.Add('  byPseudo: function(A, D, C, B) {');
  SL.Add('    return D.call(A, C, B);');
  SL.Add('  },');
  SL.Add('  byAttribute: function(C, D, B, E) {');
  SL.Add('    var A = Element.prototype.getProperty.call(C, D);');
  SL.Add('    if (!A) {');
  SL.Add('      return false;');
  SL.Add('    }');
  SL.Add('    if (!B || E == undefined) {');
  SL.Add('      return true;');
  SL.Add('    }');
  SL.Add('    switch (B) {');
  SL.Add('      case "=":');
  SL.Add('        return (A == E);');
  SL.Add('      case "*=":');
  SL.Add('        return (A.contains(E));');
  SL.Add('      case "^=":');
  SL.Add('        return (A.substr(0, E.length) == E);');
  SL.Add('      case "$=":');
  SL.Add('        return (A.substr(A.length - E.length) == E);');
  SL.Add('      case "!=":');
  SL.Add('        return (A != E);');
  SL.Add('      case "~=":');
  SL.Add('        return A.contains(E, " ");');
  SL.Add('      case "|=":');
  SL.Add('        return A.contains(E, "-");');
  SL.Add('    }');
  SL.Add('    return false;');
  SL.Add('  }');
  SL.Add('};');
  SL.Add('Selectors.Pseudo = new Hash({');
  SL.Add('  empty: function() {');
  SL.Add('    return !(this.innerText || this.textContent || "")');
  SL.Add('      .length;');
  SL.Add('  },');
  SL.Add('  not: function(A) {');
  SL.Add('    return !Element.match(this, A);');
  SL.Add('  },');
  SL.Add('  contains: function(A) {');
  SL.Add('    return (this.innerText || this.textContent || "")');
  SL.Add('      .contains(');
  SL.Add('        A);');
  SL.Add('  },');
  SL.Add('  "first-child": function() {');
  SL.Add('    return Selectors.Pseudo.index.call(this, 0);');
  SL.Add('  },');
  SL.Add('  "last-child": function() {');
  SL.Add('    var A = this;');
  SL.Add('    while ((A = A.nextSibling)) {');
  SL.Add('      if (A.nodeType == 1) {');
  SL.Add('        return false;');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return true;');
  SL.Add('  },');
  SL.Add('  "only-child": function() {');
  SL.Add('    var B = this;');
  SL.Add('    while ((B = B.previousSibling)) {');
  SL.Add('      if (B.nodeType == 1) {');
  SL.Add('        return false;');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    var A = this;');
  SL.Add('    while ((A = A.nextSibling)) {');
  SL.Add('      if (A.nodeType == 1) {');
  SL.Add('        return false;');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return true;');
  SL.Add('  },');
  SL.Add('  "nth-child": function(G, E) {');
  SL.Add('    G = (G == undefined) ? "n" : G;');
  SL.Add('    var C = Selectors.Utils.parseNthArgument(G);');
  SL.Add('    if (C.special != "n") {');
  SL.Add('      return Selectors.Pseudo[C.special].call(this, C.a, E);');
  SL.Add('    }');
  SL.Add('    var F = 0;');
  SL.Add('    E.positions = E.positions || {};');
  SL.Add('    var D = $uid(this);');
  SL.Add('    if (!E.positions[D]) {');
  SL.Add('      var B = this;');
  SL.Add('      while ((B = B.previousSibling)) {');
  SL.Add('        if (B.nodeType != 1) {');
  SL.Add('          continue;');
  SL.Add('        }');
  SL.Add('        F++;');
  SL.Add('        var A = E.positions[$uid(B)];');
  SL.Add('        if (A != undefined) {');
  SL.Add('          F = A + F;');
  SL.Add('          break;');
  SL.Add('        }');
  SL.Add('      }');
  SL.Add('      E.positions[D] = F;');
  SL.Add('    }');
  SL.Add('    return (E.positions[D] % C.a == C.b);');
  SL.Add('  },');
  SL.Add('  index: function(A) {');
  SL.Add('    var B = this,');
  SL.Add('      C = 0;');
  SL.Add('    while ((B = B.previousSibling)) {');
  SL.Add('      if (B.nodeType == 1 && ++C > A) {');
  SL.Add('        return false;');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return (C == A);');
  SL.Add('  },');
  SL.Add('  even: function(B, A) {');
  SL.Add('    return Selectors.Pseudo["nth-child"].call(this, "2n+1", A);');
  SL.Add('  },');
  SL.Add('  odd: function(B, A) {');
  SL.Add('    return Selectors.Pseudo["nth-child"].call(this, "2n", A);');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Element.Events.domready = {');
  SL.Add('  onAdd: function(A) {');
  SL.Add('    if (Browser.loaded) {');
  SL.Add('      A.call(this);');
  SL.Add('    }');
  SL.Add('  }');
  SL.Add('};');
  SL.Add('(function() {');
  SL.Add('  var B = function() {');
  SL.Add('    if (Browser.loaded) {');
  SL.Add('      return;');
  SL.Add('    }');
  SL.Add('    Browser.loaded = true;');
  SL.Add('    window.fireEvent("domready");');
  SL.Add('    document.fireEvent("domready");');
  SL.Add('  };');
  SL.Add('  switch (Browser.Engine.name) {');
  SL.Add('    case "webkit":');
  SL.Add('      (function() {');
  SL.Add('        (["loaded", "complete"].contains(document.readyState)) ?');
  SL.Add('        B(): arguments.callee.delay(50);');
  SL.Add('      })();');
  SL.Add('      break;');
  SL.Add('    case "trident":');
  SL.Add('      var A = document.createElement("div");');
  SL.Add('      (function() {');
  SL.Add('        ($try(function() {');
  SL.Add('          A.doScroll("left");');
  SL.Add('          return $(A)');
  SL.Add('            .inject(document.body)');
  SL.Add('            .set(');
  SL.Add('              "html", "temp")');
  SL.Add('            .dispose();');
  SL.Add('        })) ? B(): arguments.callee.delay(50);');
  SL.Add('      })();');
  SL.Add('      break;');
  SL.Add('    default:');
  SL.Add('      window.addEvent("load", B);');
  SL.Add('      document.addEvent("DOMContentLoaded", B);');
  SL.Add('  }');
  SL.Add('})();');
  SL.Add('var JSON = new Hash({');
  SL.Add('  encode: function(B) {');
  SL.Add('    switch ($type(B)) {');
  SL.Add('      case "string":');
  SL.Add('        return "\"" + B.replace(/[\x00-\x1f\\"]/g, JSON.$replaceChars) +');
  SL.Add('          "\"";');
  SL.Add('      case "array":');
  SL.Add('        return "[" + String(B.map(JSON.encode)');
  SL.Add('          .filter(');
  SL.Add('            $defined)) + "]";');
  SL.Add('      case "object":');
  SL.Add('      case "hash":');
  SL.Add('        var A = [];');
  SL.Add('        Hash.each(B, function(E, D) {');
  SL.Add('          var C = JSON.encode(E);');
  SL.Add('          if (C) {');
  SL.Add('            A.push(JSON.encode(D) + ":" + C);');
  SL.Add('          }');
  SL.Add('        });');
  SL.Add('        return "{" + A + "}";');
  SL.Add('      case "number":');
  SL.Add('      case "boolean":');
  SL.Add('        return String(B);');
  SL.Add('      case false:');
  SL.Add('        return "null";');
  SL.Add('    }');
  SL.Add('    return null;');
  SL.Add('  },');
  SL.Add('  $specialChars: {');
  SL.Add('    "\b": "\\b",');
  SL.Add('    "\t": "\\t",');
  SL.Add('    "\n": "\\n",');
  SL.Add('    "\f": "\\f",');
  SL.Add('    "\r": "\\r",');
  SL.Add('    "\"": "\\\"",');
  SL.Add('    "\\": "\\\\"');
  SL.Add('  },');
  SL.Add('  $replaceChars: function(A) {');
  SL.Add('    return JSON.$specialChars[A] || "\\u00" + Math.floor(A.charCodeAt() /');
  SL.Add('        16)');
  SL.Add('      .toString(16) + (A.charCodeAt() % 16)');
  SL.Add('      .toString(');
  SL.Add('        16);');
  SL.Add('  },');
  SL.Add('  decode: function(string, secure) {');
  SL.Add('    if ($type(string) != "string" || !string.length) {');
  SL.Add('      return null;');
  SL.Add('    }');
  SL.Add('    if (secure && !(/^[,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]*$/)');
  SL.Add('      .test(');
  SL.Add('        string.replace(/\\./g, "@")');
  SL.Add('        .replace(');
  SL.Add('          /"[^"\\\n\r]*"/g, ""))) {');
  SL.Add('      return null;');
  SL.Add('    }');
  SL.Add('    return eval("(" + string + ")");');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Native.implement([Hash, Array, String, Number], {');
  SL.Add('  toJSON: function() {');
  SL.Add('    return JSON.encode(this);');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('var Cookie = new Class({');
  SL.Add('  Implements: Options,');
  SL.Add('  options: {');
  SL.Add('    path: false,');
  SL.Add('    domain: false,');
  SL.Add('    duration: false,');
  SL.Add('    secure: false,');
  SL.Add('    document: document');
  SL.Add('  },');
  SL.Add('  initialize: function(B, A) {');
  SL.Add('    this.key = B;');
  SL.Add('    this.setOptions(A);');
  SL.Add('  },');
  SL.Add('  write: function(B) {');
  SL.Add('    B = encodeURIComponent(B);');
  SL.Add('    if (this.options.domain) {');
  SL.Add('      B += "; domain=" + this.options.domain;');
  SL.Add('    }');
  SL.Add('    if (this.options.path) {');
  SL.Add('      B += "; path=" + this.options.path;');
  SL.Add('    }');
  SL.Add('    if (this.options.duration) {');
  SL.Add('      var A = new Date();');
  SL.Add('      A.setTime(A.getTime() + this.options.duration * 24 * 60 *');
  SL.Add('        60 * 1000);');
  SL.Add('      B += "; expires=" + A.toGMTString();');
  SL.Add('    }');
  SL.Add('    if (this.options.secure) {');
  SL.Add('      B += "; secure";');
  SL.Add('    }');
  SL.Add('    this.options.document.cookie = this.key + "=" + B;');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  read: function() {');
  SL.Add('    var A = this.options.document.cookie.match("(?:^|;)\\s*" +');
  SL.Add('      this.key.escapeRegExp() + "=([^;]*)");');
  SL.Add('    return (A) ? decodeURIComponent(A[1]) : null;');
  SL.Add('  },');
  SL.Add('  dispose: function() {');
  SL.Add('    new Cookie(this.key, $merge(this.options, {');
  SL.Add('        duration: -1');
  SL.Add('      }))');
  SL.Add('      .write("");');
  SL.Add('    return this;');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Cookie.write = function(B, C, A) {');
  SL.Add('  return new Cookie(B, A)');
  SL.Add('    .write(C);');
  SL.Add('};');
  SL.Add('Cookie.read = function(A) {');
  SL.Add('  return new Cookie(A)');
  SL.Add('    .read();');
  SL.Add('};');
  SL.Add('Cookie.dispose = function(B, A) {');
  SL.Add('  return new Cookie(B, A)');
  SL.Add('    .dispose();');
  SL.Add('};');
  SL.Add('var Swiff = new Class({');
  SL.Add('  Implements: [Options],');
  SL.Add('  options: {');
  SL.Add('    id: null,');
  SL.Add('    height: 1,');
  SL.Add('    width: 1,');
  SL.Add('    container: null,');
  SL.Add('    properties: {},');
  SL.Add('    params: {');
  SL.Add('      quality: "high",');
  SL.Add('      allowScriptAccess: "always",');
  SL.Add('      wMode: "transparent",');
  SL.Add('      swLiveConnect: true');
  SL.Add('    },');
  SL.Add('    callBacks: {},');
  SL.Add('    vars: {}');
  SL.Add('  },');
  SL.Add('  toElement: function() {');
  SL.Add('    return this.object;');
  SL.Add('  },');
  SL.Add('  initialize: function(L, M) {');
  SL.Add('    this.instance = "Swiff_" + $time();');
  SL.Add('    this.setOptions(M);');
  SL.Add('    M = this.options;');
  SL.Add('    var B = this.id = M.id || this.instance;');
  SL.Add('    var A = $(M.container);');
  SL.Add('    Swiff.CallBacks[this.instance] = {};');
  SL.Add('    var E = M.params,');
  SL.Add('      G = M.vars,');
  SL.Add('      F = M.callBacks;');
  SL.Add('    var H = $extend({');
  SL.Add('      height: M.height,');
  SL.Add('      width: M.width');
  SL.Add('    }, M.properties);');
  SL.Add('    var K = this;');
  SL.Add('    for (var D in F) {');
  SL.Add('      Swiff.CallBacks[this.instance][D] = (function(N) {');
  SL.Add('        return function() {');
  SL.Add('          return N.apply(K.object, arguments);');
  SL.Add('        };');
  SL.Add('      })(F[D]);');
  SL.Add('      G[D] = "Swiff.CallBacks." + this.instance + "." + D;');
  SL.Add('    }');
  SL.Add('    E.flashVars = Hash.toQueryString(G);');
  SL.Add('    /*  //kt');
  SL.Add('    if (Browser.Engine.trident) {');
  SL.Add('      H.classid =');
  SL.Add('        "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000";');
  SL.Add('      E.movie = L;');
  SL.Add('    } else {');
  SL.Add('      H.type = "application/x-shockwave-flash";');
  SL.Add('      H.data = L;');
  SL.Add('    }');
  SL.Add('    */');
  SL.Add('    var J = "<object id=\"" + B + "\"";');
  SL.Add('    for (var I in H) {');
  SL.Add('      J += " " + I + "=\"" + H[I] + "\"";');
  SL.Add('    }');
  SL.Add('    J += ">";');
  SL.Add('    for (var C in E) {');
  SL.Add('      if (E[C]) {');
  SL.Add('        J += "<param name=\"" + C + "\" value=\"" + E[C] +');
  SL.Add('          "\" />";');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    J += "</object>";');
  SL.Add('    this.object = ((A) ? A.empty() : new Element("div"))');
  SL.Add('      .set(');
  SL.Add('        "html", J)');
  SL.Add('      .firstChild;');
  SL.Add('  },');
  SL.Add('  replaces: function(A) {');
  SL.Add('    A = $(A, true);');
  SL.Add('    A.parentNode.replaceChild(this.toElement(), A);');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  inject: function(A) {');
  SL.Add('    $(A, true)');
  SL.Add('      .appendChild(this.toElement());');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  remote: function() {');
  SL.Add('    return Swiff.remote.apply(Swiff, [this.toElement()].extend(');
  SL.Add('      arguments));');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Swiff.CallBacks = {};');
  SL.Add('/*  //kt');
  SL.Add('Swiff.remote = function(obj, fn) {');
  SL.Add('  var rs = obj.CallFunction("<invoke name=\"" + fn +');
  SL.Add('    "\" returntype=\"javascript\">" + __flash__argumentsToXML(');
  SL.Add('      arguments, 2) + "</invoke>");');
  SL.Add('  return eval(rs);');
  SL.Add('};');
  SL.Add('*/');
  SL.Add('var Fx = new Class({');
  SL.Add('  Implements: [Chain, Events, Options],');
  SL.Add('  options: {');
  SL.Add('    fps: 50,');
  SL.Add('    unit: false,');
  SL.Add('    duration: 500,');
  SL.Add('    link: "ignore",');
  SL.Add('    transition: function(A) {');
  SL.Add('      return -(Math.cos(Math.PI * A) - 1) / 2;');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add('  initialize: function(A) {');
  SL.Add('    this.subject = this.subject || this;');
  SL.Add('    this.setOptions(A);');
  SL.Add('    this.options.duration = Fx.Durations[this.options.duration] ||');
  SL.Add('      this.options.duration.toInt();');
  SL.Add('    var B = this.options.wait;');
  SL.Add('    if (B === false) {');
  SL.Add('      this.options.link = "cancel";');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add('  step: function() {');
  SL.Add('    var A = $time();');
  SL.Add('    if (A < this.time + this.options.duration) {');
  SL.Add('      var B = this.options.transition((A - this.time) / this.options');
  SL.Add('        .duration);');
  SL.Add('      this.set(this.compute(this.from, this.to, B));');
  SL.Add('    } else {');
  SL.Add('      this.set(this.compute(this.from, this.to, 1));');
  SL.Add('      this.complete();');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add('  set: function(A) {');
  SL.Add('    return A;');
  SL.Add('  },');
  SL.Add('  compute: function(C, B, A) {');
  SL.Add('    return Fx.compute(C, B, A);');
  SL.Add('  },');
  SL.Add('  check: function(A) {');
  SL.Add('    if (!this.timer) {');
  SL.Add('      return true;');
  SL.Add('    }');
  SL.Add('    switch (this.options.link) {');
  SL.Add('      case "cancel":');
  SL.Add('        this.cancel();');
  SL.Add('        return true;');
  SL.Add('      case "chain":');
  SL.Add('        this.chain(A.bind(this, Array.slice(arguments, 1)));');
  SL.Add('        return false;');
  SL.Add('    }');
  SL.Add('    return false;');
  SL.Add('  },');
  SL.Add('  start: function(B, A) {');
  SL.Add('    if (!this.check(arguments.callee, B, A)) {');
  SL.Add('      return this;');
  SL.Add('    }');
  SL.Add('    this.from = B;');
  SL.Add('    this.to = A;');
  SL.Add('    this.time = 0;');
  SL.Add('    this.startTimer();');
  SL.Add('    this.onStart();');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  complete: function() {');
  SL.Add('    if (this.stopTimer()) {');
  SL.Add('      this.onComplete();');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  cancel: function() {');
  SL.Add('    if (this.stopTimer()) {');
  SL.Add('      this.onCancel();');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  onStart: function() {');
  SL.Add('    this.fireEvent("start", this.subject);');
  SL.Add('  },');
  SL.Add('  onComplete: function() {');
  SL.Add('    this.fireEvent("complete", this.subject);');
  SL.Add('    if (!this.callChain()) {');
  SL.Add('      this.fireEvent("chainComplete", this.subject);');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add('  onCancel: function() {');
  SL.Add('    this.fireEvent("cancel", this.subject)');
  SL.Add('      .clearChain();');
  SL.Add('  },');
  SL.Add('  pause: function() {');
  SL.Add('    this.stopTimer();');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  resume: function() {');
  SL.Add('    this.startTimer();');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  stopTimer: function() {');
  SL.Add('    if (!this.timer) {');
  SL.Add('      return false;');
  SL.Add('    }');
  SL.Add('    this.time = $time() - this.time;');
  SL.Add('    this.timer = $clear(this.timer);');
  SL.Add('    return true;');
  SL.Add('  },');
  SL.Add('  startTimer: function() {');
  SL.Add('    if (this.timer) {');
  SL.Add('      return false;');
  SL.Add('    }');
  SL.Add('    this.time = $time() - this.time;');
  SL.Add('    this.timer = this.step.periodical(Math.round(1000 / this.options');
  SL.Add('      .fps), this);');
  SL.Add('    return true;');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Fx.compute = function(C, B, A) {');
  SL.Add('  return (B - C) * A + C;');
  SL.Add('};');
  SL.Add('Fx.Durations = {');
  SL.Add('  "short": 250,');
  SL.Add('  normal: 500,');
  SL.Add('  "long": 1000');
  SL.Add('};');
  SL.Add('Fx.CSS = new Class({');
  SL.Add('  Extends: Fx,');
  SL.Add('  prepare: function(D, E, B) {');
  SL.Add('    B = $splat(B);');
  SL.Add('    var C = B[1];');
  SL.Add('    if (!$chk(C)) {');
  SL.Add('      B[1] = B[0];');
  SL.Add('      B[0] = D.getStyle(E);');
  SL.Add('    }');
  SL.Add('    var A = B.map(this.parse);');
  SL.Add('    return {');
  SL.Add('      from: A[0],');
  SL.Add('      to: A[1]');
  SL.Add('    };');
  SL.Add('  },');
  SL.Add('  parse: function(A) {');
  SL.Add('    A = $lambda(A)();');
  SL.Add('    A = (typeof A == "string") ? A.split(" ") : $splat(A);');
  SL.Add('    return A.map(function(C) {');
  SL.Add('      C = String(C);');
  SL.Add('      var B = false;');
  SL.Add('      Fx.CSS.Parsers.each(function(F, E) {');
  SL.Add('        if (B) {');
  SL.Add('          return;');
  SL.Add('        }');
  SL.Add('        var D = F.parse(C);');
  SL.Add('        if ($chk(D)) {');
  SL.Add('          B = {');
  SL.Add('            value: D,');
  SL.Add('            parser: F');
  SL.Add('          };');
  SL.Add('        }');
  SL.Add('      });');
  SL.Add('      B = B || {');
  SL.Add('        value: C,');
  SL.Add('        parser: Fx.CSS.Parsers.String');
  SL.Add('      };');
  SL.Add('      return B;');
  SL.Add('    });');
  SL.Add('  },');
  SL.Add('  compute: function(D, C, B) {');
  SL.Add('    var A = [];');
  SL.Add('    (Math.min(D.length, C.length))');
  SL.Add('    .times(function(E) {');
  SL.Add('      A.push({');
  SL.Add('        value: D[E].parser.compute(D[E].value,');
  SL.Add('          C[E].value, B),');
  SL.Add('        parser: D[E].parser');
  SL.Add('      });');
  SL.Add('    });');
  SL.Add('    A.$family = {');
  SL.Add('      name: "fx:css:value"');
  SL.Add('    };');
  SL.Add('    return A;');
  SL.Add('  },');
  SL.Add('  serve: function(C, B) {');
  SL.Add('    if ($type(C) != "fx:css:value") {');
  SL.Add('      C = this.parse(C);');
  SL.Add('    }');
  SL.Add('    var A = [];');
  SL.Add('    C.each(function(D) {');
  SL.Add('      A = A.concat(D.parser.serve(D.value, B));');
  SL.Add('    });');
  SL.Add('    return A;');
  SL.Add('  },');
  SL.Add('  render: function(A, D, C, B) {');
  SL.Add('    A.setStyle(D, this.serve(C, B));');
  SL.Add('  },');
  SL.Add('  search: function(A) {');
  SL.Add('    if (Fx.CSS.Cache[A]) {');
  SL.Add('      return Fx.CSS.Cache[A];');
  SL.Add('    }');
  SL.Add('    var B = {};');
  SL.Add('    Array.each(document.styleSheets, function(E, D) {');
  SL.Add('      var C = E.href;');
  SL.Add('      if (C && C.contains(":/") && !C.contains(');
  SL.Add('          document.domain)) {');
  SL.Add('        return;');
  SL.Add('      }');
  SL.Add('      var F = E.rules || E.cssRules;');
  SL.Add('      Array.each(F, function(I, G) {');
  SL.Add('        if (!I.style) {');
  SL.Add('          return;');
  SL.Add('        }');
  SL.Add('        var H = (I.selectorText) ? I.selectorText');
  SL.Add('          .replace(/^\w+/, function(J) {');
  SL.Add('            return J.toLowerCase();');
  SL.Add('          }) : null;');
  SL.Add('        if (!H || !H.test("^" + A + "$")) {');
  SL.Add('          return;');
  SL.Add('        }');
  SL.Add('        Element.Styles.each(function(K, J) {');
  SL.Add('          if (!I.style[J] ||');
  SL.Add('            Element.ShortStyles[');
  SL.Add('              J]) {');
  SL.Add('            return;');
  SL.Add('          }');
  SL.Add('          K = String(I.style[J]);');
  SL.Add('          B[J] = (K.test(/^rgb/)) ?');
  SL.Add('            K.rgbToHex() : K;');
  SL.Add('        });');
  SL.Add('      });');
  SL.Add('    });');
  SL.Add('    return Fx.CSS.Cache[A] = B;');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Fx.CSS.Cache = {};');
  SL.Add('Fx.CSS.Parsers = new Hash({');
  SL.Add('  Color: {');
  SL.Add('    parse: function(A) {');
  SL.Add('      if (A.match(/^#[0-9a-f]{3,6}$/i)) {');
  SL.Add('        return A.hexToRgb(true);');
  SL.Add('      }');
  SL.Add('      return ((A = A.match(/(\d+),\s*(\d+),\s*(\d+)/))) ? [A[');
  SL.Add('        1], A[2], A[3]] : false;');
  SL.Add('    },');
  SL.Add('    compute: function(C, B, A) {');
  SL.Add('      return C.map(function(E, D) {');
  SL.Add('        return Math.round(Fx.compute(C[D], B[D], A));');
  SL.Add('      });');
  SL.Add('    },');
  SL.Add('    serve: function(A) {');
  SL.Add('      return A.map(Number);');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add('  Number: {');
  SL.Add('    parse: parseFloat,');
  SL.Add('    compute: Fx.compute,');
  SL.Add('    serve: function(B, A) {');
  SL.Add('      return (A) ? B + A : B;');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add('  String: {');
  SL.Add('    parse: $lambda(false),');
  SL.Add('    compute: $arguments(1),');
  SL.Add('    serve: $arguments(0)');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Fx.Tween = new Class({');
  SL.Add('  Extends: Fx.CSS,');
  SL.Add('  initialize: function(B, A) {');
  SL.Add('    this.element = this.subject = $(B);');
  SL.Add('    this.parent(A);');
  SL.Add('  },');
  SL.Add('  set: function(B, A) {');
  SL.Add('    if (arguments.length == 1) {');
  SL.Add('      A = B;');
  SL.Add('      B = this.property || this.options.property;');
  SL.Add('    }');
  SL.Add('    this.render(this.element, B, A, this.options.unit);');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  start: function(C, E, D) {');
  SL.Add('    if (!this.check(arguments.callee, C, E, D)) {');
  SL.Add('      return this;');
  SL.Add('    }');
  SL.Add('    var B = Array.flatten(arguments);');
  SL.Add('    this.property = this.options.property || B.shift();');
  SL.Add('    var A = this.prepare(this.element, this.property, B);');
  SL.Add('    return this.parent(A.from, A.to);');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Element.Properties.tween = {');
  SL.Add('  set: function(A) {');
  SL.Add('    var B = this.retrieve("tween");');
  SL.Add('    if (B) {');
  SL.Add('      B.cancel();');
  SL.Add('    }');
  SL.Add('    return this.eliminate("tween")');
  SL.Add('      .store("tween:options", $extend({');
  SL.Add('        link: "cancel"');
  SL.Add('      }, A));');
  SL.Add('  },');
  SL.Add('  get: function(A) {');
  SL.Add('    if (A || !this.retrieve("tween")) {');
  SL.Add('      if (A || !this.retrieve("tween:options")) {');
  SL.Add('        this.set("tween", A);');
  SL.Add('      }');
  SL.Add('      this.store("tween", new Fx.Tween(this, this.retrieve(');
  SL.Add('        "tween:options")));');
  SL.Add('    }');
  SL.Add('    return this.retrieve("tween");');
  SL.Add('  }');
  SL.Add('};');
  SL.Add('Element.implement({');
  SL.Add('  tween: function(A, C, B) {');
  SL.Add('    this.get("tween")');
  SL.Add('      .start(arguments);');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  fade: function(C) {');
  SL.Add('    var E = this.get("tween"),');
  SL.Add('      D = "opacity",');
  SL.Add('      A;');
  SL.Add('    C = $pick(C, "toggle");');
  SL.Add('    switch (C) {');
  SL.Add('      case "in":');
  SL.Add('        E.start(D, 1);');
  SL.Add('        break;');
  SL.Add('      case "out":');
  SL.Add('        E.start(D, 0);');
  SL.Add('        break;');
  SL.Add('      case "show":');
  SL.Add('        E.set(D, 1);');
  SL.Add('        break;');
  SL.Add('      case "hide":');
  SL.Add('        E.set(D, 0);');
  SL.Add('        break;');
  SL.Add('      case "toggle":');
  SL.Add('        var B = this.retrieve("fade:flag", this.get(');
  SL.Add('          "opacity") == 1);');
  SL.Add('        E.start(D, (B) ? 0 : 1);');
  SL.Add('        this.store("fade:flag", !B);');
  SL.Add('        A = true;');
  SL.Add('        break;');
  SL.Add('      default:');
  SL.Add('        E.start(D, arguments);');
  SL.Add('    }');
  SL.Add('    if (!A) {');
  SL.Add('      this.eliminate("fade:flag");');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  highlight: function(C, A) {');
  SL.Add('    if (!A) {');
  SL.Add('      A = this.retrieve("highlight:original", this.getStyle(');
  SL.Add('        "background-color"));');
  SL.Add('      A = (A == "transparent") ? "#fff" : A;');
  SL.Add('    }');
  SL.Add('    var B = this.get("tween");');
  SL.Add('    B.start("background-color", C || "#ffff88", A)');
  SL.Add('      .chain(');
  SL.Add('        function() {');
  SL.Add('          this.setStyle("background-color", this.retrieve(');
  SL.Add('            "highlight:original"));');
  SL.Add('          B.callChain();');
  SL.Add('        }.bind(this));');
  SL.Add('    return this;');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Fx.Morph = new Class({');
  SL.Add('  Extends: Fx.CSS,');
  SL.Add('  initialize: function(B, A) {');
  SL.Add('    this.element = this.subject = $(B);');
  SL.Add('    this.parent(A);');
  SL.Add('  },');
  SL.Add('  set: function(A) {');
  SL.Add('    if (typeof A == "string") {');
  SL.Add('      A = this.search(A);');
  SL.Add('    }');
  SL.Add('    for (var B in A) {');
  SL.Add('      this.render(this.element, B, A[B], this.options.unit);');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  compute: function(E, D, C) {');
  SL.Add('    var A = {};');
  SL.Add('    for (var B in E) {');
  SL.Add('      A[B] = this.parent(E[B], D[B], C);');
  SL.Add('    }');
  SL.Add('    return A;');
  SL.Add('  },');
  SL.Add('  start: function(B) {');
  SL.Add('    if (!this.check(arguments.callee, B)) {');
  SL.Add('      return this;');
  SL.Add('    }');
  SL.Add('    if (typeof B == "string") {');
  SL.Add('      B = this.search(B);');
  SL.Add('    }');
  SL.Add('    var E = {},');
  SL.Add('      D = {};');
  SL.Add('    for (var C in B) {');
  SL.Add('      var A = this.prepare(this.element, C, B[C]);');
  SL.Add('      E[C] = A.from;');
  SL.Add('      D[C] = A.to;');
  SL.Add('    }');
  SL.Add('    return this.parent(E, D);');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Element.Properties.morph = {');
  SL.Add('  set: function(A) {');
  SL.Add('    var B = this.retrieve("morph");');
  SL.Add('    if (B) {');
  SL.Add('      B.cancel();');
  SL.Add('    }');
  SL.Add('    return this.eliminate("morph")');
  SL.Add('      .store("morph:options", $extend({');
  SL.Add('        link: "cancel"');
  SL.Add('      }, A));');
  SL.Add('  },');
  SL.Add('  get: function(A) {');
  SL.Add('    if (A || !this.retrieve("morph")) {');
  SL.Add('      if (A || !this.retrieve("morph:options")) {');
  SL.Add('        this.set("morph", A);');
  SL.Add('      }');
  SL.Add('      this.store("morph", new Fx.Morph(this, this.retrieve(');
  SL.Add('        "morph:options")));');
  SL.Add('    }');
  SL.Add('    return this.retrieve("morph");');
  SL.Add('  }');
  SL.Add('};');
  SL.Add('Element.implement({');
  SL.Add('  morph: function(A) {');
  SL.Add('    this.get("morph")');
  SL.Add('      .start(A);');
  SL.Add('    return this;');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('(function() {');
  SL.Add('  var A = Fx.prototype.initialize;');
  SL.Add('  Fx.prototype.initialize = function(B) {');
  SL.Add('    A.call(this, B);');
  SL.Add('    var C = this.options.transition;');
  SL.Add('    if (typeof C == "string" && (C = C.split(":"))) {');
  SL.Add('      var D = Fx.Transitions;');
  SL.Add('      D = D[C[0]] || D[C[0].capitalize()];');
  SL.Add('      if (C[1]) {');
  SL.Add('        D = D["ease" + C[1].capitalize() + (C[2] ? C[2].capitalize() :');
  SL.Add('          "")];');
  SL.Add('      }');
  SL.Add('      this.options.transition = D;');
  SL.Add('    }');
  SL.Add('  };');
  SL.Add('})();');
  SL.Add('Fx.Transition = function(B, A) {');
  SL.Add('  A = $splat(A);');
  SL.Add('  return $extend(B, {');
  SL.Add('    easeIn: function(C) {');
  SL.Add('      return B(C, A);');
  SL.Add('    },');
  SL.Add('    easeOut: function(C) {');
  SL.Add('      return 1 - B(1 - C, A);');
  SL.Add('    },');
  SL.Add('    easeInOut: function(C) {');
  SL.Add('      return (C <= 0.5) ? B(2 * C, A) / 2 : (2 - B(2 * (1 -');
  SL.Add('        C), A)) / 2;');
  SL.Add('    }');
  SL.Add('  });');
  SL.Add('};');
  SL.Add('Fx.Transitions = new Hash({');
  SL.Add('  linear: $arguments(0)');
  SL.Add('});');
  SL.Add('Fx.Transitions.extend = function(A) {');
  SL.Add('  for (var B in A) {');
  SL.Add('    Fx.Transitions[B] = new Fx.Transition(A[B]);');
  SL.Add('  }');
  SL.Add('};');
  SL.Add('Fx.Transitions.extend({');
  SL.Add('  Pow: function(B, A) {');
  SL.Add('    return Math.pow(B, A[0] || 6);');
  SL.Add('  },');
  SL.Add('  Expo: function(A) {');
  SL.Add('    return Math.pow(2, 8 * (A - 1));');
  SL.Add('  },');
  SL.Add('  Circ: function(A) {');
  SL.Add('    return 1 - Math.sin(Math.acos(A));');
  SL.Add('  },');
  SL.Add('  Sine: function(A) {');
  SL.Add('    return 1 - Math.sin((1 - A) * Math.PI / 2);');
  SL.Add('  },');
  SL.Add('  Back: function(B, A) {');
  SL.Add('    A = A[0] || 1.618;');
  SL.Add('    return Math.pow(B, 2) * ((A + 1) * B - A);');
  SL.Add('  },');
  SL.Add('  Bounce: function(D) {');
  SL.Add('    var C;');
  SL.Add('    for (var B = 0, A = 1; 1; B += A, A /= 2) {');
  SL.Add('      if (D >= (7 - 4 * B) / 11) {');
  SL.Add('        C = -Math.pow((11 - 6 * B - 11 * D) / 4, 2) + A * A;');
  SL.Add('        break;');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return C;');
  SL.Add('  },');
  SL.Add('  Elastic: function(B, A) {');
  SL.Add('    return Math.pow(2, 10 * --B) * Math.cos(20 * B * Math.PI *');
  SL.Add('      (A[0] || 1) / 3);');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('["Quad", "Cubic", "Quart", "Quint"].each(function(B, A) {');
  SL.Add('  Fx.Transitions[B] = new Fx.Transition(function(C) {');
  SL.Add('    return Math.pow(C, [A + 2]);');
  SL.Add('  });');
  SL.Add('});');
  SL.Add('var Request = new Class({');
  SL.Add('  Implements: [Chain, Events, Options],');
  SL.Add('  options: {');
  SL.Add('    url: "",');
  SL.Add('    data: "",');
  SL.Add('    headers: {');
  SL.Add('      "X-Requested-With": "XMLHttpRequest",');
  SL.Add('      Accept: "text/javascript, text/html, application/xml, text/xml, */*"');
  SL.Add('    },');
  SL.Add('    async: true,');
  SL.Add('    format: false,');
  SL.Add('    method: "post",');
  SL.Add('    link: "ignore",');
  SL.Add('    isSuccess: null,');
  SL.Add('    emulation: true,');
  SL.Add('    urlEncoded: true,');
  SL.Add('    encoding: "utf-8",');
  SL.Add('    evalScripts: false,');
  SL.Add('    evalResponse: false');
  SL.Add('  },');
  SL.Add('  initialize: function(A) {');
  SL.Add('    this.xhr = new Browser.Request();');
  SL.Add('    this.setOptions(A);');
  SL.Add('    this.options.isSuccess = this.options.isSuccess || this.isSuccess;');
  SL.Add('    this.headers = new Hash(this.options.headers);');
  SL.Add('  },');
  SL.Add('  onStateChange: function() {');
  SL.Add('    if (this.xhr.readyState != 4 || !this.running) {');
  SL.Add('      return;');
  SL.Add('    }');
  SL.Add('    this.running = false;');
  SL.Add('    this.status = 0;');
  SL.Add('    $try(function() {');
  SL.Add('      this.status = this.xhr.status;');
  SL.Add('    }.bind(this));');
  SL.Add('    if (this.options.isSuccess.call(this, this.status)) {');
  SL.Add('      this.response = {');
  SL.Add('        text: this.xhr.responseText,');
  SL.Add('        xml: this.xhr.responseXML');
  SL.Add('      };');
  SL.Add('      this.success(this.response.text, this.response.xml);');
  SL.Add('    } else {');
  SL.Add('      this.response = {');
  SL.Add('        text: null,');
  SL.Add('        xml: null');
  SL.Add('      };');
  SL.Add('      this.failure();');
  SL.Add('    }');
  SL.Add('    this.xhr.onreadystatechange = $empty;');
  SL.Add('  },');
  SL.Add('  isSuccess: function() {');
  SL.Add('    return ((this.status >= 200) && (this.status < 300));');
  SL.Add('  },');
  SL.Add('  processScripts: function(A) {');
  SL.Add('    if (this.options.evalResponse || (/(ecma|java)script/)');
  SL.Add('      .test(');
  SL.Add('        this.getHeader("Content-type"))) {');
  SL.Add('      return $exec(A);');
  SL.Add('    }');
  SL.Add('    return A.stripScripts(this.options.evalScripts);');
  SL.Add('  },');
  SL.Add('  success: function(B, A) {');
  SL.Add('    this.onSuccess(this.processScripts(B), A);');
  SL.Add('  },');
  SL.Add('  onSuccess: function() {');
  SL.Add('    this.fireEvent("complete", arguments)');
  SL.Add('      .fireEvent("success",');
  SL.Add('        arguments)');
  SL.Add('      .callChain();');
  SL.Add('  },');
  SL.Add('  failure: function() {');
  SL.Add('    this.onFailure();');
  SL.Add('  },');
  SL.Add('  onFailure: function() {');
  SL.Add('    this.fireEvent("complete")');
  SL.Add('      .fireEvent("failure", this.xhr);');
  SL.Add('  },');
  SL.Add('  setHeader: function(A, B) {');
  SL.Add('    this.headers.set(A, B);');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  getHeader: function(A) {');
  SL.Add('    return $try(function() {');
  SL.Add('      return this.xhr.getResponseHeader(A);');
  SL.Add('    }.bind(this));');
  SL.Add('  },');
  SL.Add('  check: function(A) {');
  SL.Add('    if (!this.running) {');
  SL.Add('      return true;');
  SL.Add('    }');
  SL.Add('    switch (this.options.link) {');
  SL.Add('      case "cancel":');
  SL.Add('        this.cancel();');
  SL.Add('        return true;');
  SL.Add('      case "chain":');
  SL.Add('        this.chain(A.bind(this, Array.slice(arguments, 1)));');
  SL.Add('        return false;');
  SL.Add('    }');
  SL.Add('    return false;');
  SL.Add('  },');
  SL.Add('  send: function(I) {');
  SL.Add('    if (!this.check(arguments.callee, I)) {');
  SL.Add('      return this;');
  SL.Add('    }');
  SL.Add('    this.running = true;');
  SL.Add('    var G = $type(I);');
  SL.Add('    if (G == "string" || G == "element") {');
  SL.Add('      I = {');
  SL.Add('        data: I');
  SL.Add('      };');
  SL.Add('    }');
  SL.Add('    var D = this.options;');
  SL.Add('    I = $extend({');
  SL.Add('      data: D.data,');
  SL.Add('      url: D.url,');
  SL.Add('      method: D.method');
  SL.Add('    }, I);');
  SL.Add('    var E = I.data,');
  SL.Add('      B = I.url,');
  SL.Add('      A = I.method;');
  SL.Add('    switch ($type(E)) {');
  SL.Add('      case "element":');
  SL.Add('        E = $(E)');
  SL.Add('          .toQueryString();');
  SL.Add('        break;');
  SL.Add('      case "object":');
  SL.Add('      case "hash":');
  SL.Add('        E = Hash.toQueryString(E);');
  SL.Add('    }');
  SL.Add('    if (this.options.format) {');
  SL.Add('      var H = "format=" + this.options.format;');
  SL.Add('      E = (E) ? H + "&" + E : H;');
  SL.Add('    }');
  SL.Add('    if (this.options.emulation && ["put", "delete"].contains(A)) {');
  SL.Add('      var F = "_method=" + A;');
  SL.Add('      E = (E) ? F + "&" + E : F;');
  SL.Add('      A = "post";');
  SL.Add('    }');
  SL.Add('    if (this.options.urlEncoded && A == "post") {');
  SL.Add('      var C = (this.options.encoding) ? "; charset=" + this.options');
  SL.Add('        .encoding : "";');
  SL.Add('      this.headers.set("Content-type",');
  SL.Add('        "application/x-www-form-urlencoded" + C);');
  SL.Add('    }');
  SL.Add('    if (E && A == "get") {');
  SL.Add('      B = B + (B.contains("?") ? "&" : "?") + E;');
  SL.Add('      E = null;');
  SL.Add('    }');
  SL.Add('    this.xhr.open(A.toUpperCase(), B, this.options.async);');
  SL.Add('    this.xhr.onreadystatechange = this.onStateChange.bind(this);');
  SL.Add('    this.headers.each(function(K, J) {');
  SL.Add('      if (!$try(function() {');
  SL.Add('          this.xhr.setRequestHeader(J, K);');
  SL.Add('          return true;');
  SL.Add('        }.bind(this))) {');
  SL.Add('        this.fireEvent("exception", [J, K]);');
  SL.Add('      }');
  SL.Add('    }, this);');
  SL.Add('    this.fireEvent("request");');
  SL.Add('    this.xhr.send(E);');
  SL.Add('    if (!this.options.async) {');
  SL.Add('      this.onStateChange();');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  cancel: function() {');
  SL.Add('    if (!this.running) {');
  SL.Add('      return this;');
  SL.Add('    }');
  SL.Add('    this.running = false;');
  SL.Add('    this.xhr.abort();');
  SL.Add('    this.xhr.onreadystatechange = $empty;');
  SL.Add('    this.xhr = new Browser.Request();');
  SL.Add('    this.fireEvent("cancel");');
  SL.Add('    return this;');
  SL.Add('  }');
  SL.Add('});');
  //NOTE: this javascript code continues in Monkey_Bundle_c_JS_U
end;

end.

