unit Monkey_Bundle_c_JS_U;
//kt added entire unit  1/2016

(*
Downloaded from http://www.monkeyphysics.com/mootools/script/2/datepicker
on Jan 6, 2016 by Kevin Toppenberg, MD.
Stated license is Creative Commons Attribution-ShareAlike 3.0
http://creativecommons.org/licenses/by-sa/3.0/

Some modifications made below (parts removed), marked with "//kt"
Also changes made to formating.  Original was MINIFIED.
*)


interface

uses
  Classes, Controls, StdCtrls, SysUtils, StrUtils;

procedure AddMonkeyBundleScriptC(SL : TStringList);

implementation

procedure AddMonkeyBundleScriptC(SL : TStringList);
begin
  //NOTE: this javascript code is a continuation from Monkey_Bundle_b_JS_U
  SL.Add('(function() {');
  SL.Add('  var A = {};');
  SL.Add('  ["get", "post", "put", "delete", "GET", "POST", "PUT", "DELETE"].each(');
  SL.Add('    function(B) {');
  SL.Add('      A[B] = function() {');
  SL.Add('        var C = Array.link(arguments, {');
  SL.Add('          url: String.type,');
  SL.Add('          data: $defined');
  SL.Add('        });');
  SL.Add('        return this.send($extend(C, {');
  SL.Add('          method: B.toLowerCase()');
  SL.Add('        }));');
  SL.Add('      };');
  SL.Add('    });');
  SL.Add('  Request.implement(A);');
  SL.Add('})();');
  SL.Add('Element.Properties.send = {');
  SL.Add('  set: function(A) {');
  SL.Add('    var B = this.retrieve("send");');
  SL.Add('    if (B) {');
  SL.Add('      B.cancel();');
  SL.Add('    }');
  SL.Add('    return this.eliminate("send")');
  SL.Add('      .store("send:options", $extend({');
  SL.Add('        data: this,');
  SL.Add('        link: "cancel",');
  SL.Add('        method: this.get("method") || "post",');
  SL.Add('        url: this.get("action")');
  SL.Add('      }, A));');
  SL.Add('  },');
  SL.Add('  get: function(A) {');
  SL.Add('    if (A || !this.retrieve("send")) {');
  SL.Add('      if (A || !this.retrieve("send:options")) {');
  SL.Add('        this.set("send", A);');
  SL.Add('      }');
  SL.Add('      this.store("send", new Request(this.retrieve("send:options")));');
  SL.Add('    }');
  SL.Add('    return this.retrieve("send");');
  SL.Add('  }');
  SL.Add('};');
  SL.Add('Element.implement({');
  SL.Add('  send: function(A) {');
  SL.Add('    var B = this.get("send");');
  SL.Add('    B.send({');
  SL.Add('      data: this,');
  SL.Add('      url: A || B.options.url');
  SL.Add('    });');
  SL.Add('    return this;');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Request.HTML = new Class({');
  SL.Add('  Extends: Request,');
  SL.Add('  options: {');
  SL.Add('    update: false,');
  SL.Add('    evalScripts: true,');
  SL.Add('    filter: false');
  SL.Add('  },');
  SL.Add('  processHTML: function(C) {');
  SL.Add('    var B = C.match(/<body[^>]*>([\s\S]*?)<\/body>/i);');
  SL.Add('    C = (B) ? B[1] : C;');
  SL.Add('    var A = new Element("div");');
  SL.Add('    return $try(function() {');
  SL.Add('      var D = "<root>" + C + "</root>",');
  SL.Add('        G;');
  SL.Add('      if (Browser.Engine.trident) {');
  SL.Add('        G = new ActiveXObject("Microsoft.XMLDOM");');
  SL.Add('        G.async = false;');
  SL.Add('        G.loadXML(D);');
  SL.Add('      } else {');
  SL.Add('        G = new DOMParser()');
  SL.Add('          .parseFromString(D,');
  SL.Add('            "text/xml");');
  SL.Add('      }');
  SL.Add('      D = G.getElementsByTagName("root")[0];');
  SL.Add('      for (var F = 0, E = D.childNodes.length; F < E; F++) {');
  SL.Add('        var H = Element.clone(D.childNodes[F], true,');
  SL.Add('          true);');
  SL.Add('        if (H) {');
  SL.Add('          A.grab(H);');
  SL.Add('        }');
  SL.Add('      }');
  SL.Add('      return A;');
  SL.Add('    }) || A.set("html", C);');
  SL.Add('  },');
  SL.Add('  success: function(D) {');
  SL.Add('    var C = this.options,');
  SL.Add('      B = this.response;');
  SL.Add('    B.html = D.stripScripts(function(E) {');
  SL.Add('      B.javascript = E;');
  SL.Add('    });');
  SL.Add('    var A = this.processHTML(B.html);');
  SL.Add('    B.tree = A.childNodes;');
  SL.Add('    B.elements = A.getElements("*");');
  SL.Add('    if (C.filter) {');
  SL.Add('      B.tree = B.elements.filter(C.filter);');
  SL.Add('    }');
  SL.Add('    if (C.update) {');
  SL.Add('      $(C.update)');
  SL.Add('        .empty()');
  SL.Add('        .adopt(B.tree);');
  SL.Add('    }');
  SL.Add('    if (C.evalScripts) {');
  SL.Add('      $exec(B.javascript);');
  SL.Add('    }');
  SL.Add('    this.onSuccess(B.tree, B.elements, B.html, B.javascript);');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Element.Properties.load = {');
  SL.Add('  set: function(A) {');
  SL.Add('    var B = this.retrieve("load");');
  SL.Add('    if (B) {');
  SL.Add('      send.cancel();');
  SL.Add('    }');
  SL.Add('    return this.eliminate("load")');
  SL.Add('      .store("load:options", $extend({');
  SL.Add('        data: this,');
  SL.Add('        link: "cancel",');
  SL.Add('        update: this,');
  SL.Add('        method: "get"');
  SL.Add('      }, A));');
  SL.Add('  },');
  SL.Add('  get: function(A) {');
  SL.Add('    if (A || !this.retrieve("load")) {');
  SL.Add('      if (A || !this.retrieve("load:options")) {');
  SL.Add('        this.set("load", A);');
  SL.Add('      }');
  SL.Add('      this.store("load", new Request.HTML(this.retrieve(');
  SL.Add('        "load:options")));');
  SL.Add('    }');
  SL.Add('    return this.retrieve("load");');
  SL.Add('  }');
  SL.Add('};');
  SL.Add('Element.implement({');
  SL.Add('  load: function() {');
  SL.Add('    this.get("load")');
  SL.Add('      .send(Array.link(arguments, {');
  SL.Add('        data: Object.type,');
  SL.Add('        url: String.type');
  SL.Add('      }));');
  SL.Add('    return this;');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Request.JSON = new Class({');
  SL.Add('  Extends: Request,');
  SL.Add('  options: {');
  SL.Add('    secure: true');
  SL.Add('  },');
  SL.Add('  initialize: function(A) {');
  SL.Add('    this.parent(A);');
  SL.Add('    this.headers.extend({');
  SL.Add('      Accept: "application/json",');
  SL.Add('      "X-Request": "JSON"');
  SL.Add('    });');
  SL.Add('  },');
  SL.Add('  success: function(A) {');
  SL.Add('    this.response.json = JSON.decode(A, this.options.secure);');
  SL.Add('    this.onSuccess(this.response.json, A);');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Fx.Slide = new Class({');
  SL.Add('  Extends: Fx,');
  SL.Add('  options: {');
  SL.Add('    mode: "vertical"');
  SL.Add('  },');
  SL.Add('  initialize: function(B, A) {');
  SL.Add('    this.addEvent("complete", function() {');
  SL.Add('      this.open = (this.wrapper["offset" + this.layout');
  SL.Add('        .capitalize()] != 0);');
  SL.Add('      if (this.open && Browser.Engine.webkit419) {');
  SL.Add('        this.element.dispose()');
  SL.Add('          .inject(this.wrapper);');
  SL.Add('      }');
  SL.Add('    }, true);');
  SL.Add('    this.element = this.subject = $(B);');
  SL.Add('    this.parent(A);');
  SL.Add('    var C = this.element.retrieve("wrapper");');
  SL.Add('    this.wrapper = C || new Element("div", {');
  SL.Add('        styles: $extend(this.element.getStyles("margin",');
  SL.Add('          "position"), {');
  SL.Add('          overflow: "hidden"');
  SL.Add('        })');
  SL.Add('      })');
  SL.Add('      .wraps(this.element);');
  SL.Add('    this.element.store("wrapper", this.wrapper)');
  SL.Add('      .setStyle(');
  SL.Add('        "margin", 0);');
  SL.Add('    this.now = [];');
  SL.Add('    this.open = true;');
  SL.Add('  },');
  SL.Add('  vertical: function() {');
  SL.Add('    this.margin = "margin-top";');
  SL.Add('    this.layout = "height";');
  SL.Add('    this.offset = this.element.offsetHeight;');
  SL.Add('  },');
  SL.Add('  horizontal: function() {');
  SL.Add('    this.margin = "margin-left";');
  SL.Add('    this.layout = "width";');
  SL.Add('    this.offset = this.element.offsetWidth;');
  SL.Add('  },');
  SL.Add('  set: function(A) {');
  SL.Add('    this.element.setStyle(this.margin, A[0]);');
  SL.Add('    this.wrapper.setStyle(this.layout, A[1]);');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  compute: function(E, D, C) {');
  SL.Add('    var B = [];');
  SL.Add('    var A = 2;');
  SL.Add('    A.times(function(F) {');
  SL.Add('      B[F] = Fx.compute(E[F], D[F], C);');
  SL.Add('    });');
  SL.Add('    return B;');
  SL.Add('  },');
  SL.Add('  start: function(B, E) {');
  SL.Add('    if (!this.check(arguments.callee, B, E)) {');
  SL.Add('      return this;');
  SL.Add('    }');
  SL.Add('    this[E || this.options.mode]();');
  SL.Add('    var D = this.element.getStyle(this.margin)');
  SL.Add('      .toInt();');
  SL.Add('    var C = this.wrapper.getStyle(this.layout)');
  SL.Add('      .toInt();');
  SL.Add('    var A = [');
  SL.Add('      [D, C],');
  SL.Add('      [0, this.offset]');
  SL.Add('    ];');
  SL.Add('    var G = [');
  SL.Add('      [D, C],');
  SL.Add('      [-this.offset, 0]');
  SL.Add('    ];');
  SL.Add('    var F;');
  SL.Add('    switch (B) {');
  SL.Add('      case "in":');
  SL.Add('        F = A;');
  SL.Add('        break;');
  SL.Add('      case "out":');
  SL.Add('        F = G;');
  SL.Add('        break;');
  SL.Add('      case "toggle":');
  SL.Add('        F = (this.wrapper["offset" + this.layout.capitalize()] ==');
  SL.Add('          0) ? A : G;');
  SL.Add('    }');
  SL.Add('    return this.parent(F[0], F[1]);');
  SL.Add('  },');
  SL.Add('  slideIn: function(A) {');
  SL.Add('    return this.start("in", A);');
  SL.Add('  },');
  SL.Add('  slideOut: function(A) {');
  SL.Add('    return this.start("out", A);');
  SL.Add('  },');
  SL.Add('  hide: function(A) {');
  SL.Add('    this[A || this.options.mode]();');
  SL.Add('    this.open = false;');
  SL.Add('    return this.set([-this.offset, 0]);');
  SL.Add('  },');
  SL.Add('  show: function(A) {');
  SL.Add('    this[A || this.options.mode]();');
  SL.Add('    this.open = true;');
  SL.Add('    return this.set([0, this.offset]);');
  SL.Add('  },');
  SL.Add('  toggle: function(A) {');
  SL.Add('    return this.start("toggle", A);');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Element.Properties.slide = {');
  SL.Add('  set: function(B) {');
  SL.Add('    var A = this.retrieve("slide");');
  SL.Add('    if (A) {');
  SL.Add('      A.cancel();');
  SL.Add('    }');
  SL.Add('    return this.eliminate("slide")');
  SL.Add('      .store("slide:options", $extend({');
  SL.Add('        link: "cancel"');
  SL.Add('      }, B));');
  SL.Add('  },');
  SL.Add('  get: function(A) {');
  SL.Add('    if (A || !this.retrieve("slide")) {');
  SL.Add('      if (A || !this.retrieve("slide:options")) {');
  SL.Add('        this.set("slide", A);');
  SL.Add('      }');
  SL.Add('      this.store("slide", new Fx.Slide(this, this.retrieve(');
  SL.Add('        "slide:options")));');
  SL.Add('    }');
  SL.Add('    return this.retrieve("slide");');
  SL.Add('  }');
  SL.Add('};');
  SL.Add('Element.implement({');
  SL.Add('  slide: function(D, E) {');
  SL.Add('    D = D || "toggle";');
  SL.Add('    var B = this.get("slide"),');
  SL.Add('      A;');
  SL.Add('    switch (D) {');
  SL.Add('      case "hide":');
  SL.Add('        B.hide(E);');
  SL.Add('        break;');
  SL.Add('      case "show":');
  SL.Add('        B.show(E);');
  SL.Add('        break;');
  SL.Add('      case "toggle":');
  SL.Add('        var C = this.retrieve("slide:flag", B.open);');
  SL.Add('        B[(C) ? "slideOut" : "slideIn"](E);');
  SL.Add('        this.store("slide:flag", !C);');
  SL.Add('        A = true;');
  SL.Add('        break;');
  SL.Add('      default:');
  SL.Add('        B.start(D, E);');
  SL.Add('    }');
  SL.Add('    if (!A) {');
  SL.Add('      this.eliminate("slide:flag");');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Fx.Scroll = new Class({');
  SL.Add('  Extends: Fx,');
  SL.Add('  options: {');
  SL.Add('    offset: {');
  SL.Add('      x: 0,');
  SL.Add('      y: 0');
  SL.Add('    },');
  SL.Add('    wheelStops: true');
  SL.Add('  },');
  SL.Add('  initialize: function(B, A) {');
  SL.Add('    this.element = this.subject = $(B);');
  SL.Add('    this.parent(A);');
  SL.Add('    var D = this.cancel.bind(this, false);');
  SL.Add('    if ($type(this.element) != "element") {');
  SL.Add('      this.element = $(this.element.getDocument()');
  SL.Add('        .body);');
  SL.Add('    }');
  SL.Add('    var C = this.element;');
  SL.Add('    if (this.options.wheelStops) {');
  SL.Add('      this.addEvent("start", function() {');
  SL.Add('        C.addEvent("mousewheel", D);');
  SL.Add('      }, true);');
  SL.Add('      this.addEvent("complete", function() {');
  SL.Add('        C.removeEvent("mousewheel", D);');
  SL.Add('      }, true);');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add('  set: function() {');
  SL.Add('    var A = Array.flatten(arguments);');
  SL.Add('    this.element.scrollTo(A[0], A[1]);');
  SL.Add('  },');
  SL.Add('  compute: function(E, D, C) {');
  SL.Add('    var B = [];');
  SL.Add('    var A = 2;');
  SL.Add('    A.times(function(F) {');
  SL.Add('      B.push(Fx.compute(E[F], D[F], C));');
  SL.Add('    });');
  SL.Add('    return B;');
  SL.Add('  },');
  SL.Add('  start: function(C, H) {');
  SL.Add('    if (!this.check(arguments.callee, C, H)) {');
  SL.Add('      return this;');
  SL.Add('    }');
  SL.Add('    var E = this.element.getSize(),');
  SL.Add('      F = this.element.getScrollSize();');
  SL.Add('    var B = this.element.getScroll(),');
  SL.Add('      D = {');
  SL.Add('        x: C,');
  SL.Add('        y: H');
  SL.Add('      };');
  SL.Add('    for (var G in D) {');
  SL.Add('      var A = F[G] - E[G];');
  SL.Add('      if ($chk(D[G])) {');
  SL.Add('        D[G] = ($type(D[G]) == "number") ? D[G].limit(0, A) :');
  SL.Add('          A;');
  SL.Add('      } else {');
  SL.Add('        D[G] = B[G];');
  SL.Add('      }');
  SL.Add('      D[G] += this.options.offset[G];');
  SL.Add('    }');
  SL.Add('    return this.parent([B.x, B.y], [D.x, D.y]);');
  SL.Add('  },');
  SL.Add('  toTop: function() {');
  SL.Add('    return this.start(false, 0);');
  SL.Add('  },');
  SL.Add('  toLeft: function() {');
  SL.Add('    return this.start(0, false);');
  SL.Add('  },');
  SL.Add('  toRight: function() {');
  SL.Add('    return this.start("right", false);');
  SL.Add('  },');
  SL.Add('  toBottom: function() {');
  SL.Add('    return this.start(false, "bottom");');
  SL.Add('  },');
  SL.Add('  toElement: function(B) {');
  SL.Add('    var A = $(B)');
  SL.Add('      .getPosition(this.element);');
  SL.Add('    return this.start(A.x, A.y);');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Fx.Elements = new Class({');
  SL.Add('  Extends: Fx.CSS,');
  SL.Add('  initialize: function(B, A) {');
  SL.Add('    this.elements = this.subject = $$(B);');
  SL.Add('    this.parent(A);');
  SL.Add('  },');
  SL.Add('  compute: function(G, H, I) {');
  SL.Add('    var C = {};');
  SL.Add('    for (var D in G) {');
  SL.Add('      var A = G[D],');
  SL.Add('        E = H[D],');
  SL.Add('        F = C[D] = {};');
  SL.Add('      for (var B in A) {');
  SL.Add('        F[B] = this.parent(A[B], E[B], I);');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return C;');
  SL.Add('  },');
  SL.Add('  set: function(B) {');
  SL.Add('    for (var C in B) {');
  SL.Add('      var A = B[C];');
  SL.Add('      for (var D in A) {');
  SL.Add('        this.render(this.elements[C], D, A[D], this.options');
  SL.Add('          .unit);');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  start: function(C) {');
  SL.Add('    if (!this.check(arguments.callee, C)) {');
  SL.Add('      return this;');
  SL.Add('    }');
  SL.Add('    var H = {},');
  SL.Add('      I = {};');
  SL.Add('    for (var D in C) {');
  SL.Add('      var F = C[D],');
  SL.Add('        A = H[D] = {},');
  SL.Add('        G = I[D] = {};');
  SL.Add('      for (var B in F) {');
  SL.Add('        var E = this.prepare(this.elements[D], B, F[B]);');
  SL.Add('        A[B] = E.from;');
  SL.Add('        G[B] = E.to;');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return this.parent(H, I);');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('var Drag = new Class({');
  SL.Add('  Implements: [Events, Options],');
  SL.Add('  options: {');
  SL.Add('    snap: 6,');
  SL.Add('    unit: "px",');
  SL.Add('    grid: false,');
  SL.Add('    style: true,');
  SL.Add('    limit: false,');
  SL.Add('    handle: false,');
  SL.Add('    invert: false,');
  SL.Add('    preventDefault: false,');
  SL.Add('    modifiers: {');
  SL.Add('      x: "left",');
  SL.Add('      y: "top"');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add('  initialize: function() {');
  SL.Add('    var B = Array.link(arguments, {');
  SL.Add('      options: Object.type,');
  SL.Add('      element: $defined');
  SL.Add('    });');
  SL.Add('    this.element = $(B.element);');
  SL.Add('    this.document = this.element.getDocument();');
  SL.Add('    this.setOptions(B.options || {});');
  SL.Add('    var A = $type(this.options.handle);');
  SL.Add('    this.handles = (A == "array" || A == "collection") ? $$(');
  SL.Add('        this.options.handle) : $(this.options.handle) ||');
  SL.Add('      this.element;');
  SL.Add('    this.mouse = {');
  SL.Add('      now: {},');
  SL.Add('      pos: {}');
  SL.Add('    };');
  SL.Add('    this.value = {');
  SL.Add('      start: {},');
  SL.Add('      now: {}');
  SL.Add('    };');
  SL.Add('    this.selection = (Browser.Engine.trident) ? "selectstart" :');
  SL.Add('      "mousedown";');
  SL.Add('    this.bound = {');
  SL.Add('      start: this.start.bind(this),');
  SL.Add('      check: this.check.bind(this),');
  SL.Add('      drag: this.drag.bind(this),');
  SL.Add('      stop: this.stop.bind(this),');
  SL.Add('      cancel: this.cancel.bind(this),');
  SL.Add('      eventStop: $lambda(false)');
  SL.Add('    };');
  SL.Add('    this.attach();');
  SL.Add('  },');
  SL.Add('  attach: function() {');
  SL.Add('    this.handles.addEvent("mousedown", this.bound.start);');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  detach: function() {');
  SL.Add('    this.handles.removeEvent("mousedown", this.bound.start);');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  start: function(C) {');
  SL.Add('    if (this.options.preventDefault) {');
  SL.Add('      C.preventDefault();');
  SL.Add('    }');
  SL.Add('    this.fireEvent("beforeStart", this.element);');
  SL.Add('    this.mouse.start = C.page;');
  SL.Add('    var A = this.options.limit;');
  SL.Add('    this.limit = {');
  SL.Add('      x: [],');
  SL.Add('      y: []');
  SL.Add('    };');
  SL.Add('    for (var D in this.options.modifiers) {');
  SL.Add('      if (!this.options.modifiers[D]) {');
  SL.Add('        continue;');
  SL.Add('      }');
  SL.Add('      if (this.options.style) {');
  SL.Add('        this.value.now[D] = this.element.getStyle(this.options');
  SL.Add('            .modifiers[D])');
  SL.Add('          .toInt();');
  SL.Add('      } else {');
  SL.Add('        this.value.now[D] = this.element[this.options.modifiers[');
  SL.Add('          D]];');
  SL.Add('      }');
  SL.Add('      if (this.options.invert) {');
  SL.Add('        this.value.now[D] *= -1;');
  SL.Add('      }');
  SL.Add('      this.mouse.pos[D] = C.page[D] - this.value.now[D];');
  SL.Add('      if (A && A[D]) {');
  SL.Add('        for (var B = 2; B--; B) {');
  SL.Add('          if ($chk(A[D][B])) {');
  SL.Add('            this.limit[D][B] = $lambda(A[D][B])();');
  SL.Add('          }');
  SL.Add('        }');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    if ($type(this.options.grid) == "number") {');
  SL.Add('      this.options.grid = {');
  SL.Add('        x: this.options.grid,');
  SL.Add('        y: this.options.grid');
  SL.Add('      };');
  SL.Add('    }');
  SL.Add('    this.document.addEvents({');
  SL.Add('      mousemove: this.bound.check,');
  SL.Add('      mouseup: this.bound.cancel');
  SL.Add('    });');
  SL.Add('    this.document.addEvent(this.selection, this.bound.eventStop);');
  SL.Add('  },');
  SL.Add('  check: function(A) {');
  SL.Add('    if (this.options.preventDefault) {');
  SL.Add('      A.preventDefault();');
  SL.Add('    }');
  SL.Add('    var B = Math.round(Math.sqrt(Math.pow(A.page.x - this.mouse');
  SL.Add('      .start.x, 2) + Math.pow(A.page.y - this.mouse');
  SL.Add('      .start.y, 2)));');
  SL.Add('    if (B > this.options.snap) {');
  SL.Add('      this.cancel();');
  SL.Add('      this.document.addEvents({');
  SL.Add('        mousemove: this.bound.drag,');
  SL.Add('        mouseup: this.bound.stop');
  SL.Add('      });');
  SL.Add('      this.fireEvent("start", this.element)');
  SL.Add('        .fireEvent("snap",');
  SL.Add('          this.element);');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add('  drag: function(A) {');
  SL.Add('    if (this.options.preventDefault) {');
  SL.Add('      A.preventDefault();');
  SL.Add('    }');
  SL.Add('    this.mouse.now = A.page;');
  SL.Add('    for (var B in this.options.modifiers) {');
  SL.Add('      if (!this.options.modifiers[B]) {');
  SL.Add('        continue;');
  SL.Add('      }');
  SL.Add('      this.value.now[B] = this.mouse.now[B] - this.mouse.pos[');
  SL.Add('        B];');
  SL.Add('      if (this.options.invert) {');
  SL.Add('        this.value.now[B] *= -1;');
  SL.Add('      }');
  SL.Add('      if (this.options.limit && this.limit[B]) {');
  SL.Add('        if ($chk(this.limit[B][1]) && (this.value.now[B] >');
  SL.Add('            this.limit[B][1])) {');
  SL.Add('          this.value.now[B] = this.limit[B][1];');
  SL.Add('        } else {');
  SL.Add('          if ($chk(this.limit[B][0]) && (this.value.now[B] <');
  SL.Add('              this.limit[B][0])) {');
  SL.Add('            this.value.now[B] = this.limit[B][0];');
  SL.Add('          }');
  SL.Add('        }');
  SL.Add('      }');
  SL.Add('      if (this.options.grid[B]) {');
  SL.Add('        this.value.now[B] -= (this.value.now[B] % this.options');
  SL.Add('          .grid[B]);');
  SL.Add('      }');
  SL.Add('      if (this.options.style) {');
  SL.Add('        this.element.setStyle(this.options.modifiers[B],');
  SL.Add('          this.value.now[B] + this.options.unit);');
  SL.Add('      } else {');
  SL.Add('        this.element[this.options.modifiers[B]] = this.value');
  SL.Add('          .now[B];');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    this.fireEvent("drag", this.element);');
  SL.Add('  },');
  SL.Add('  cancel: function(A) {');
  SL.Add('    this.document.removeEvent("mousemove", this.bound.check);');
  SL.Add('    this.document.removeEvent("mouseup", this.bound.cancel);');
  SL.Add('    if (A) {');
  SL.Add('      this.document.removeEvent(this.selection, this.bound.eventStop);');
  SL.Add('      this.fireEvent("cancel", this.element);');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add('  stop: function(A) {');
  SL.Add('    this.document.removeEvent(this.selection, this.bound.eventStop);');
  SL.Add('    this.document.removeEvent("mousemove", this.bound.drag);');
  SL.Add('    this.document.removeEvent("mouseup", this.bound.stop);');
  SL.Add('    if (A) {');
  SL.Add('      this.fireEvent("complete", this.element);');
  SL.Add('    }');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Element.implement({');
  SL.Add('  makeResizable: function(A) {');
  SL.Add('    return new Drag(this, $merge({');
  SL.Add('      modifiers: {');
  SL.Add('        x: "width",');
  SL.Add('        y: "height"');
  SL.Add('      }');
  SL.Add('    }, A));');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Drag.Move = new Class({');
  SL.Add('  Extends: Drag,');
  SL.Add('  options: {');
  SL.Add('    droppables: [],');
  SL.Add('    container: false');
  SL.Add('  },');
  SL.Add('  initialize: function(C, B) {');
  SL.Add('    this.parent(C, B);');
  SL.Add('    this.droppables = $$(this.options.droppables);');
  SL.Add('    this.container = $(this.options.container);');
  SL.Add('    if (this.container && $type(this.container) != "element") {');
  SL.Add('      this.container = $(this.container.getDocument()');
  SL.Add('        .body);');
  SL.Add('    }');
  SL.Add('    C = this.element;');
  SL.Add('    var D = C.getStyle("position");');
  SL.Add('    var A = (D != "static") ? D : "absolute";');
  SL.Add('    if (C.getStyle("left") == "auto" || C.getStyle("top") ==');
  SL.Add('      "auto") {');
  SL.Add('      C.position(C.getPosition(C.offsetParent));');
  SL.Add('    }');
  SL.Add('    C.setStyle("position", A);');
  SL.Add('    this.addEvent("start", function() {');
  SL.Add('      this.checkDroppables();');
  SL.Add('    }, true);');
  SL.Add('  },');
  SL.Add('  start: function(B) {');
  SL.Add('    if (this.container) {');
  SL.Add('      var D = this.element,');
  SL.Add('        J = this.container,');
  SL.Add('        E = J.getCoordinates(D.offsetParent),');
  SL.Add('        F = {},');
  SL.Add('        A = {};');
  SL.Add('      ["top", "right", "bottom", "left"].each(function(K) {');
  SL.Add('        F[K] = J.getStyle("padding-" + K)');
  SL.Add('          .toInt();');
  SL.Add('        A[K] = D.getStyle("margin-" + K)');
  SL.Add('          .toInt();');
  SL.Add('      }, this);');
  SL.Add('      var C = D.offsetWidth + A.left + A.right,');
  SL.Add('        I = D.offsetHeight + A.top + A.bottom;');
  SL.Add('      var H = [E.left + F.left, E.right - F.right - C];');
  SL.Add('      var G = [E.top + F.top, E.bottom - F.bottom - I];');
  SL.Add('      this.options.limit = {');
  SL.Add('        x: H,');
  SL.Add('        y: G');
  SL.Add('      };');
  SL.Add('    }');
  SL.Add('    this.parent(B);');
  SL.Add('  },');
  SL.Add('  checkAgainst: function(B) {');
  SL.Add('    B = B.getCoordinates();');
  SL.Add('    var A = this.mouse.now;');
  SL.Add('    return (A.x > B.left && A.x < B.right && A.y < B.bottom &&');
  SL.Add('      A.y > B.top);');
  SL.Add('  },');
  SL.Add('  checkDroppables: function() {');
  SL.Add('    var A = this.droppables.filter(this.checkAgainst, this)');
  SL.Add('      .getLast();');
  SL.Add('    if (this.overed != A) {');
  SL.Add('      if (this.overed) {');
  SL.Add('        this.fireEvent("leave", [this.element, this.overed]);');
  SL.Add('      }');
  SL.Add('      if (A) {');
  SL.Add('        this.overed = A;');
  SL.Add('        this.fireEvent("enter", [this.element, A]);');
  SL.Add('      } else {');
  SL.Add('        this.overed = null;');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add('  drag: function(A) {');
  SL.Add('    this.parent(A);');
  SL.Add('    if (this.droppables.length) {');
  SL.Add('      this.checkDroppables();');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add('  stop: function(A) {');
  SL.Add('    this.checkDroppables();');
  SL.Add('    this.fireEvent("drop", [this.element, this.overed]);');
  SL.Add('    this.overed = null;');
  SL.Add('    return this.parent(A);');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('Element.implement({');
  SL.Add('  makeDraggable: function(A) {');
  SL.Add('    return new Drag.Move(this, A);');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('var Asset = new Hash({');
  SL.Add('  javascript: function(F, D) {');
  SL.Add('    D = $extend({');
  SL.Add('      onload: $empty,');
  SL.Add('      document: document,');
  SL.Add('      check: $lambda(true)');
  SL.Add('    }, D);');
  SL.Add('    var B = new Element("script", {');
  SL.Add('      src: F,');
  SL.Add('      type: "text/javascript"');
  SL.Add('    });');
  SL.Add('    var E = D.onload.bind(B),');
  SL.Add('      A = D.check,');
  SL.Add('      G = D.document;');
  SL.Add('    delete D.onload;');
  SL.Add('    delete D.check;');
  SL.Add('    delete D.document;');
  SL.Add('    B.addEvents({');
  SL.Add('        load: E,');
  SL.Add('        readystatechange: function() {');
  SL.Add('          if (["loaded", "complete"].contains(');
  SL.Add('              this.readyState)) {');
  SL.Add('            E();');
  SL.Add('          }');
  SL.Add('        }');
  SL.Add('      })');
  SL.Add('      .setProperties(D);');
  SL.Add('    if (Browser.Engine.webkit419) {');
  SL.Add('      var C = (function() {');
  SL.Add('          if (!$try(A)) {');
  SL.Add('            return;');
  SL.Add('          }');
  SL.Add('          $clear(C);');
  SL.Add('          E();');
  SL.Add('        })');
  SL.Add('        .periodical(50);');
  SL.Add('    }');
  SL.Add('    return B.inject(G.head);');
  SL.Add('  },');
  SL.Add('  css: function(B, A) {');
  SL.Add('    return new Element("link", $merge({');
  SL.Add('        rel: "stylesheet",');
  SL.Add('        media: "screen",');
  SL.Add('        type: "text/css",');
  SL.Add('        href: B');
  SL.Add('      }, A))');
  SL.Add('      .inject(document.head);');
  SL.Add('  },');
  SL.Add('  image: function(C, B) {');
  SL.Add('    B = $merge({');
  SL.Add('      onload: $empty,');
  SL.Add('      onabort: $empty,');
  SL.Add('      onerror: $empty');
  SL.Add('    }, B);');
  SL.Add('    var D = new Image();');
  SL.Add('    var A = $(D) || new Element("img");');
  SL.Add('    ["load", "abort", "error"].each(function(E) {');
  SL.Add('      var F = "on" + E;');
  SL.Add('      var G = B[F];');
  SL.Add('      delete B[F];');
  SL.Add('      D[F] = function() {');
  SL.Add('        if (!D) {');
  SL.Add('          return;');
  SL.Add('        }');
  SL.Add('        if (!A.parentNode) {');
  SL.Add('          A.width = D.width;');
  SL.Add('          A.height = D.height;');
  SL.Add('        }');
  SL.Add('        D = D.onload = D.onabort = D.onerror =');
  SL.Add('          null;');
  SL.Add('        G.delay(1, A, A);');
  SL.Add('        A.fireEvent(E, A, 1);');
  SL.Add('      };');
  SL.Add('    });');
  SL.Add('    D.src = A.src = C;');
  SL.Add('    if (D && D.complete) {');
  SL.Add('      D.onload.delay(1);');
  SL.Add('    }');
  SL.Add('    return A.setProperties(B);');
  SL.Add('  },');
  SL.Add('  images: function(D, C) {');
  SL.Add('    C = $merge({');
  SL.Add('      onComplete: $empty,');
  SL.Add('      onProgress: $empty');
  SL.Add('    }, C);');
  SL.Add('    if (!D.push) {');
  SL.Add('      D = [D];');
  SL.Add('    }');
  SL.Add('    var A = [];');
  SL.Add('    var B = 0;');
  SL.Add('    D.each(function(F) {');
  SL.Add('      var E = new Asset.image(F, {');
  SL.Add('        onload: function() {');
  SL.Add('          C.onProgress.call(this, B,');
  SL.Add('            D.indexOf(F));');
  SL.Add('          B++;');
  SL.Add('          if (B == D.length) {');
  SL.Add('            C.onComplete();');
  SL.Add('          }');
  SL.Add('        }');
  SL.Add('      });');
  SL.Add('      A.push(E);');
  SL.Add('    });');
  SL.Add('    return new Elements(A);');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('var Sortables = new Class({');
  SL.Add('  Implements: [Events, Options],');
  SL.Add('  options: {');
  SL.Add('    snap: 4,');
  SL.Add('    opacity: 1,');
  SL.Add('    clone: false,');
  SL.Add('    revert: false,');
  SL.Add('    handle: false,');
  SL.Add('    constrain: false');
  SL.Add('  },');
  SL.Add('  initialize: function(A, B) {');
  SL.Add('    this.setOptions(B);');
  SL.Add('    this.elements = [];');
  SL.Add('    this.lists = [];');
  SL.Add('    this.idle = true;');
  SL.Add('    this.addLists($$($(A) || A));');
  SL.Add('    if (!this.options.clone) {');
  SL.Add('      this.options.revert = false;');
  SL.Add('    }');
  SL.Add('    if (this.options.revert) {');
  SL.Add('      this.effect = new Fx.Morph(null, $merge({');
  SL.Add('        duration: 250,');
  SL.Add('        link: "cancel"');
  SL.Add('      }, this.options.revert));');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add('  attach: function() {');
  SL.Add('    this.addLists(this.lists);');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  detach: function() {');
  SL.Add('    this.lists = this.removeLists(this.lists);');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  addItems: function() {');
  SL.Add('    Array.flatten(arguments)');
  SL.Add('      .each(function(A) {');
  SL.Add('        this.elements.push(A);');
  SL.Add('        var B = A.retrieve("sortables:start", this.start');
  SL.Add('          .bindWithEvent(this, A));');
  SL.Add('        (this.options.handle ? A.getElement(this.options');
  SL.Add('          .handle) || A : A)');
  SL.Add('        .addEvent("mousedown", B);');
  SL.Add('      }, this);');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  addLists: function() {');
  SL.Add('    Array.flatten(arguments)');
  SL.Add('      .each(function(A) {');
  SL.Add('        this.lists.push(A);');
  SL.Add('        this.addItems(A.getChildren());');
  SL.Add('      }, this);');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  removeItems: function() {');
  SL.Add('    var A = [];');
  SL.Add('    Array.flatten(arguments)');
  SL.Add('      .each(function(B) {');
  SL.Add('        A.push(B);');
  SL.Add('        this.elements.erase(B);');
  SL.Add('        var C = B.retrieve("sortables:start");');
  SL.Add('        (this.options.handle ? B.getElement(this.options');
  SL.Add('          .handle) || B : B)');
  SL.Add('        .removeEvent("mousedown",');
  SL.Add('          C);');
  SL.Add('      }, this);');
  SL.Add('    return $$(A);');
  SL.Add('  },');
  SL.Add('  removeLists: function() {');
  SL.Add('    var A = [];');
  SL.Add('    Array.flatten(arguments)');
  SL.Add('      .each(function(B) {');
  SL.Add('        A.push(B);');
  SL.Add('        this.lists.erase(B);');
  SL.Add('        this.removeItems(B.getChildren());');
  SL.Add('      }, this);');
  SL.Add('    return $$(A);');
  SL.Add('  },');
  SL.Add('  getClone: function(B, A) {');
  SL.Add('    if (!this.options.clone) {');
  SL.Add('      return new Element("div")');
  SL.Add('        .inject(document.body);');
  SL.Add('    }');
  SL.Add('    if ($type(this.options.clone) == "function") {');
  SL.Add('      return this.options.clone.call(this, B, A, this.list);');
  SL.Add('    }');
  SL.Add('    return A.clone(true)');
  SL.Add('      .setStyles({');
  SL.Add('        margin: "0px",');
  SL.Add('        position: "absolute",');
  SL.Add('        visibility: "hidden",');
  SL.Add('        width: A.getStyle("width")');
  SL.Add('      })');
  SL.Add('      .inject(this.list)');
  SL.Add('      .position(A.getPosition(A.getOffsetParent()));');
  SL.Add('  },');
  SL.Add('  getDroppables: function() {');
  SL.Add('    var A = this.list.getChildren();');
  SL.Add('    if (!this.options.constrain) {');
  SL.Add('      A = this.lists.concat(A)');
  SL.Add('        .erase(this.list);');
  SL.Add('    }');
  SL.Add('    return A.erase(this.clone)');
  SL.Add('      .erase(this.element);');
  SL.Add('  },');
  SL.Add('  insert: function(C, B) {');
  SL.Add('    var A = "inside";');
  SL.Add('    if (this.lists.contains(B)) {');
  SL.Add('      this.list = B;');
  SL.Add('      this.drag.droppables = this.getDroppables();');
  SL.Add('    } else {');
  SL.Add('      A = this.element.getAllPrevious()');
  SL.Add('        .contains(B) ?');
  SL.Add('        "before" : "after";');
  SL.Add('    }');
  SL.Add('    this.element.inject(B, A);');
  SL.Add('    this.fireEvent("sort", [this.element, this.clone]);');
  SL.Add('  },');
  SL.Add('  start: function(B, A) {');
  SL.Add('    if (!this.idle) {');
  SL.Add('      return;');
  SL.Add('    }');
  SL.Add('    this.idle = false;');
  SL.Add('    this.element = A;');
  SL.Add('    this.opacity = A.get("opacity");');
  SL.Add('    this.list = A.getParent();');
  SL.Add('    this.clone = this.getClone(B, A);');
  SL.Add('    this.drag = new Drag.Move(this.clone, {');
  SL.Add('      snap: this.options.snap,');
  SL.Add('      container: this.options.constrain && this.element');
  SL.Add('        .getParent(),');
  SL.Add('      droppables: this.getDroppables(),');
  SL.Add('      onSnap: function() {');
  SL.Add('        B.stop();');
  SL.Add('        this.clone.setStyle("visibility",');
  SL.Add('          "visible");');
  SL.Add('        this.element.set("opacity", this.options');
  SL.Add('          .opacity || 0);');
  SL.Add('        this.fireEvent("start", [this.element,');
  SL.Add('          this.clone');
  SL.Add('        ]);');
  SL.Add('      }.bind(this),');
  SL.Add('      onEnter: this.insert.bind(this),');
  SL.Add('      onCancel: this.reset.bind(this),');
  SL.Add('      onComplete: this.end.bind(this)');
  SL.Add('    });');
  SL.Add('    this.clone.inject(this.element, "before");');
  SL.Add('    this.drag.start(B);');
  SL.Add('  },');
  SL.Add('  end: function() {');
  SL.Add('    this.drag.detach();');
  SL.Add('    this.element.set("opacity", this.opacity);');
  SL.Add('    if (this.effect) {');
  SL.Add('      var A = this.element.getStyles("width", "height");');
  SL.Add('      var B = this.clone.computePosition(this.element.getPosition(');
  SL.Add('        this.clone.offsetParent));');
  SL.Add('      this.effect.element = this.clone;');
  SL.Add('      this.effect.start({');
  SL.Add('          top: B.top,');
  SL.Add('          left: B.left,');
  SL.Add('          width: A.width,');
  SL.Add('          height: A.height,');
  SL.Add('          opacity: 0.25');
  SL.Add('        })');
  SL.Add('        .chain(this.reset.bind(this));');
  SL.Add('    } else {');
  SL.Add('      this.reset();');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add('  reset: function() {');
  SL.Add('    this.idle = true;');
  SL.Add('    this.clone.destroy();');
  SL.Add('    this.fireEvent("complete", this.element);');
  SL.Add('  },');
  SL.Add('  serialize: function() {');
  SL.Add('    var C = Array.link(arguments, {');
  SL.Add('      modifier: Function.type,');
  SL.Add('      index: $defined');
  SL.Add('    });');
  SL.Add('    var B = this.lists.map(function(D) {');
  SL.Add('      return D.getChildren()');
  SL.Add('        .map(C.modifier ||');
  SL.Add('          function(E) {');
  SL.Add('            return E.get("id");');
  SL.Add('          }, this);');
  SL.Add('    }, this);');
  SL.Add('    var A = C.index;');
  SL.Add('    if (this.lists.length == 1) {');
  SL.Add('      A = 0;');
  SL.Add('    }');
  SL.Add('    return $chk(A) && A >= 0 && A < this.lists.length ? B[A] :');
  SL.Add('      B;');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('var Tips = new Class({');
  SL.Add('  Implements: [Events, Options],');
  SL.Add('  options: {');
  SL.Add('    onShow: function(A) {');
  SL.Add('      A.setStyle("visibility", "visible");');
  SL.Add('    },');
  SL.Add('    onHide: function(A) {');
  SL.Add('      A.setStyle("visibility", "hidden");');
  SL.Add('    },');
  SL.Add('    showDelay: 100,');
  SL.Add('    hideDelay: 100,');
  SL.Add('    className: null,');
  SL.Add('    offsets: {');
  SL.Add('      x: 16,');
  SL.Add('      y: 16');
  SL.Add('    },');
  SL.Add('    fixed: false');
  SL.Add('  },');
  SL.Add('  initialize: function() {');
  SL.Add('    var C = Array.link(arguments, {');
  SL.Add('      options: Object.type,');
  SL.Add('      elements: $defined');
  SL.Add('    });');
  SL.Add('    this.setOptions(C.options || null);');
  SL.Add('    this.tip = new Element("div")');
  SL.Add('      .inject(document.body);');
  SL.Add('    if (this.options.className) {');
  SL.Add('      this.tip.addClass(this.options.className);');
  SL.Add('    }');
  SL.Add('    var B = new Element("div", {');
  SL.Add('        "class": "tip-top"');
  SL.Add('      })');
  SL.Add('      .inject(this.tip);');
  SL.Add('    this.container = new Element("div", {');
  SL.Add('        "class": "tip"');
  SL.Add('      })');
  SL.Add('      .inject(this.tip);');
  SL.Add('    var A = new Element("div", {');
  SL.Add('        "class": "tip-bottom"');
  SL.Add('      })');
  SL.Add('      .inject(this.tip);');
  SL.Add('    this.tip.setStyles({');
  SL.Add('      position: "absolute",');
  SL.Add('      top: 0,');
  SL.Add('      left: 0,');
  SL.Add('      visibility: "hidden"');
  SL.Add('    });');
  SL.Add('    if (C.elements) {');
  SL.Add('      this.attach(C.elements);');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add('  attach: function(A) {');
  SL.Add('    $$(A)');
  SL.Add('      .each(function(D) {');
  SL.Add('        var G = D.retrieve("tip:title", D.get("title"));');
  SL.Add('        var F = D.retrieve("tip:text", D.get("rel") ||');
  SL.Add('          D.get("href"));');
  SL.Add('        var E = D.retrieve("tip:enter", this.elementEnter');
  SL.Add('          .bindWithEvent(this, D));');
  SL.Add('        var C = D.retrieve("tip:leave", this.elementLeave');
  SL.Add('          .bindWithEvent(this, D));');
  SL.Add('        D.addEvents({');
  SL.Add('          mouseenter: E,');
  SL.Add('          mouseleave: C');
  SL.Add('        });');
  SL.Add('        if (!this.options.fixed) {');
  SL.Add('          var B = D.retrieve("tip:move", this.elementMove');
  SL.Add('            .bindWithEvent(this, D));');
  SL.Add('          D.addEvent("mousemove", B);');
  SL.Add('        }');
  SL.Add('        D.store("tip:native", D.get("title"));');
  SL.Add('        D.erase("title");');
  SL.Add('      }, this);');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  detach: function(A) {');
  SL.Add('    $$(A)');
  SL.Add('      .each(function(C) {');
  SL.Add('        C.removeEvent("mouseenter", C.retrieve(');
  SL.Add('          "tip:enter") || $empty);');
  SL.Add('        C.removeEvent("mouseleave", C.retrieve(');
  SL.Add('          "tip:leave") || $empty);');
  SL.Add('        C.removeEvent("mousemove", C.retrieve(');
  SL.Add('          "tip:move") || $empty);');
  SL.Add('        C.eliminate("tip:enter")');
  SL.Add('          .eliminate("tip:leave")');
  SL.Add('          .eliminate("tip:move");');
  SL.Add('        var B = C.retrieve("tip:native");');
  SL.Add('        if (B) {');
  SL.Add('          C.set("title", B);');
  SL.Add('        }');
  SL.Add('      });');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  elementEnter: function(B, A) {');
  SL.Add('    $A(this.container.childNodes)');
  SL.Add('      .each(Element.dispose);');
  SL.Add('    var D = A.retrieve("tip:title");');
  SL.Add('    if (D) {');
  SL.Add('      this.titleElement = new Element("div", {');
  SL.Add('          "class": "tip-title"');
  SL.Add('        })');
  SL.Add('        .inject(this.container);');
  SL.Add('      this.fill(this.titleElement, D);');
  SL.Add('    }');
  SL.Add('    var C = A.retrieve("tip:text");');
  SL.Add('    if (C) {');
  SL.Add('      this.textElement = new Element("div", {');
  SL.Add('          "class": "tip-text"');
  SL.Add('        })');
  SL.Add('        .inject(this.container);');
  SL.Add('      this.fill(this.textElement, C);');
  SL.Add('    }');
  SL.Add('    this.timer = $clear(this.timer);');
  SL.Add('    this.timer = this.show.delay(this.options.showDelay, this);');
  SL.Add('    this.position((!this.options.fixed) ? B : {');
  SL.Add('      page: A.getPosition()');
  SL.Add('    });');
  SL.Add('  },');
  SL.Add('  elementLeave: function(A) {');
  SL.Add('    $clear(this.timer);');
  SL.Add('    this.timer = this.hide.delay(this.options.hideDelay, this);');
  SL.Add('  },');
  SL.Add('  elementMove: function(A) {');
  SL.Add('    this.position(A);');
  SL.Add('  },');
  SL.Add('  position: function(D) {');
  SL.Add('    var B = window.getSize(),');
  SL.Add('      A = window.getScroll();');
  SL.Add('    var E = {');
  SL.Add('      x: this.tip.offsetWidth,');
  SL.Add('      y: this.tip.offsetHeight');
  SL.Add('    };');
  SL.Add('    var C = {');
  SL.Add('      x: "left",');
  SL.Add('      y: "top"');
  SL.Add('    };');
  SL.Add('    for (var F in C) {');
  SL.Add('      var G = D.page[F] + this.options.offsets[F];');
  SL.Add('      if ((G + E[F] - A[F]) > B[F]) {');
  SL.Add('        G = D.page[F] - this.options.offsets[F] - E[F];');
  SL.Add('      }');
  SL.Add('      this.tip.setStyle(C[F], G);');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add('  fill: function(A, B) {');
  SL.Add('    (typeof B == "string") ? A.set("html", B): A.adopt(B);');
  SL.Add('  },');
  SL.Add('  show: function() {');
  SL.Add('    this.fireEvent("show", this.tip);');
  SL.Add('  },');
  SL.Add('  hide: function() {');
  SL.Add('    this.fireEvent("hide", this.tip);');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('var SmoothScroll = new Class({');
  SL.Add('  Extends: Fx.Scroll,');
  SL.Add('  initialize: function(B, C) {');
  SL.Add('    C = C || document;');
  SL.Add('    var E = C.getDocument(),');
  SL.Add('      D = C.getWindow();');
  SL.Add('    this.parent(E, B);');
  SL.Add('    this.links = (this.options.links) ? $$(this.options.links) :');
  SL.Add('      $$(E.links);');
  SL.Add('    var A = D.location.href.match(/^[^#]*/)[0] + "#";');
  SL.Add('    this.links.each(function(G) {');
  SL.Add('      if (G.href.indexOf(A) != 0) {');
  SL.Add('        return;');
  SL.Add('      }');
  SL.Add('      var F = G.href.substr(A.length);');
  SL.Add('      if (F && $(F)) {');
  SL.Add('        this.useLink(G, F);');
  SL.Add('      }');
  SL.Add('    }, this);');
  SL.Add('    if (!Browser.Engine.webkit419) {');
  SL.Add('      this.addEvent("complete", function() {');
  SL.Add('        D.location.hash = this.anchor;');
  SL.Add('      }, true);');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add('  useLink: function(B, A) {');
  SL.Add('    B.addEvent("click", function(C) {');
  SL.Add('      this.anchor = A;');
  SL.Add('      this.toElement(A);');
  SL.Add('      C.stop();');
  SL.Add('    }.bind(this));');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('var Slider = new Class({');
  SL.Add('  Implements: [Events, Options],');
  SL.Add('  options: {');
  SL.Add('    onTick: function(A) {');
  SL.Add('      if (this.options.snap) {');
  SL.Add('        A = this.toPosition(this.step);');
  SL.Add('      }');
  SL.Add('      this.knob.setStyle(this.property, A);');
  SL.Add('    },');
  SL.Add('    snap: false,');
  SL.Add('    offset: 0,');
  SL.Add('    range: false,');
  SL.Add('    wheel: false,');
  SL.Add('    steps: 100,');
  SL.Add('    mode: "horizontal"');
  SL.Add('  },');
  SL.Add('  initialize: function(E, A, D) {');
  SL.Add('    this.setOptions(D);');
  SL.Add('    this.element = $(E);');
  SL.Add('    this.knob = $(A);');
  SL.Add('    this.previousChange = this.previousEnd = this.step = -1;');
  SL.Add('    this.element.addEvent("mousedown", this.clickedElement.bind(');
  SL.Add('      this));');
  SL.Add('    if (this.options.wheel) {');
  SL.Add('      this.element.addEvent("mousewheel", this.scrolledElement');
  SL.Add('        .bindWithEvent(this));');
  SL.Add('    }');
  SL.Add('    var F, B = {},');
  SL.Add('      C = {');
  SL.Add('        x: false,');
  SL.Add('        y: false');
  SL.Add('      };');
  SL.Add('    switch (this.options.mode) {');
  SL.Add('      case "vertical":');
  SL.Add('        this.axis = "y";');
  SL.Add('        this.property = "top";');
  SL.Add('        F = "offsetHeight";');
  SL.Add('        break;');
  SL.Add('      case "horizontal":');
  SL.Add('        this.axis = "x";');
  SL.Add('        this.property = "left";');
  SL.Add('        F = "offsetWidth";');
  SL.Add('    }');
  SL.Add('    this.half = this.knob[F] / 2;');
  SL.Add('    this.full = this.element[F] - this.knob[F] + (this.options.offset *');
  SL.Add('      2);');
  SL.Add('    this.min = $chk(this.options.range[0]) ? this.options.range[');
  SL.Add('      0] : 0;');
  SL.Add('    this.max = $chk(this.options.range[1]) ? this.options.range[');
  SL.Add('      1] : this.options.steps;');
  SL.Add('    this.range = this.max - this.min;');
  SL.Add('    this.steps = this.options.steps || this.full;');
  SL.Add('    this.stepSize = Math.abs(this.range) / this.steps;');
  SL.Add('    this.stepWidth = this.stepSize * this.full / Math.abs(this.range);');
  SL.Add('    this.knob.setStyle("position", "relative")');
  SL.Add('      .setStyle(this.property, -');
  SL.Add('        this.options.offset);');
  SL.Add('    C[this.axis] = this.property;');
  SL.Add('    B[this.axis] = [-this.options.offset, this.full - this.options');
  SL.Add('      .offset');
  SL.Add('    ];');
  SL.Add('    this.drag = new Drag(this.knob, {');
  SL.Add('      snap: 0,');
  SL.Add('      limit: B,');
  SL.Add('      modifiers: C,');
  SL.Add('      onDrag: this.draggedKnob.bind(this),');
  SL.Add('      onStart: this.draggedKnob.bind(this),');
  SL.Add('      onComplete: function() {');
  SL.Add('        this.draggedKnob();');
  SL.Add('        this.end();');
  SL.Add('      }.bind(this)');
  SL.Add('    });');
  SL.Add('    if (this.options.snap) {');
  SL.Add('      this.drag.options.grid = Math.ceil(this.stepWidth);');
  SL.Add('      this.drag.options.limit[this.axis][1] = this.full;');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add('  set: function(A) {');
  SL.Add('    if (!((this.range > 0) ^ (A < this.min))) {');
  SL.Add('      A = this.min;');
  SL.Add('    }');
  SL.Add('    if (!((this.range > 0) ^ (A > this.max))) {');
  SL.Add('      A = this.max;');
  SL.Add('    }');
  SL.Add('    this.step = Math.round(A);');
  SL.Add('    this.checkStep();');
  SL.Add('    this.end();');
  SL.Add('    this.fireEvent("tick", this.toPosition(this.step));');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  clickedElement: function(C) {');
  SL.Add('    var B = this.range < 0 ? -1 : 1;');
  SL.Add('    var A = C.page[this.axis] - this.element.getPosition()[this');
  SL.Add('      .axis] - this.half;');
  SL.Add('    A = A.limit(-this.options.offset, this.full - this.options.offset);');
  SL.Add('    this.step = Math.round(this.min + B * this.toStep(A));');
  SL.Add('    this.checkStep();');
  SL.Add('    this.end();');
  SL.Add('    this.fireEvent("tick", A);');
  SL.Add('  },');
  SL.Add('  scrolledElement: function(A) {');
  SL.Add('    var B = (this.options.mode == "horizontal") ? (A.wheel < 0) :');
  SL.Add('      (A.wheel > 0);');
  SL.Add('    this.set(B ? this.step - this.stepSize : this.step + this.stepSize);');
  SL.Add('    A.stop();');
  SL.Add('  },');
  SL.Add('  draggedKnob: function() {');
  SL.Add('    var B = this.range < 0 ? -1 : 1;');
  SL.Add('    var A = this.drag.value.now[this.axis];');
  SL.Add('    A = A.limit(-this.options.offset, this.full - this.options.offset);');
  SL.Add('    this.step = Math.round(this.min + B * this.toStep(A));');
  SL.Add('    this.checkStep();');
  SL.Add('  },');
  SL.Add('  checkStep: function() {');
  SL.Add('    if (this.previousChange != this.step) {');
  SL.Add('      this.previousChange = this.step;');
  SL.Add('      this.fireEvent("change", this.step);');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add('  end: function() {');
  SL.Add('    if (this.previousEnd !== this.step) {');
  SL.Add('      this.previousEnd = this.step;');
  SL.Add('      this.fireEvent("complete", this.step + "");');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add('  toStep: function(A) {');
  SL.Add('    var B = (A + this.options.offset) * this.stepSize / this.full *');
  SL.Add('      this.steps;');
  SL.Add('    return this.options.steps ? Math.round(B -= B % this.stepSize) :');
  SL.Add('      B;');
  SL.Add('  },');
  SL.Add('  toPosition: function(A) {');
  SL.Add('    return (this.full * Math.abs(this.min - A)) / (this.steps *');
  SL.Add('      this.stepSize) - this.options.offset;');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('var Scroller = new Class({');
  SL.Add('  Implements: [Events, Options],');
  SL.Add('  options: {');
  SL.Add('    area: 20,');
  SL.Add('    velocity: 1,');
  SL.Add('    onChange: function(A, B) {');
  SL.Add('      this.element.scrollTo(A, B);');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add('  initialize: function(B, A) {');
  SL.Add('    this.setOptions(A);');
  SL.Add('    this.element = $(B);');
  SL.Add('    this.listener = ($type(this.element) != "element") ? $(this');
  SL.Add('      .element.getDocument()');
  SL.Add('      .body) : this.element;');
  SL.Add('    this.timer = null;');
  SL.Add('    this.coord = this.getCoords.bind(this);');
  SL.Add('  },');
  SL.Add('  start: function() {');
  SL.Add('    this.listener.addEvent("mousemove", this.coord);');
  SL.Add('  },');
  SL.Add('  stop: function() {');
  SL.Add('    this.listener.removeEvent("mousemove", this.coord);');
  SL.Add('    this.timer = $clear(this.timer);');
  SL.Add('  },');
  SL.Add('  getCoords: function(A) {');
  SL.Add('    this.page = (this.listener.get("tag") == "body") ? A.client :');
  SL.Add('      A.page;');
  SL.Add('    if (!this.timer) {');
  SL.Add('      this.timer = this.scroll.periodical(50, this);');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add('  scroll: function() {');
  SL.Add('    var B = this.element.getSize(),');
  SL.Add('      A = this.element.getScroll(),');
  SL.Add('      E = this.element.getPosition(),');
  SL.Add('      D = {');
  SL.Add('        x: 0,');
  SL.Add('        y: 0');
  SL.Add('      };');
  SL.Add('    for (var C in this.page) {');
  SL.Add('      if (this.page[C] < (this.options.area + E[C]) && A[C] !=');
  SL.Add('        0) {');
  SL.Add('        D[C] = (this.page[C] - this.options.area - E[C]) *');
  SL.Add('          this.options.velocity;');
  SL.Add('      } else {');
  SL.Add('        if (this.page[C] + this.options.area > (B[C] + E[C]) &&');
  SL.Add('          B[C] + B[C] != A[C]) {');
  SL.Add('          D[C] = (this.page[C] - B[C] + this.options.area -');
  SL.Add('            E[C]) * this.options.velocity;');
  SL.Add('        }');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    if (D.y || D.x) {');
  SL.Add('      this.fireEvent("change", [A.x + D.x, A.y + D.y]);');
  SL.Add('    }');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('var Accordion = new Class({');
  SL.Add('  Extends: Fx.Elements,');
  SL.Add('  options: {');
  SL.Add('    display: 0,');
  SL.Add('    show: false,');
  SL.Add('    height: true,');
  SL.Add('    width: false,');
  SL.Add('    opacity: true,');
  SL.Add('    fixedHeight: false,');
  SL.Add('    fixedWidth: false,');
  SL.Add('    wait: false,');
  SL.Add('    alwaysHide: false');
  SL.Add('  },');
  SL.Add('  initialize: function() {');
  SL.Add('    var C = Array.link(arguments, {');
  SL.Add('      container: Element.type,');
  SL.Add('      options: Object.type,');
  SL.Add('      togglers: $defined,');
  SL.Add('      elements: $defined');
  SL.Add('    });');
  SL.Add('    this.parent(C.elements, C.options);');
  SL.Add('    this.togglers = $$(C.togglers);');
  SL.Add('    this.container = $(C.container);');
  SL.Add('    this.previous = -1;');
  SL.Add('    if (this.options.alwaysHide) {');
  SL.Add('      this.options.wait = true;');
  SL.Add('    }');
  SL.Add('    if ($chk(this.options.show)) {');
  SL.Add('      this.options.display = false;');
  SL.Add('      this.previous = this.options.show;');
  SL.Add('    }');
  SL.Add('    if (this.options.start) {');
  SL.Add('      this.options.display = false;');
  SL.Add('      this.options.show = false;');
  SL.Add('    }');
  SL.Add('    this.effects = {};');
  SL.Add('    if (this.options.opacity) {');
  SL.Add('      this.effects.opacity = "fullOpacity";');
  SL.Add('    }');
  SL.Add('    if (this.options.width) {');
  SL.Add('      this.effects.width = this.options.fixedWidth ?');
  SL.Add('        "fullWidth" : "offsetWidth";');
  SL.Add('    }');
  SL.Add('    if (this.options.height) {');
  SL.Add('      this.effects.height = this.options.fixedHeight ?');
  SL.Add('        "fullHeight" : "scrollHeight";');
  SL.Add('    }');
  SL.Add('    for (var B = 0, A = this.togglers.length; B < A; B++) {');
  SL.Add('      this.addSection(this.togglers[B], this.elements[B]);');
  SL.Add('    }');
  SL.Add('    this.elements.each(function(E, D) {');
  SL.Add('      if (this.options.show === D) {');
  SL.Add('        this.fireEvent("active", [this.togglers[D],');
  SL.Add('          E');
  SL.Add('        ]);');
  SL.Add('      } else {');
  SL.Add('        for (var F in this.effects) {');
  SL.Add('          E.setStyle(F, 0);');
  SL.Add('        }');
  SL.Add('      }');
  SL.Add('    }, this);');
  SL.Add('    if ($chk(this.options.display)) {');
  SL.Add('      this.display(this.options.display);');
  SL.Add('    }');
  SL.Add('  },');
  SL.Add('  addSection: function(E, C, G) {');
  SL.Add('    E = $(E);');
  SL.Add('    C = $(C);');
  SL.Add('    var F = this.togglers.contains(E);');
  SL.Add('    var B = this.togglers.length;');
  SL.Add('    this.togglers.include(E);');
  SL.Add('    this.elements.include(C);');
  SL.Add('    if (B && (!F || G)) {');
  SL.Add('      G = $pick(G, B - 1);');
  SL.Add('      E.inject(this.togglers[G], "before");');
  SL.Add('      C.inject(E, "after");');
  SL.Add('    } else {');
  SL.Add('      if (this.container && !F) {');
  SL.Add('        E.inject(this.container);');
  SL.Add('        C.inject(this.container);');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    var A = this.togglers.indexOf(E);');
  SL.Add('    E.addEvent("click", this.display.bind(this, A));');
  SL.Add('    if (this.options.height) {');
  SL.Add('      C.setStyles({');
  SL.Add('        "padding-top": 0,');
  SL.Add('        "border-top": "none",');
  SL.Add('        "padding-bottom": 0,');
  SL.Add('        "border-bottom": "none"');
  SL.Add('      });');
  SL.Add('    }');
  SL.Add('    if (this.options.width) {');
  SL.Add('      C.setStyles({');
  SL.Add('        "padding-left": 0,');
  SL.Add('        "border-left": "none",');
  SL.Add('        "padding-right": 0,');
  SL.Add('        "border-right": "none"');
  SL.Add('      });');
  SL.Add('    }');
  SL.Add('    C.fullOpacity = 1;');
  SL.Add('    if (this.options.fixedWidth) {');
  SL.Add('      C.fullWidth = this.options.fixedWidth;');
  SL.Add('    }');
  SL.Add('    if (this.options.fixedHeight) {');
  SL.Add('      C.fullHeight = this.options.fixedHeight;');
  SL.Add('    }');
  SL.Add('    C.setStyle("overflow", "hidden");');
  SL.Add('    if (!F) {');
  SL.Add('      for (var D in this.effects) {');
  SL.Add('        C.setStyle(D, 0);');
  SL.Add('      }');
  SL.Add('    }');
  SL.Add('    return this;');
  SL.Add('  },');
  SL.Add('  display: function(A) {');
  SL.Add('    A = ($type(A) == "element") ? this.elements.indexOf(A) : A;');
  SL.Add('    if ((this.timer && this.options.wait) || (A === this.previous &&');
  SL.Add('        !this.options.alwaysHide)) {');
  SL.Add('      return this;');
  SL.Add('    }');
  SL.Add('    this.previous = A;');
  SL.Add('    var B = {};');
  SL.Add('    this.elements.each(function(E, D) {');
  SL.Add('      B[D] = {};');
  SL.Add('      var C = (D != A) || (this.options.alwaysHide &&');
  SL.Add('        (E.offsetHeight > 0));');
  SL.Add('      this.fireEvent(C ? "background" : "active", [');
  SL.Add('        this.togglers[D], E');
  SL.Add('      ]);');
  SL.Add('      for (var F in this.effects) {');
  SL.Add('        B[D][F] = C ? 0 : E[this.effects[F]];');
  SL.Add('      }');
  SL.Add('    }, this);');
  SL.Add('    return this.start(B);');
  SL.Add('  }');
  SL.Add('});');
  SL.Add('window.addEvent("domready", function() {');
  SL.Add('  mark_external_hrefs();');
  SL.Add('  slide_handler();');
  SL.Add('  view_code_handler();');
  SL.Add('  new TooltipInside();');
  SL.Add('});');
  SL.Add('');
  SL.Add('function slide_handler() {');
  SL.Add('  $$(".slide_handle")');
  SL.Add('    .each(function(elm) {');
  SL.Add('      $(elm.get("rel"))');
  SL.Add('        .set("slide", {');
  SL.Add('          duration: 1000');
  SL.Add('        })');
  SL.Add('        .slide("hide");');
  SL.Add('      elm.addEvent("click", function(e) {');
  SL.Add('        $(elm.get("rel"))');
  SL.Add('          .slide("toggle");');
  SL.Add('        e.stop();');
  SL.Add('      });');
  SL.Add('    });');
  SL.Add('}');
  SL.Add('');
  SL.Add('function mark_external_hrefs() {');
  SL.Add('  $$("a:[href]")');
  SL.Add('    .each(function(elm) {');
  SL.Add('      if (elm.get("class") == "" && elm.get("href")');
  SL.Add('        .test(');
  SL.Add('          "[a-zA-Z]:/")) {');  //kt was "://"
  SL.Add('        elm.addClass("external");');
  SL.Add('      }');
  SL.Add('    });');
  SL.Add('}');
  SL.Add('');
  SL.Add('function view_code_handler() {');
  SL.Add('  $$(".view_code")');
  SL.Add('    .each(function(knob) {');
  SL.Add('      var slide = new Fx.Slide(knob.getNext(".code"))');
  SL.Add('        .hide();');
  SL.Add('      knob.addEvent("click", function(e) {');
  SL.Add('        this.toggle();');
  SL.Add('        e.stop();');
  SL.Add('      }.bind(slide));');
  SL.Add('    });');
  SL.Add('}');
  SL.Add('var TooltipInside = new Class({');
  SL.Add('  Implements: Options,');
  SL.Add('  options: {');
  SL.Add('    grayClass: "gray"');
  SL.Add('  },');
  SL.Add('  initialize: function(options) {');
  SL.Add('    this.setOptions(options);');
  SL.Add('    $$("input[type=text][title]")');
  SL.Add('      .each(function(elm) {');
  SL.Add('        if (elm.get("value") == "" || elm.get("value") ==');
  SL.Add('          elm.get("title")) {');
  SL.Add('          elm.set("value", elm.get("title"))');
  SL.Add('            .addClass(');
  SL.Add('              this.options.grayClass);');
  SL.Add('        }');
  SL.Add('        elm.addEvents({');
  SL.Add('          "focus": function(e) {');
  SL.Add('            var input = e.target;');
  SL.Add('            if (input.get("value") ==');
  SL.Add('              input.get("title")) {');
  SL.Add('              input.set("value", "")');
  SL.Add('                .removeClass(');
  SL.Add('                  this.options.grayClass');
  SL.Add('                );');
  SL.Add('            }');
  SL.Add('          }.bind(this),');
  SL.Add('          "blur": function(e) {');
  SL.Add('            var input = e.target;');
  SL.Add('            if (input.get("value") ==');
  SL.Add('              "") {');
  SL.Add('              input.addClass(this.options');
  SL.Add('                  .grayClass)');
  SL.Add('                .set(');
  SL.Add('                  "value", input.get(');
  SL.Add('                    "title"));');
  SL.Add('            }');
  SL.Add('          }.bind(this)');
  SL.Add('        });');
  SL.Add('      }.bind(this));');
  SL.Add('  }');
  SL.Add('});');
  //NOTE: this is the END of the javascript code library
end;

end.

